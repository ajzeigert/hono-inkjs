{"version":3,"file":"ink-es2015.js","sources":["../src/engine/Path.ts","../src/engine/Debug.ts","../src/engine/Value.ts","../src/engine/PushPop.ts","../src/engine/Error.ts","../src/engine/TypeAssertion.ts","../src/engine/NullException.ts","../src/engine/Object.ts","../src/engine/StringBuilder.ts","../src/engine/InkList.ts","../src/engine/StoryException.ts","../src/engine/TryGetResult.ts","../src/engine/SearchResult.ts","../src/engine/Container.ts","../src/engine/Glue.ts","../src/engine/ControlCommand.ts","../src/engine/Pointer.ts","../src/engine/Divert.ts","../src/engine/ChoicePoint.ts","../src/engine/VariableReference.ts","../src/engine/VariableAssignment.ts","../src/engine/Void.ts","../src/engine/NativeFunctionCall.ts","../src/engine/Tag.ts","../src/engine/Choice.ts","../src/engine/ListDefinition.ts","../src/engine/ListDefinitionsOrigin.ts","../src/engine/JsonSerialisation.ts","../src/engine/CallStack.ts","../src/engine/VariablesState.ts","../src/engine/PRNG.ts","../src/engine/StatePatch.ts","../src/engine/SimpleJson.ts","../src/engine/Flow.ts","../src/engine/StoryState.ts","../src/engine/StopWatch.ts","../src/engine/Story.ts"],"sourcesContent":["export class Path {\n  public static parentId = \"^\";\n\n  public _isRelative: boolean;\n  public _components: Path.Component[];\n  public _componentsString: string | null;\n\n  constructor();\n  constructor(componentsString: string);\n  constructor(head: Path.Component, tail: Path);\n  constructor(head: Path.Component[], relative?: boolean);\n  constructor() {\n    this._components = [];\n    this._componentsString = null;\n    this._isRelative = false;\n\n    if (typeof arguments[0] == \"string\") {\n      let componentsString = arguments[0] as string;\n      this.componentsString = componentsString;\n    } else if (\n      arguments[0] instanceof Path.Component &&\n      arguments[1] instanceof Path\n    ) {\n      let head = arguments[0] as Path.Component;\n      let tail = arguments[1] as Path;\n      this._components.push(head);\n      this._components = this._components.concat(tail._components);\n    } else if (arguments[0] instanceof Array) {\n      let head = arguments[0] as Path.Component[];\n      let relative = !!arguments[1] as boolean;\n      this._components = this._components.concat(head);\n      this._isRelative = relative;\n    }\n  }\n  get isRelative() {\n    return this._isRelative;\n  }\n  get componentCount(): number {\n    return this._components.length;\n  }\n  get head(): Path.Component | null {\n    if (this._components.length > 0) {\n      return this._components[0];\n    } else {\n      return null;\n    }\n  }\n  get tail(): Path {\n    if (this._components.length >= 2) {\n      // careful, the original code uses length-1 here. This is because the second argument of\n      // List.GetRange is a number of elements to extract, wherease Array.slice uses an index\n      let tailComps = this._components.slice(1, this._components.length);\n      return new Path(tailComps);\n    } else {\n      return Path.self;\n    }\n  }\n  get length(): number {\n    return this._components.length;\n  }\n  get lastComponent(): Path.Component | null {\n    let lastComponentIdx = this._components.length - 1;\n    if (lastComponentIdx >= 0) {\n      return this._components[lastComponentIdx];\n    } else {\n      return null;\n    }\n  }\n  get containsNamedComponent(): boolean {\n    for (let i = 0, l = this._components.length; i < l; i++) {\n      if (!this._components[i].isIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static get self(): Path {\n    let path = new Path();\n    path._isRelative = true;\n    return path;\n  }\n\n  public GetComponent(index: number): Path.Component {\n    return this._components[index];\n  }\n  public PathByAppendingPath(pathToAppend: Path): Path {\n    let p = new Path();\n\n    let upwardMoves = 0;\n    for (let i = 0; i < pathToAppend._components.length; ++i) {\n      if (pathToAppend._components[i].isParent) {\n        upwardMoves++;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = 0; i < this._components.length - upwardMoves; ++i) {\n      p._components.push(this._components[i]);\n    }\n\n    for (let i = upwardMoves; i < pathToAppend._components.length; ++i) {\n      p._components.push(pathToAppend._components[i]);\n    }\n\n    return p;\n  }\n  get componentsString(): string {\n    if (this._componentsString == null) {\n      this._componentsString = this._components.join(\".\");\n      if (this.isRelative)\n        this._componentsString = \".\" + this._componentsString;\n    }\n\n    return this._componentsString;\n  }\n  set componentsString(value: string) {\n    this._components.length = 0;\n\n    this._componentsString = value;\n\n    if (this._componentsString == null || this._componentsString == \"\") return;\n\n    if (this._componentsString[0] == \".\") {\n      this._isRelative = true;\n      this._componentsString = this._componentsString.substring(1);\n    }\n\n    let componentStrings = this._componentsString.split(\".\");\n    for (let str of componentStrings) {\n      // we need to distinguish between named components that start with a number, eg \"42somewhere\", and indexed components\n      // the normal parseInt won't do for the detection because it's too relaxed.\n      // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n      if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(str)) {\n        this._components.push(new Path.Component(parseInt(str)));\n      } else {\n        this._components.push(new Path.Component(str));\n      }\n    }\n  }\n  public toString(): string {\n    return this.componentsString;\n  }\n  public Equals(otherPath: Path | null): boolean {\n    if (otherPath == null) return false;\n\n    if (otherPath._components.length != this._components.length) return false;\n\n    if (otherPath.isRelative != this.isRelative) return false;\n\n    // the original code uses SequenceEqual here, so we need to iterate over the components manually.\n    for (let i = 0, l = otherPath._components.length; i < l; i++) {\n      // it's not quite clear whether this test should use Equals or a simple == operator,\n      // see https://github.com/y-lohse/inkjs/issues/22\n      if (!otherPath._components[i].Equals(this._components[i])) return false;\n    }\n\n    return true;\n  }\n  public PathByAppendingComponent(c: Path.Component): Path {\n    let p = new Path();\n    p._components.push(...this._components);\n    p._components.push(c);\n    return p;\n  }\n}\n\nexport namespace Path {\n  export class Component {\n    public readonly index: number;\n    public readonly name: string | null;\n\n    constructor(indexOrName: string | number) {\n      this.index = -1;\n      this.name = null;\n      if (typeof indexOrName == \"string\") {\n        this.name = indexOrName;\n      } else {\n        this.index = indexOrName;\n      }\n    }\n    get isIndex(): boolean {\n      return this.index >= 0;\n    }\n    get isParent(): boolean {\n      return this.name == Path.parentId;\n    }\n\n    public static ToParent(): Component {\n      return new Component(Path.parentId);\n    }\n    public toString(): string | null {\n      if (this.isIndex) {\n        return this.index.toString();\n      } else {\n        return this.name;\n      }\n    }\n    public Equals(otherComp: Component): boolean {\n      if (otherComp != null && otherComp.isIndex == this.isIndex) {\n        if (this.isIndex) {\n          return this.index == otherComp.index;\n        } else {\n          return this.name == otherComp.name;\n        }\n      }\n\n      return false;\n    }\n  }\n}\n","export namespace Debug {\n  export function AssertType<T>(\n    variable: any,\n    type: new () => T,\n    message: string\n  ): void | never {\n    Assert(variable instanceof type, message);\n  }\n\n  export function Assert(condition: boolean, message?: string): void | never {\n    if (!condition) {\n      if (typeof message !== \"undefined\") {\n        console.warn(message);\n      }\n\n      if (console.trace) {\n        console.trace();\n      }\n\n      throw new Error(\"\");\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { StoryException } from \"./StoryException\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { tryParseInt, tryParseFloat } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport abstract class AbstractValue extends InkObject {\n  public abstract get valueType(): ValueType;\n  public abstract get isTruthy(): boolean;\n  public abstract get valueObject(): any;\n\n  public abstract Cast(newType: ValueType): Value<any>;\n\n  public static Create(\n    val: any,\n    preferredNumberType?: ValueType\n  ): Value<any> | null {\n    // This code doesn't exist in upstream and is simply here to enforce\n    // the creation of the proper number value.\n    // If `preferredNumberType` is not provided or if value doesn't match\n    // `preferredNumberType`, this conditional does nothing.\n    if (preferredNumberType) {\n      if (\n        preferredNumberType === (ValueType.Int as ValueType) &&\n        Number.isInteger(Number(val))\n      ) {\n        return new IntValue(Number(val));\n      } else if (\n        preferredNumberType === (ValueType.Float as ValueType) &&\n        !isNaN(val)\n      ) {\n        return new FloatValue(Number(val));\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      return new BoolValue(Boolean(val));\n    }\n\n    // https://github.com/y-lohse/inkjs/issues/425\n    // Changed condition sequence, because Number('') is\n    // parsed to 0, which made setting string to empty\n    // impossible\n    if (typeof val === \"string\") {\n      return new StringValue(String(val));\n    } else if (Number.isInteger(Number(val))) {\n      return new IntValue(Number(val));\n    } else if (!isNaN(val)) {\n      return new FloatValue(Number(val));\n    } else if (val instanceof Path) {\n      return new DivertTargetValue(asOrThrows(val, Path));\n    } else if (val instanceof InkList) {\n      return new ListValue(asOrThrows(val, InkList));\n    }\n\n    return null;\n  }\n  public Copy() {\n    return asOrThrows(AbstractValue.Create(this.valueObject), InkObject);\n  }\n  public BadCastException(targetType: ValueType) {\n    return new StoryException(\n      \"Can't cast \" +\n        this.valueObject +\n        \" from \" +\n        this.valueType +\n        \" to \" +\n        targetType\n    );\n  }\n}\n\nexport abstract class Value<\n  T extends { toString: () => string }\n> extends AbstractValue {\n  public value: T | null;\n\n  constructor(val: T | null) {\n    super();\n    this.value = val;\n  }\n  public get valueObject() {\n    return this.value;\n  }\n  public toString() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.toString();\n  }\n}\n\nexport class BoolValue extends Value<boolean> {\n  constructor(val: boolean) {\n    super(val || false);\n  }\n  public get isTruthy() {\n    return Boolean(this.value);\n  }\n  public get valueType() {\n    return ValueType.Bool;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value ? 1 : 0);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value ? 1.0 : 0.0);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(this.value ? \"true\" : \"false\");\n    }\n\n    throw this.BadCastException(newType);\n  }\n\n  public toString() {\n    return this.value ? \"true\" : \"false\";\n  }\n}\n\nexport class IntValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0);\n  }\n  public get isTruthy() {\n    return this.value != 0;\n  }\n  public get valueType() {\n    return ValueType.Int;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0 ? false : true);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class FloatValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0.0);\n  }\n  public get isTruthy() {\n    return this.value != 0.0;\n  }\n  public get valueType() {\n    return ValueType.Float;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0.0 ? false : true);\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class StringValue extends Value<string> {\n  public _isNewline: boolean;\n  public _isInlineWhitespace: boolean;\n\n  constructor(val: string) {\n    super(val || \"\");\n\n    this._isNewline = this.value == \"\\n\";\n    this._isInlineWhitespace = true;\n\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (this.value.length > 0) {\n      this.value.split(\"\").every((c) => {\n        if (c != \" \" && c != \"\\t\") {\n          this._isInlineWhitespace = false;\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }\n  public get valueType() {\n    return ValueType.String;\n  }\n  public get isTruthy() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.length > 0;\n  }\n  public get isNewline() {\n    return this._isNewline;\n  }\n  public get isInlineWhitespace() {\n    return this._isInlineWhitespace;\n  }\n  public get isNonWhitespace() {\n    return !this.isNewline && !this.isInlineWhitespace;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      let parsedInt = tryParseInt(this.value);\n      if (parsedInt.exists) {\n        return new IntValue(parsedInt.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    if (newType == ValueType.Float) {\n      let parsedFloat = tryParseFloat(this.value);\n      if (parsedFloat.exists) {\n        return new FloatValue(parsedFloat.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class DivertTargetValue extends Value<Path> {\n  constructor(targetPath: Path | null = null) {\n    super(targetPath);\n  }\n  public get valueType() {\n    return ValueType.DivertTarget;\n  }\n  public get targetPath() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set targetPath(value: Path) {\n    this.value = value;\n  }\n  public get isTruthy(): never {\n    throw new Error(\"Shouldn't be checking the truthiness of a divert target\");\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"DivertTargetValue(\" + this.targetPath + \")\";\n  }\n}\n\nexport class VariablePointerValue extends Value<string> {\n  public _contextIndex: number;\n\n  constructor(variableName: string, contextIndex: number = -1) {\n    super(variableName);\n\n    this._contextIndex = contextIndex;\n  }\n\n  public get contextIndex() {\n    return this._contextIndex;\n  }\n  public set contextIndex(value: number) {\n    this._contextIndex = value;\n  }\n  public get variableName() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set variableName(value: string) {\n    this.value = value;\n  }\n  public get valueType() {\n    return ValueType.VariablePointer;\n  }\n\n  public get isTruthy(): never {\n    throw new Error(\n      \"Shouldn't be checking the truthiness of a variable pointer\"\n    );\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"VariablePointerValue(\" + this.variableName + \")\";\n  }\n  public Copy() {\n    return new VariablePointerValue(this.variableName, this.contextIndex);\n  }\n}\n\nexport class ListValue extends Value<InkList> {\n  public get isTruthy() {\n    if (this.value === null) {\n      return throwNullException(\"this.value\");\n    }\n    return this.value.Count > 0;\n  }\n  public get valueType() {\n    return ValueType.List;\n  }\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == ValueType.Int) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new IntValue(0);\n      else return new IntValue(max.Value);\n    } else if (newType == ValueType.Float) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new FloatValue(0.0);\n      else return new FloatValue(max.Value);\n    } else if (newType == ValueType.String) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new StringValue(\"\");\n      else {\n        return new StringValue(max.Key.toString());\n      }\n    }\n\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  constructor();\n  constructor(list: InkList);\n  constructor(listOrSingleItem: InkListItem, singleValue: number);\n  constructor(listOrSingleItem?: InkListItem | InkList, singleValue?: number) {\n    super(null);\n\n    if (!listOrSingleItem && !singleValue) {\n      this.value = new InkList();\n    } else if (listOrSingleItem instanceof InkList) {\n      this.value = new InkList(listOrSingleItem);\n    } else if (\n      listOrSingleItem instanceof InkListItem &&\n      typeof singleValue === \"number\"\n    ) {\n      this.value = new InkList({\n        Key: listOrSingleItem,\n        Value: singleValue,\n      });\n    }\n  }\n  public static RetainListOriginsForAssignment(\n    oldValue: InkObject | null,\n    newValue: InkObject\n  ) {\n    let oldList = asOrNull(oldValue, ListValue);\n    let newList = asOrNull(newValue, ListValue);\n\n    if (newList && newList.value === null)\n      return throwNullException(\"newList.value\");\n    if (oldList && oldList.value === null)\n      return throwNullException(\"oldList.value\");\n\n    // When assigning the empty list, try to retain any initial origin names\n    if (oldList && newList && newList.value!.Count == 0)\n      newList.value!.SetInitialOriginNames(oldList.value!.originNames);\n  }\n}\n\nexport enum ValueType {\n  Bool = -1,\n  Int = 0,\n  Float = 1,\n  List = 2,\n  String = 3,\n  DivertTarget = 4,\n  VariablePointer = 5,\n}\n","export enum PushPopType {\n  Tunnel = 0,\n  Function = 1,\n  FunctionEvaluationFromGame = 2,\n}\n","// TODO: Unify with Compiler.\n\nexport type ErrorHandler = (message: string, type: ErrorType) => void;\n\nexport enum ErrorType {\n  Author,\n  Warning,\n  Error,\n}\n","import { INamedContent } from \"./INamedContent\";\n\nexport function asOrNull<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | null {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    return null;\n  }\n}\n\nexport function asOrThrows<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | never {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    throw new Error(`${obj} is not of type ${type}`);\n  }\n}\n\nexport function asNumberOrThrows(obj: any) {\n  if (typeof obj === \"number\") {\n    return obj as number;\n  } else {\n    throw new Error(`${obj} is not a number`);\n  }\n}\n\nexport function asBooleanOrThrows(obj: any) {\n  if (typeof obj === \"boolean\") {\n    return obj as boolean;\n  } else {\n    throw new Error(`${obj} is not a boolean`);\n  }\n}\n\n// So here, in the reference implementation, contentObj is casted to an INamedContent\n// but here we use js-style duck typing: if it implements the same props as the interface,\n// we treat it as valid.\nexport function asINamedContentOrNull(obj: any): INamedContent | null {\n  if (obj.hasValidName && obj.name) {\n    return obj as INamedContent;\n  }\n\n  return null;\n}\n\nexport function nullIfUndefined<T>(obj: T | undefined): T | null {\n  if (typeof obj === \"undefined\") {\n    return null;\n  }\n\n  return obj;\n}\n\nexport function isEquatable(type: any) {\n  return typeof type === \"object\" && typeof type.Equals === \"function\";\n}\n\nfunction unsafeTypeAssertion<T>(\n  obj: any,\n  type: (new () => T) | (Function & { prototype: T })\n) {\n  return obj as T;\n}\n\nexport function filterUndef<T>(element: T | undefined): element is T {\n  return element != undefined;\n}\n","/**\n * In the original C# code, a SystemException would be thrown when passing\n * null to methods expected a valid instance. Javascript has no such\n * concept, but TypeScript will not allow `null` to be passed to methods\n * explicitely requiring a valid type.\n *\n * Whenever TypeScript complain about the possibility of a `null` value,\n * check the offending value and it it's null, throw this exception using\n * `throwNullException(name: string)`.\n */\nexport class NullException extends Error {}\n\n/**\n * Throw a NullException.\n *\n * @param name a short description of the offending value (often its name within the code).\n */\nexport function throwNullException(name: string): never {\n  throw new NullException(`${name} is null or undefined`);\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { Debug } from \"./Debug\";\nimport { asOrNull, asINamedContentOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SearchResult } from \"./SearchResult\";\nimport { DebugMetadata } from \"./DebugMetadata\";\n\nexport class InkObject {\n  public parent: InkObject | null = null;\n\n  get debugMetadata(): DebugMetadata | null {\n    if (this._debugMetadata === null) {\n      if (this.parent) {\n        return this.parent.debugMetadata;\n      }\n    }\n\n    return this._debugMetadata;\n  }\n\n  set debugMetadata(value) {\n    this._debugMetadata = value;\n  }\n\n  get ownDebugMetadata() {\n    return this._debugMetadata;\n  }\n\n  private _debugMetadata: DebugMetadata | null = null;\n\n  public DebugLineNumberOfPath(path: Path) {\n    if (path === null) return null;\n\n    // Try to get a line number from debug metadata\n    let root = this.rootContentContainer;\n    if (root) {\n      let targetContent = root.ContentAtPath(path).obj;\n      if (targetContent) {\n        let dm = targetContent.debugMetadata;\n        if (dm !== null) {\n          return dm.startLineNumber;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  get path() {\n    if (this._path == null) {\n      if (this.parent == null) {\n        this._path = new Path();\n      } else {\n        let comps: Path.Component[] = [];\n\n        let child: InkObject = this;\n        let container = asOrNull(child.parent, Container);\n\n        while (container !== null) {\n          let namedChild = asINamedContentOrNull(child);\n          if (namedChild != null && namedChild.hasValidName) {\n            if (namedChild.name === null)\n              return throwNullException(\"namedChild.name\");\n            comps.unshift(new Path.Component(namedChild.name!));\n          } else {\n            comps.unshift(new Path.Component(container.content.indexOf(child)));\n          }\n\n          child = container;\n          container = asOrNull(container.parent, Container);\n        }\n\n        this._path = new Path(comps);\n      }\n    }\n\n    return this._path;\n  }\n  private _path: Path | null = null;\n\n  public ResolvePath(path: Path | null): SearchResult {\n    if (path === null) return throwNullException(\"path\");\n    if (path.isRelative) {\n      let nearestContainer = asOrNull(this, Container);\n\n      if (nearestContainer === null) {\n        Debug.Assert(\n          this.parent !== null,\n          \"Can't resolve relative path because we don't have a parent\"\n        );\n        nearestContainer = asOrNull(this.parent, Container);\n        Debug.Assert(\n          nearestContainer !== null,\n          \"Expected parent to be a container\"\n        );\n        Debug.Assert(path.GetComponent(0).isParent);\n        path = path.tail;\n      }\n\n      if (nearestContainer === null) {\n        return throwNullException(\"nearestContainer\");\n      }\n      return nearestContainer.ContentAtPath(path);\n    } else {\n      let contentContainer = this.rootContentContainer;\n      if (contentContainer === null) {\n        return throwNullException(\"contentContainer\");\n      }\n      return contentContainer.ContentAtPath(path);\n    }\n  }\n\n  public ConvertPathToRelative(globalPath: Path) {\n    let ownPath = this.path;\n\n    let minPathLength = Math.min(globalPath.length, ownPath.length);\n    let lastSharedPathCompIndex = -1;\n\n    for (let i = 0; i < minPathLength; ++i) {\n      let ownComp = ownPath.GetComponent(i);\n      let otherComp = globalPath.GetComponent(i);\n\n      if (ownComp.Equals(otherComp)) {\n        lastSharedPathCompIndex = i;\n      } else {\n        break;\n      }\n    }\n\n    // No shared path components, so just use global path\n    if (lastSharedPathCompIndex == -1) return globalPath;\n\n    let numUpwardsMoves = ownPath.componentCount - 1 - lastSharedPathCompIndex;\n\n    let newPathComps: Path.Component[] = [];\n\n    for (let up = 0; up < numUpwardsMoves; ++up)\n      newPathComps.push(Path.Component.ToParent());\n\n    for (\n      let down = lastSharedPathCompIndex + 1;\n      down < globalPath.componentCount;\n      ++down\n    )\n      newPathComps.push(globalPath.GetComponent(down));\n\n    let relativePath = new Path(newPathComps, true);\n    return relativePath;\n  }\n\n  public CompactPathString(otherPath: Path) {\n    let globalPathStr = null;\n    let relativePathStr = null;\n\n    if (otherPath.isRelative) {\n      relativePathStr = otherPath.componentsString;\n      globalPathStr = this.path.PathByAppendingPath(otherPath).componentsString;\n    } else {\n      let relativePath = this.ConvertPathToRelative(otherPath);\n      relativePathStr = relativePath.componentsString;\n      globalPathStr = otherPath.componentsString;\n    }\n\n    if (relativePathStr.length < globalPathStr.length) return relativePathStr;\n    else return globalPathStr;\n  }\n\n  get rootContentContainer() {\n    let ancestor: InkObject = this;\n    while (ancestor.parent) {\n      ancestor = ancestor.parent;\n    }\n    return asOrNull(ancestor, Container);\n  }\n\n  public Copy(): InkObject {\n    throw Error(\"Not Implemented: Doesn't support copying\");\n  }\n  // SetChild works slightly diferently in the js implementation.\n  // Since we can't pass an objets property by reference, we instead pass\n  // the object and the property string.\n  // TODO: This method can probably be rewritten with type-safety in mind.\n  public SetChild(obj: any, prop: any, value: any) {\n    if (obj[prop]) obj[prop] = null;\n\n    obj[prop] = value;\n\n    if (obj[prop]) obj[prop].parent = this;\n  }\n\n  public Equals(obj: any) {\n    return obj === this;\n  }\n}\n","export class StringBuilder {\n  private string: string;\n\n  constructor(str?: string) {\n    str = typeof str !== \"undefined\" ? str.toString() : \"\";\n    this.string = str;\n  }\n  get Length(): number {\n    return this.string.length;\n  }\n  public Append(str: string | null) {\n    if (str !== null) {\n      this.string += str;\n    }\n  }\n  public AppendLine(str?: string) {\n    if (typeof str !== \"undefined\") this.Append(str);\n    this.string += \"\\n\";\n  }\n  public AppendFormat(format: string, ...args: any[]) {\n    // taken from http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\n    this.string += format.replace(/{(\\d+)}/g, (match: string, num: number) =>\n      typeof args[num] != \"undefined\" ? args[num] : match\n    );\n  }\n  public toString(): string {\n    return this.string;\n  }\n\n  public Clear() {\n    this.string = \"\";\n  }\n}\n","import { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Story } from \"./Story\";\n\nexport class InkListItem implements IInkListItem {\n  // InkListItem is a struct\n\n  public readonly originName: string | null = null;\n  public readonly itemName: string | null = null;\n\n  constructor(originName: string | null, itemName: string | null);\n  constructor(fullName: string | null);\n  constructor() {\n    if (typeof arguments[1] !== \"undefined\") {\n      let originName = arguments[0] as string | null;\n      let itemName = arguments[1] as string | null;\n\n      this.originName = originName;\n      this.itemName = itemName;\n    } else if (arguments[0]) {\n      let fullName = arguments[0] as string;\n\n      let nameParts = fullName.toString().split(\".\");\n      this.originName = nameParts[0];\n      this.itemName = nameParts[1];\n    }\n  }\n  public static get Null() {\n    return new InkListItem(null, null);\n  }\n  public get isNull() {\n    return this.originName == null && this.itemName == null;\n  }\n  get fullName() {\n    return (\n      (this.originName !== null ? this.originName : \"?\") + \".\" + this.itemName\n    );\n  }\n  public toString(): string {\n    return this.fullName;\n  }\n  public Equals(obj: InkListItem) {\n    if (obj instanceof InkListItem) {\n      let otherItem = obj;\n      return (\n        otherItem.itemName == this.itemName &&\n        otherItem.originName == this.originName\n      );\n    }\n\n    return false;\n  }\n\n  // These methods did not exist in the original C# code. Their purpose is to\n  // make `InkListItem` mimics the value-type semantics of the original\n  // struct. Please refer to the end of this file, for a more in-depth\n  // explanation.\n\n  /**\n   * Returns a shallow clone of the current instance.\n   */\n  public copy() {\n    return new InkListItem(this.originName, this.itemName);\n  }\n  /**\n   * Returns a `SerializedInkListItem` representing the current\n   * instance. The result is intended to be used as a key inside a Map.\n   */\n  public serialized(): SerializedInkListItem {\n    // We are simply using a JSON representation as a value-typed key.\n    return JSON.stringify({\n      originName: this.originName,\n      itemName: this.itemName,\n    });\n  }\n\n  /**\n   * Reconstructs a `InkListItem` from the given SerializedInkListItem.\n   */\n  public static fromSerializedKey(key: SerializedInkListItem): InkListItem {\n    let obj = JSON.parse(key);\n    if (!InkListItem.isLikeInkListItem(obj)) return InkListItem.Null;\n\n    let inkListItem = obj as IInkListItem;\n\n    return new InkListItem(inkListItem.originName, inkListItem.itemName);\n  }\n\n  /**\n   * Determines whether the given item is sufficiently `InkListItem`-like\n   * to be used as a template when reconstructing the InkListItem.\n   */\n  private static isLikeInkListItem(item: any) {\n    if (typeof item !== \"object\") return false;\n    if (!item.hasOwnProperty(\"originName\") || !item.hasOwnProperty(\"itemName\"))\n      return false;\n    if (typeof item.originName !== \"string\" && typeof item.originName !== null)\n      return false;\n    if (typeof item.itemName !== \"string\" && typeof item.itemName !== null)\n      return false;\n\n    return true;\n  }\n}\n\nexport class InkList extends Map<SerializedInkListItem, number> {\n  public origins: ListDefinition[] | null = null;\n  public _originNames: string[] | null = [];\n\n  constructor();\n  constructor(otherList: InkList);\n  constructor(singleOriginListName: string, originStory: Story);\n  constructor(singleElement: KeyValuePair<InkListItem, number>);\n  constructor() {\n    // Trying to be smart here, this emulates the constructor inheritance found\n    // in the original code, but only if otherList is an InkList. IIFE FTW.\n    super(\n      (() => {\n        if (arguments[0] instanceof InkList) {\n          return arguments[0];\n        } else {\n          return [];\n        }\n      })()\n    );\n\n    if (arguments[0] instanceof InkList) {\n      let otherList = arguments[0] as InkList;\n\n      let otherOriginNames = otherList.originNames as string[];\n      if (otherOriginNames !== null)\n        this._originNames = otherOriginNames.slice();\n      if (otherList.origins !== null) {\n        this.origins = otherList.origins.slice();\n      }\n    } else if (typeof arguments[0] === \"string\") {\n      let singleOriginListName = arguments[0] as string;\n      let originStory = arguments[1] as Story;\n      this.SetInitialOriginName(singleOriginListName);\n\n      if (originStory.listDefinitions === null) {\n        return throwNullException(\"originStory.listDefinitions\");\n      }\n      let def = originStory.listDefinitions.TryListGetDefinition(\n        singleOriginListName,\n        null\n      );\n      if (def.exists) {\n        // Throwing now, because if the value is `null` it will\n        // eventually throw down the line.\n        if (def.result === null) {\n          return throwNullException(\"def.result\");\n        }\n        this.origins = [def.result];\n      } else {\n        throw new Error(\n          \"InkList origin could not be found in story when constructing new list: \" +\n            singleOriginListName\n        );\n      }\n    } else if (\n      typeof arguments[0] === \"object\" &&\n      arguments[0].hasOwnProperty(\"Key\") &&\n      arguments[0].hasOwnProperty(\"Value\")\n    ) {\n      let singleElement = arguments[0] as KeyValuePair<InkListItem, number>;\n      this.Add(singleElement.Key, singleElement.Value);\n    }\n  }\n\n  public static FromString(myListItem: string, originStory: Story) {\n    let listValue =\n      originStory.listDefinitions?.FindSingleItemListWithName(myListItem);\n    if (listValue) {\n      if (listValue.value === null) {\n        return throwNullException(\"listValue.value\");\n      }\n      return new InkList(listValue.value);\n    } else {\n      throw new Error(\n        \"Could not find the InkListItem from the string '\" +\n          myListItem +\n          \"' to create an InkList because it doesn't exist in the original list definition in ink.\"\n      );\n    }\n  }\n\n  public AddItem(itemOrItemName: InkListItem | string | null) {\n    if (itemOrItemName instanceof InkListItem) {\n      let item = itemOrItemName;\n\n      if (item.originName == null) {\n        this.AddItem(item.itemName);\n        return;\n      }\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (origin.name == item.originName) {\n          let intVal = origin.TryGetValueForItem(item, 0);\n          if (intVal.exists) {\n            this.Add(item, intVal.result);\n            return;\n          } else {\n            throw new Error(\n              \"Could not add the item \" +\n                item +\n                \" to this list because it doesn't exist in the original list definition in ink.\"\n            );\n          }\n        }\n      }\n\n      throw new Error(\n        \"Failed to add item to list because the item was from a new list definition that wasn't previously known to this list. Only items from previously known lists can be used, so that the int value can be found.\"\n      );\n    } else {\n      let itemName = itemOrItemName as string | null;\n\n      let foundListDef: ListDefinition | null = null;\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (itemName === null) return throwNullException(\"itemName\");\n\n        if (origin.ContainsItemWithName(itemName)) {\n          if (foundListDef != null) {\n            throw new Error(\n              \"Could not add the item \" +\n                itemName +\n                \" to this list because it could come from either \" +\n                origin.name +\n                \" or \" +\n                foundListDef.name\n            );\n          } else {\n            foundListDef = origin;\n          }\n        }\n      }\n\n      if (foundListDef == null)\n        throw new Error(\n          \"Could not add the item \" +\n            itemName +\n            \" to this list because it isn't known to any list definitions previously associated with this list.\"\n        );\n\n      let item = new InkListItem(foundListDef.name, itemName);\n      let itemVal = foundListDef.ValueForItem(item);\n      this.Add(item, itemVal);\n    }\n  }\n  public ContainsItemNamed(itemName: string | null) {\n    for (let [key] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (item.itemName == itemName) return true;\n    }\n\n    return false;\n  }\n  public ContainsKey(key: InkListItem) {\n    return this.has(key.serialized());\n  }\n  public Add(key: InkListItem, value: number) {\n    let serializedKey = key.serialized();\n    if (this.has(serializedKey)) {\n      // Throw an exception to match the C# behavior.\n      throw new Error(`The Map already contains an entry for ${key}`);\n    }\n    this.set(serializedKey, value);\n  }\n  public Remove(key: InkListItem) {\n    return this.delete(key.serialized());\n  }\n  get Count() {\n    return this.size;\n  }\n  get originOfMaxItem(): ListDefinition | null {\n    if (this.origins == null) return null;\n\n    let maxOriginName = this.maxItem.Key.originName;\n    let result = null;\n    this.origins.every((origin) => {\n      if (origin.name == maxOriginName) {\n        result = origin;\n        return false;\n      } else return true;\n    });\n\n    return result;\n  }\n  get originNames(): string[] {\n    if (this.Count > 0) {\n      if (this._originNames == null && this.Count > 0) this._originNames = [];\n      else {\n        if (!this._originNames) this._originNames = [];\n        this._originNames.length = 0;\n      }\n\n      for (let [key] of this) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.originName === null)\n          return throwNullException(\"item.originName\");\n        this._originNames.push(item.originName);\n      }\n    }\n\n    return this._originNames as string[];\n  }\n  public SetInitialOriginName(initialOriginName: string) {\n    this._originNames = [initialOriginName];\n  }\n  public SetInitialOriginNames(initialOriginNames: string[]) {\n    if (initialOriginNames == null) this._originNames = null;\n    else this._originNames = initialOriginNames.slice(); // store a copy\n  }\n  get maxItem() {\n    let max: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (max.Key.isNull || value > max.Value)\n        max = { Key: item, Value: value };\n    }\n\n    return max;\n  }\n  get minItem() {\n    let min: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (min.Key.isNull || value < min.Value) {\n        min = { Key: item, Value: value };\n      }\n    }\n    return min;\n  }\n  get inverse() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          if (!this.ContainsKey(item)) list.Add(item, value);\n        }\n      }\n    }\n    return list;\n  }\n  get all() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          list.set(item.serialized(), value);\n        }\n      }\n    }\n    return list;\n  }\n  public Union(otherList: InkList) {\n    let union = new InkList(this);\n    for (let [key, value] of otherList) {\n      union.set(key, value);\n    }\n    return union;\n  }\n  public Intersect(otherList: InkList) {\n    let intersection = new InkList();\n    for (let [key, value] of this) {\n      if (otherList.has(key)) intersection.set(key, value);\n    }\n\n    return intersection;\n  }\n  public HasIntersection(otherList: InkList): boolean {\n    for (let [key] of this) {\n      if (otherList.has(key)) return true;\n    }\n    return false;\n  }\n  public Without(listToRemove: InkList) {\n    let result = new InkList(this);\n    for (let [key] of listToRemove) {\n      result.delete(key);\n    }\n\n    return result;\n  }\n\n  public Contains(key: string): boolean;\n  public Contains(otherList: InkList): boolean;\n  public Contains(what: string | InkList): boolean {\n    if (typeof what == \"string\") return this.ContainsItemNamed(what);\n    const otherList = what;\n    if (otherList.size == 0 || this.size == 0) return false;\n    for (let [key] of otherList) {\n      if (!this.has(key)) return false;\n    }\n\n    return true;\n  }\n  public GreaterThan(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return this.minItem.Value > otherList.maxItem.Value;\n  }\n  public GreaterThanOrEquals(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return (\n      this.minItem.Value >= otherList.minItem.Value &&\n      this.maxItem.Value >= otherList.maxItem.Value\n    );\n  }\n  public LessThan(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return this.maxItem.Value < otherList.minItem.Value;\n  }\n  public LessThanOrEquals(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return (\n      this.maxItem.Value <= otherList.maxItem.Value &&\n      this.minItem.Value <= otherList.minItem.Value\n    );\n  }\n  public MaxAsList() {\n    if (this.Count > 0) return new InkList(this.maxItem);\n    else return new InkList();\n  }\n  public MinAsList() {\n    if (this.Count > 0) return new InkList(this.minItem);\n    else return new InkList();\n  }\n  public ListWithSubRange(minBound: any, maxBound: any) {\n    if (this.Count == 0) return new InkList();\n\n    let ordered = this.orderedItems;\n\n    let minValue = 0;\n    let maxValue = Number.MAX_SAFE_INTEGER;\n\n    if (Number.isInteger(minBound)) {\n      minValue = minBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        minValue = minBound.minItem.Value;\n    }\n\n    if (Number.isInteger(maxBound)) {\n      maxValue = maxBound;\n    } else {\n      if (maxBound instanceof InkList && maxBound.Count > 0)\n        maxValue = maxBound.maxItem.Value;\n    }\n\n    let subList = new InkList();\n    subList.SetInitialOriginNames(this.originNames);\n    for (let item of ordered) {\n      if (item.Value >= minValue && item.Value <= maxValue) {\n        subList.Add(item.Key, item.Value);\n      }\n    }\n\n    return subList;\n  }\n  public Equals(otherInkList: InkList) {\n    if (otherInkList instanceof InkList === false) return false;\n    if (otherInkList.Count != this.Count) return false;\n\n    for (let [key] of this) {\n      if (!otherInkList.has(key)) return false;\n    }\n\n    return true;\n  }\n  // GetHashCode not implemented\n  get orderedItems() {\n    // List<KeyValuePair<InkListItem, int>>\n    let ordered = new Array<KeyValuePair<InkListItem, number>>();\n\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      ordered.push({ Key: item, Value: value });\n    }\n\n    ordered.sort((x, y) => {\n      if (x.Key.originName === null) {\n        return throwNullException(\"x.Key.originName\");\n      }\n      if (y.Key.originName === null) {\n        return throwNullException(\"y.Key.originName\");\n      }\n\n      if (x.Value == y.Value) {\n        return x.Key.originName.localeCompare(y.Key.originName);\n      } else {\n        // TODO: refactor this bit into a numberCompareTo method?\n        if (x.Value < y.Value) return -1;\n        return x.Value > y.Value ? 1 : 0;\n      }\n    });\n\n    return ordered;\n  }\n  public toString() {\n    let ordered = this.orderedItems;\n\n    let sb = new StringBuilder();\n    for (let i = 0; i < ordered.length; i++) {\n      if (i > 0) sb.Append(\", \");\n\n      let item = ordered[i].Key;\n      if (item.itemName === null) return throwNullException(\"item.itemName\");\n      sb.Append(item.itemName);\n    }\n\n    return sb.toString();\n  }\n  // casting a InkList to a Number, for somereason, actually gives a number.\n  // This messes up the type detection when creating a Value from a InkList.\n  // Returning NaN here prevents that.\n  public valueOf() {\n    return NaN;\n  }\n}\n\n/**\n * In the original C# code, `InkListItem` was defined as value type, meaning\n * that two `InkListItem` would be considered equal as long as they held the\n * same values. This doesn't hold true in Javascript, as `InkListItem` is a\n * reference type (Javascript doesn't allow the creation of custom value types).\n *\n * The key equality of Map objects is based on the \"SameValueZero\" algorithm;\n * since `InkListItem` is a value type, two keys will only be considered\n * equal if they are, in fact, the same object. As we are trying to emulate\n * the original behavior as close as possible, this will lead to unforeseen\n * side effects.\n *\n * In order to have a key equality based on value semantics, we'll convert\n * `InkListItem` to a valid string representation and use this representation\n * as a key (strings are value types in Javascript). Rather than using the\n * type `string` directly, we'll alias it to `SerializedInkListItem` and use\n * this type as the key for our Map-based `InkList`.\n *\n * Reducing `InkListItem` to a JSON representation would not be bulletproof\n * in the general case, but for our needs it works well. The major downside of\n * this method is that we will have to to reconstruct the original `InkListItem`\n * every time we'll need to access its properties.\n */\nexport type SerializedInkListItem = string;\n\n/**\n * An interface inherited by `InkListItem`, defining exposed\n * properties. It's mainly used when deserializing a `InkListItem` from its\n * key (`SerializedInkListItem`)\n */\ninterface IInkListItem {\n  readonly originName: string | null;\n  readonly itemName: string | null;\n}\nexport interface KeyValuePair<K, V> {\n  Key: K;\n  Value: V;\n}\n","export class StoryException extends Error {\n  public useEndLineNumber: boolean;\n  public message: string;\n  public name: string;\n\n  constructor(message: string) {\n    super(message);\n    this.useEndLineNumber = false;\n    this.message = message;\n    this.name = \"StoryException\";\n  }\n}\n","/**\n * This interface normalize the `TryGet` behavior found in the original\n * C# project. Any `TryGet` method will return a object conforming to this\n * interface.\n *\n * The original function returns a boolean and has a second parameter called\n * item that is an `out`. Both are needed and we can't just return the item\n * because it'll always be truthy. Instead, we return an object containing\n * whether the result exists (`exists`) and the result itself (`result`).\n *\n * For instance a `TryGet` prototype would look like this:\n```\nTryGetItemWithValue(val: number, item: InkListItem): TryGetResult<InkListItem>{\n```\n *\n * On the other hand, dealing with the result can be done in the following way:\n```\nvar item = item.TryGetItemWithValue(intVal, InkListItem.Null);\nif (item.exists) {\n\tconsole.log(item.result)\n}\n```\n *\n */\nexport interface TryGetResult<T> {\n  result: T;\n  exists: boolean;\n}\n\nexport function tryGetValueFromMap<K, V>(\n  map: Map<K, V> | null,\n  key: K,\n  /* out */ value: V\n): TryGetResult<V> {\n  if (map === null) {\n    return { result: value, exists: false };\n  }\n\n  let val = map.get(key);\n\n  if (typeof val === \"undefined\") {\n    return { result: value, exists: false };\n  } else {\n    return { result: val, exists: true };\n  }\n}\n\nexport function tryParseInt(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseInt(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n\nexport function tryParseFloat(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseFloat(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class SearchResult {\n  public obj: InkObject | null = null;\n  public approximate: boolean = false;\n\n  get correctObj() {\n    return this.approximate ? null : this.obj;\n  }\n\n  get container() {\n    return this.obj instanceof Container ? this.obj : null;\n  }\n\n  public copy() {\n    let searchResult = new SearchResult();\n    searchResult.obj = this.obj;\n    searchResult.approximate = this.approximate;\n\n    return searchResult;\n  }\n}\n","import { StringValue } from \"./Value\";\nimport { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { INamedContent } from \"./INamedContent\";\nimport { InkObject } from \"./Object\";\nimport { SearchResult } from \"./SearchResult\";\nimport { Path } from \"./Path\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { asINamedContentOrNull, asOrNull, asOrThrows } from \"./TypeAssertion\";\n\nexport class Container extends InkObject implements INamedContent {\n  public name: string | null = null;\n\n  public _content: InkObject[] = [];\n  public namedContent: Map<string, INamedContent> = new Map();\n\n  public visitsShouldBeCounted: boolean = false;\n  public turnIndexShouldBeCounted: boolean = false;\n  public countingAtStartOnly: boolean = false;\n\n  public _pathToFirstLeafContent: Path | null = null;\n\n  get hasValidName() {\n    return this.name != null && this.name.length > 0;\n  }\n  get content() {\n    return this._content;\n  }\n  set content(value: InkObject[]) {\n    this.AddContent(value);\n  }\n  get namedOnlyContent() {\n    let namedOnlyContentDict: Map<string, InkObject> | null = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      let inkObject = asOrThrows(value, InkObject);\n      namedOnlyContentDict.set(key, inkObject);\n    }\n\n    for (let c of this.content) {\n      let named = asINamedContentOrNull(c);\n      if (named != null && named.hasValidName) {\n        namedOnlyContentDict.delete(named.name!);\n      }\n    }\n\n    if (namedOnlyContentDict.size == 0) namedOnlyContentDict = null;\n\n    return namedOnlyContentDict;\n  }\n  set namedOnlyContent(value: Map<string, InkObject> | null) {\n    let existingNamedOnly = this.namedOnlyContent;\n    if (existingNamedOnly != null) {\n      for (let [key] of existingNamedOnly) {\n        this.namedContent.delete(key);\n      }\n    }\n\n    if (value == null) return;\n\n    for (let [, val] of value) {\n      let named = asINamedContentOrNull(val);\n      if (named != null) this.AddToNamedContentOnly(named);\n    }\n  }\n  get countFlags(): number {\n    let flags: Container.CountFlags = 0;\n    if (this.visitsShouldBeCounted) flags |= Container.CountFlags.Visits;\n    if (this.turnIndexShouldBeCounted) flags |= Container.CountFlags.Turns;\n    if (this.countingAtStartOnly) flags |= Container.CountFlags.CountStartOnly;\n\n    if (flags == Container.CountFlags.CountStartOnly) {\n      flags = 0;\n    }\n\n    return flags;\n  }\n  set countFlags(value: number) {\n    let flag: Container.CountFlags = value;\n    if ((flag & Container.CountFlags.Visits) > 0)\n      this.visitsShouldBeCounted = true;\n    if ((flag & Container.CountFlags.Turns) > 0)\n      this.turnIndexShouldBeCounted = true;\n    if ((flag & Container.CountFlags.CountStartOnly) > 0)\n      this.countingAtStartOnly = true;\n  }\n  get pathToFirstLeafContent() {\n    if (this._pathToFirstLeafContent == null)\n      this._pathToFirstLeafContent = this.path.PathByAppendingPath(\n        this.internalPathToFirstLeafContent\n      );\n\n    return this._pathToFirstLeafContent;\n  }\n  get internalPathToFirstLeafContent() {\n    let components: Path.Component[] = [];\n    let container: Container = this;\n    while (container instanceof Container) {\n      if (container.content.length > 0) {\n        components.push(new Path.Component(0));\n        container = container.content[0] as Container;\n      }\n    }\n    return new Path(components);\n  }\n\n  public AddContent(contentObjOrList: InkObject | InkObject[]) {\n    if (contentObjOrList instanceof Array) {\n      let contentList = contentObjOrList as InkObject[];\n\n      for (let c of contentList) {\n        this.AddContent(c);\n      }\n    } else {\n      let contentObj = contentObjOrList as InkObject;\n\n      this._content.push(contentObj);\n\n      if (contentObj.parent) {\n        throw new Error(\"content is already in \" + contentObj.parent);\n      }\n\n      contentObj.parent = this;\n\n      this.TryAddNamedContent(contentObj);\n    }\n  }\n  public TryAddNamedContent(contentObj: InkObject) {\n    let namedContentObj = asINamedContentOrNull(contentObj);\n    if (namedContentObj != null && namedContentObj.hasValidName) {\n      this.AddToNamedContentOnly(namedContentObj);\n    }\n  }\n  public AddToNamedContentOnly(namedContentObj: INamedContent) {\n    Debug.AssertType(\n      namedContentObj,\n      InkObject,\n      \"Can only add Runtime.Objects to a Runtime.Container\"\n    );\n    let runtimeObj = asOrThrows(namedContentObj, InkObject);\n    runtimeObj.parent = this;\n\n    if (namedContentObj.name === null)\n      return throwNullException(\"namedContentObj.name\");\n    this.namedContent.set(namedContentObj.name!, namedContentObj);\n  }\n  public ContentAtPath(\n    path: Path,\n    partialPathStart: number = 0,\n    partialPathLength: number = -1\n  ) {\n    if (partialPathLength == -1) partialPathLength = path.length;\n\n    let result = new SearchResult();\n    result.approximate = false;\n\n    let currentContainer: Container | null = this;\n    let currentObj: InkObject = this;\n\n    for (let i = partialPathStart; i < partialPathLength; ++i) {\n      let comp = path.GetComponent(i);\n      if (currentContainer == null) {\n        result.approximate = true;\n        break;\n      }\n\n      let foundObj: InkObject | null =\n        currentContainer.ContentWithPathComponent(comp);\n\n      if (foundObj == null) {\n        result.approximate = true;\n        break;\n      }\n\n      currentObj = foundObj;\n      currentContainer = asOrNull(foundObj, Container);\n    }\n\n    result.obj = currentObj;\n\n    return result;\n  }\n  public InsertContent(contentObj: InkObject, index: number) {\n    this.content.splice(index, 0, contentObj);\n\n    if (contentObj.parent) {\n      throw new Error(\"content is already in \" + contentObj.parent);\n    }\n\n    contentObj.parent = this;\n\n    this.TryAddNamedContent(contentObj);\n  }\n  public AddContentsOfContainer(otherContainer: Container) {\n    this.content.push(...otherContainer.content);\n\n    for (let obj of otherContainer.content) {\n      obj.parent = this;\n      this.TryAddNamedContent(obj);\n    }\n  }\n  public ContentWithPathComponent(component: Path.Component): InkObject | null {\n    if (component.isIndex) {\n      if (component.index >= 0 && component.index < this.content.length) {\n        return this.content[component.index];\n      } else {\n        return null;\n      }\n    } else if (component.isParent) {\n      return this.parent;\n    } else {\n      if (component.name === null) {\n        return throwNullException(\"component.name\");\n      }\n      let foundContent = tryGetValueFromMap(\n        this.namedContent,\n        component.name,\n        null\n      );\n      if (foundContent.exists) {\n        return asOrThrows(foundContent.result, InkObject);\n      } else {\n        return null;\n      }\n    }\n  }\n  public BuildStringOfHierarchy(): string;\n  public BuildStringOfHierarchy(\n    sb: StringBuilder,\n    indentation: number,\n    pointedObj: InkObject | null\n  ): string;\n  public BuildStringOfHierarchy() {\n    let sb: StringBuilder;\n    if (arguments.length == 0) {\n      sb = new StringBuilder();\n      this.BuildStringOfHierarchy(sb, 0, null);\n      return sb.toString();\n    }\n\n    sb = arguments[0] as StringBuilder;\n    let indentation = arguments[1] as number;\n    let pointedObj = arguments[2] as InkObject | null;\n\n    function appendIndentation() {\n      const spacesPerIndent = 4; // Truly const in the original code\n      for (let i = 0; i < spacesPerIndent * indentation; ++i) {\n        sb.Append(\" \");\n      }\n    }\n\n    appendIndentation();\n    sb.Append(\"[\");\n\n    if (this.hasValidName) {\n      sb.AppendFormat(\" ({0})\", this.name);\n    }\n\n    if (this == pointedObj) {\n      sb.Append(\"  <---\");\n    }\n\n    sb.AppendLine();\n\n    indentation++;\n\n    for (let i = 0; i < this.content.length; ++i) {\n      let obj = this.content[i];\n\n      if (obj instanceof Container) {\n        let container = obj as Container;\n\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n      } else {\n        appendIndentation();\n        if (obj instanceof StringValue) {\n          sb.Append('\"');\n          sb.Append(obj.toString().replace(\"\\n\", \"\\\\n\"));\n          sb.Append('\"');\n        } else {\n          sb.Append(obj.toString());\n        }\n      }\n\n      if (i != this.content.length - 1) {\n        sb.Append(\",\");\n      }\n\n      if (!(obj instanceof Container) && obj == pointedObj) {\n        sb.Append(\"  <---\");\n      }\n\n      sb.AppendLine();\n    }\n\n    let onlyNamed: Map<string, INamedContent> = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      if (this.content.indexOf(asOrThrows(value, InkObject)) >= 0) {\n        continue;\n      } else {\n        onlyNamed.set(key, value);\n      }\n    }\n\n    if (onlyNamed.size > 0) {\n      appendIndentation();\n      sb.AppendLine(\"-- named: --\");\n\n      for (let [, value] of onlyNamed) {\n        Debug.AssertType(\n          value,\n          Container,\n          \"Can only print out named Containers\"\n        );\n        let container = value as Container;\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n        sb.AppendLine();\n      }\n    }\n\n    indentation--;\n\n    appendIndentation();\n    sb.Append(\"]\");\n  }\n}\n\nexport namespace Container {\n  export enum CountFlags {\n    Visits = 1,\n    Turns = 2,\n    CountStartOnly = 4,\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class Glue extends InkObject {\n  public toString() {\n    return \"Glue\";\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class ControlCommand extends InkObject {\n  private _commandType: ControlCommand.CommandType;\n\n  get commandType(): ControlCommand.CommandType {\n    return this._commandType;\n  }\n\n  constructor(\n    commandType: ControlCommand.CommandType = ControlCommand.CommandType.NotSet\n  ) {\n    super();\n    this._commandType = commandType;\n  }\n\n  public Copy() {\n    return new ControlCommand(this.commandType);\n  }\n  public static EvalStart() {\n    return new ControlCommand(ControlCommand.CommandType.EvalStart);\n  }\n  public static EvalOutput() {\n    return new ControlCommand(ControlCommand.CommandType.EvalOutput);\n  }\n  public static EvalEnd() {\n    return new ControlCommand(ControlCommand.CommandType.EvalEnd);\n  }\n  public static Duplicate() {\n    return new ControlCommand(ControlCommand.CommandType.Duplicate);\n  }\n  public static PopEvaluatedValue() {\n    return new ControlCommand(ControlCommand.CommandType.PopEvaluatedValue);\n  }\n  public static PopFunction() {\n    return new ControlCommand(ControlCommand.CommandType.PopFunction);\n  }\n  public static PopTunnel() {\n    return new ControlCommand(ControlCommand.CommandType.PopTunnel);\n  }\n  public static BeginString() {\n    return new ControlCommand(ControlCommand.CommandType.BeginString);\n  }\n  public static EndString() {\n    return new ControlCommand(ControlCommand.CommandType.EndString);\n  }\n  public static NoOp() {\n    return new ControlCommand(ControlCommand.CommandType.NoOp);\n  }\n  public static ChoiceCount() {\n    return new ControlCommand(ControlCommand.CommandType.ChoiceCount);\n  }\n  public static Turns() {\n    return new ControlCommand(ControlCommand.CommandType.Turns);\n  }\n  public static TurnsSince() {\n    return new ControlCommand(ControlCommand.CommandType.TurnsSince);\n  }\n  public static ReadCount() {\n    return new ControlCommand(ControlCommand.CommandType.ReadCount);\n  }\n  public static Random() {\n    return new ControlCommand(ControlCommand.CommandType.Random);\n  }\n  public static SeedRandom() {\n    return new ControlCommand(ControlCommand.CommandType.SeedRandom);\n  }\n  public static VisitIndex() {\n    return new ControlCommand(ControlCommand.CommandType.VisitIndex);\n  }\n  public static SequenceShuffleIndex() {\n    return new ControlCommand(ControlCommand.CommandType.SequenceShuffleIndex);\n  }\n  public static StartThread() {\n    return new ControlCommand(ControlCommand.CommandType.StartThread);\n  }\n  public static Done() {\n    return new ControlCommand(ControlCommand.CommandType.Done);\n  }\n  public static End() {\n    return new ControlCommand(ControlCommand.CommandType.End);\n  }\n  public static ListFromInt() {\n    return new ControlCommand(ControlCommand.CommandType.ListFromInt);\n  }\n  public static ListRange() {\n    return new ControlCommand(ControlCommand.CommandType.ListRange);\n  }\n  public static ListRandom() {\n    return new ControlCommand(ControlCommand.CommandType.ListRandom);\n  }\n  public static BeginTag() {\n    return new ControlCommand(ControlCommand.CommandType.BeginTag);\n  }\n  public static EndTag() {\n    return new ControlCommand(ControlCommand.CommandType.EndTag);\n  }\n  public toString() {\n    return this.commandType.toString();\n  }\n}\n\nexport namespace ControlCommand {\n  export enum CommandType {\n    NotSet = -1,\n    EvalStart, // 0\n    EvalOutput, // 1\n    EvalEnd, // 2\n    Duplicate, // 3\n    PopEvaluatedValue, // 4\n    PopFunction, // 5\n    PopTunnel, // 6\n    BeginString, // 7\n    EndString, // 8\n    NoOp, // 9\n    ChoiceCount, // 10\n    Turns, // 11\n    TurnsSince, // 12\n    ReadCount, // 13\n    Random, // 14\n    SeedRandom, // 15\n    VisitIndex, // 16\n    SequenceShuffleIndex, // 17\n    StartThread, // 18\n    Done, // 19\n    End, // 20\n    ListFromInt, // 21\n    ListRange, // 22\n    ListRandom, // 23\n    BeginTag, // 24\n    EndTag, // 25\n\n    TOTAL_VALUES,\n  }\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\n\nexport class Pointer {\n  public container: Container | null = null;\n  public index: number = -1;\n\n  constructor();\n  constructor(container: Container | null, index: number);\n  constructor() {\n    if (arguments.length === 2) {\n      this.container = arguments[0];\n      this.index = arguments[1];\n    }\n  }\n\n  public Resolve(): InkObject | null {\n    if (this.index < 0) return this.container;\n    if (this.container == null) return null;\n    if (this.container.content.length == 0) return this.container;\n    if (this.index >= this.container.content.length) return null;\n\n    return this.container.content[this.index];\n  }\n\n  get isNull(): boolean {\n    return this.container == null;\n  }\n\n  get path(): Path | null {\n    if (this.isNull) return null;\n\n    if (this.index >= 0)\n      return this.container!.path.PathByAppendingComponent(\n        new Path.Component(this.index)\n      );\n    else return this.container!.path;\n  }\n\n  public toString(): string {\n    if (!this.container) return \"Ink Pointer (null)\";\n\n    return (\n      \"Ink Pointer -> \" +\n      this.container.path.toString() +\n      \" -- index \" +\n      this.index\n    );\n  }\n\n  // This method does not exist in the original C# code, but is here to maintain the\n  // value semantics of Pointer.\n  public copy(): Pointer {\n    return new Pointer(this.container, this.index);\n  }\n\n  public static StartOf(container: Container | null): Pointer {\n    return new Pointer(container, 0);\n  }\n\n  public static get Null(): Pointer {\n    return new Pointer(null, -1);\n  }\n}\n","import { Path } from \"./Path\";\nimport { PushPopType } from \"./PushPop\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { InkObject } from \"./Object\";\nimport { Pointer } from \"./Pointer\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Divert extends InkObject {\n  get targetPath() {\n    if (this._targetPath != null && this._targetPath.isRelative) {\n      let targetObj = this.targetPointer.Resolve();\n      if (targetObj) {\n        this._targetPath = targetObj.path;\n      }\n    }\n\n    return this._targetPath;\n  }\n  set targetPath(value: Path | null) {\n    this._targetPath = value;\n    this._targetPointer = Pointer.Null;\n  }\n\n  public _targetPath: Path | null = null;\n\n  get targetPointer() {\n    if (this._targetPointer.isNull) {\n      let targetObj = this.ResolvePath(this._targetPath).obj;\n\n      if (this._targetPath === null)\n        return throwNullException(\"this._targetPath\");\n      if (this._targetPath.lastComponent === null)\n        return throwNullException(\"this._targetPath.lastComponent\");\n\n      if (this._targetPath.lastComponent.isIndex) {\n        if (targetObj === null) return throwNullException(\"targetObj\");\n        this._targetPointer.container =\n          targetObj.parent instanceof Container ? targetObj.parent : null;\n        this._targetPointer.index = this._targetPath.lastComponent.index;\n      } else {\n        this._targetPointer = Pointer.StartOf(\n          targetObj instanceof Container ? targetObj : null\n        );\n      }\n    }\n\n    return this._targetPointer.copy();\n  }\n\n  public _targetPointer: Pointer = Pointer.Null;\n\n  get targetPathString() {\n    if (this.targetPath == null) return null;\n\n    return this.CompactPathString(this.targetPath);\n  }\n  set targetPathString(value: string | null) {\n    if (value == null) {\n      this.targetPath = null;\n    } else {\n      this.targetPath = new Path(value);\n    }\n  }\n\n  public variableDivertName: string | null = null;\n  get hasVariableTarget() {\n    return this.variableDivertName != null;\n  }\n\n  public pushesToStack: boolean = false;\n  public stackPushType: PushPopType = 0;\n\n  public isExternal: boolean = false;\n  public externalArgs: number = 0;\n\n  public isConditional: boolean = false;\n\n  constructor(stackPushType?: PushPopType) {\n    super();\n    this.pushesToStack = false;\n\n    if (typeof stackPushType !== \"undefined\") {\n      this.pushesToStack = true;\n      this.stackPushType = stackPushType;\n    }\n  }\n\n  public Equals(obj: Divert | null) {\n    let otherDivert = obj;\n    if (otherDivert instanceof Divert) {\n      if (this.hasVariableTarget == otherDivert.hasVariableTarget) {\n        if (this.hasVariableTarget) {\n          return this.variableDivertName == otherDivert.variableDivertName;\n        } else {\n          if (this.targetPath === null)\n            return throwNullException(\"this.targetPath\");\n          return this.targetPath.Equals(otherDivert.targetPath);\n        }\n      }\n    }\n    return false;\n  }\n\n  public toString() {\n    if (this.hasVariableTarget) {\n      return \"Divert(variable: \" + this.variableDivertName + \")\";\n    } else if (this.targetPath == null) {\n      return \"Divert(null)\";\n    } else {\n      let sb = new StringBuilder();\n\n      let targetStr = this.targetPath.toString();\n      // int? targetLineNum = DebugLineNumberOfPath (targetPath);\n      let targetLineNum = null;\n      if (targetLineNum != null) {\n        targetStr = \"line \" + targetLineNum;\n      }\n\n      sb.Append(\"Divert\");\n\n      if (this.isConditional) sb.Append(\"?\");\n\n      if (this.pushesToStack) {\n        if (this.stackPushType == PushPopType.Function) {\n          sb.Append(\" function\");\n        } else {\n          sb.Append(\" tunnel\");\n        }\n      }\n\n      sb.Append(\" -> \");\n      sb.Append(this.targetPathString);\n\n      sb.Append(\" (\");\n      sb.Append(targetStr);\n      sb.Append(\")\");\n\n      return sb.toString();\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ChoicePoint extends InkObject {\n  public _pathOnChoice: Path | null = null;\n  public hasCondition: boolean = false;\n  public hasStartContent: boolean = false;\n  public hasChoiceOnlyContent: boolean = false;\n  public isInvisibleDefault: boolean = false;\n  public onceOnly: boolean = true;\n\n  constructor(onceOnly: boolean = true) {\n    super();\n    this.onceOnly = onceOnly;\n  }\n  get pathOnChoice(): Path | null {\n    if (this._pathOnChoice != null && this._pathOnChoice.isRelative) {\n      let choiceTargetObj = this.choiceTarget;\n      if (choiceTargetObj) {\n        this._pathOnChoice = choiceTargetObj.path;\n      }\n    }\n    return this._pathOnChoice;\n  }\n  set pathOnChoice(value: Path | null) {\n    this._pathOnChoice = value;\n  }\n  get choiceTarget(): Container | null {\n    if (this._pathOnChoice === null)\n      return throwNullException(\"ChoicePoint._pathOnChoice\");\n    return this.ResolvePath(this._pathOnChoice).container;\n  }\n  get pathStringOnChoice(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    return this.CompactPathString(this.pathOnChoice);\n  }\n  set pathStringOnChoice(value: string) {\n    this.pathOnChoice = new Path(value);\n  }\n  get flags(): number {\n    let flags = 0;\n    if (this.hasCondition) flags |= 1;\n    if (this.hasStartContent) flags |= 2;\n    if (this.hasChoiceOnlyContent) flags |= 4;\n    if (this.isInvisibleDefault) flags |= 8;\n    if (this.onceOnly) flags |= 16;\n    return flags;\n  }\n  set flags(value: number) {\n    this.hasCondition = (value & 1) > 0;\n    this.hasStartContent = (value & 2) > 0;\n    this.hasChoiceOnlyContent = (value & 4) > 0;\n    this.isInvisibleDefault = (value & 8) > 0;\n    this.onceOnly = (value & 16) > 0;\n  }\n  public toString(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    // int? targetLineNum = DebugLineNumberOfPath (pathOnChoice);\n    let targetLineNum = null;\n    let targetString = this.pathOnChoice.toString();\n\n    if (targetLineNum != null) {\n      targetString = \" line \" + targetLineNum + \"(\" + targetString + \")\";\n    }\n\n    return \"Choice: -> \" + targetString;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\n\nexport class VariableReference extends InkObject {\n  public name: string | null;\n  public pathForCount: Path | null = null;\n\n  get containerForCount() {\n    if (this.pathForCount === null) return null;\n    return this.ResolvePath(this.pathForCount).container;\n  }\n  get pathStringForCount() {\n    if (this.pathForCount === null) return null;\n\n    return this.CompactPathString(this.pathForCount);\n  }\n  set pathStringForCount(value: string | null) {\n    if (value === null) this.pathForCount = null;\n    else this.pathForCount = new Path(value);\n  }\n\n  constructor(name: string | null = null) {\n    super();\n    this.name = name;\n  }\n\n  public toString() {\n    if (this.name != null) {\n      return \"var(\" + this.name + \")\";\n    } else {\n      let pathStr = this.pathStringForCount;\n      return \"read_count(\" + pathStr + \")\";\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class VariableAssignment extends InkObject {\n  public readonly variableName: string | null;\n  public readonly isNewDeclaration: boolean;\n  public isGlobal: boolean;\n\n  constructor(variableName: string | null, isNewDeclaration: boolean) {\n    super();\n    this.variableName = variableName || null;\n    this.isNewDeclaration = !!isNewDeclaration;\n    this.isGlobal = false;\n  }\n\n  public toString(): string {\n    return \"VarAssign to \" + this.variableName;\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class Void extends InkObject {}\n","import { Value, ValueType, IntValue, ListValue, BoolValue } from \"./Value\";\nimport { StoryException } from \"./StoryException\";\nimport { Void } from \"./Void\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull, asOrThrows, asBooleanOrThrows } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\n\ntype BinaryOp<T> = (left: T, right: T) => any;\ntype UnaryOp<T> = (val: T) => any;\n\nexport class NativeFunctionCall extends InkObject {\n  public static readonly Add: string = \"+\";\n  public static readonly Subtract: string = \"-\";\n  public static readonly Divide: string = \"/\";\n  public static readonly Multiply: string = \"*\";\n  public static readonly Mod: string = \"%\";\n  public static readonly Negate: string = \"_\";\n  public static readonly Equal: string = \"==\";\n  public static readonly Greater: string = \">\";\n  public static readonly Less: string = \"<\";\n  public static readonly GreaterThanOrEquals: string = \">=\";\n  public static readonly LessThanOrEquals: string = \"<=\";\n  public static readonly NotEquals: string = \"!=\";\n  public static readonly Not: string = \"!\";\n  public static readonly And: string = \"&&\";\n  public static readonly Or: string = \"||\";\n  public static readonly Min: string = \"MIN\";\n  public static readonly Max: string = \"MAX\";\n  public static readonly Pow: string = \"POW\";\n  public static readonly Floor: string = \"FLOOR\";\n  public static readonly Ceiling: string = \"CEILING\";\n  public static readonly Int: string = \"INT\";\n  public static readonly Float: string = \"FLOAT\";\n  public static readonly Has: string = \"?\";\n  public static readonly Hasnt: string = \"!?\";\n  public static readonly Intersect: string = \"^\";\n  public static readonly ListMin: string = \"LIST_MIN\";\n  public static readonly ListMax: string = \"LIST_MAX\";\n  public static readonly All: string = \"LIST_ALL\";\n  public static readonly Count: string = \"LIST_COUNT\";\n  public static readonly ValueOfList: string = \"LIST_VALUE\";\n  public static readonly Invert: string = \"LIST_INVERT\";\n\n  public static CallWithName(functionName: string) {\n    return new NativeFunctionCall(functionName);\n  }\n\n  public static CallExistsWithName(functionName: string) {\n    this.GenerateNativeFunctionsIfNecessary();\n    return this._nativeFunctions!.get(functionName);\n  }\n\n  get name() {\n    if (this._name === null)\n      return throwNullException(\"NativeFunctionCall._name\");\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n    if (!this._isPrototype) {\n      if (NativeFunctionCall._nativeFunctions === null)\n        throwNullException(\"NativeFunctionCall._nativeFunctions\");\n      else\n        this._prototype =\n          NativeFunctionCall._nativeFunctions.get(this._name) || null;\n    }\n  }\n  public _name: string | null = null;\n\n  get numberOfParameters() {\n    if (this._prototype) {\n      return this._prototype.numberOfParameters;\n    } else {\n      return this._numberOfParameters;\n    }\n  }\n  set numberOfParameters(value: number) {\n    this._numberOfParameters = value;\n  }\n  public _numberOfParameters: number = 0;\n\n  public Call(parameters: InkObject[]): InkObject | null {\n    if (this._prototype) {\n      return this._prototype.Call(parameters);\n    }\n\n    if (this.numberOfParameters != parameters.length) {\n      throw new Error(\"Unexpected number of parameters\");\n    }\n\n    let hasList = false;\n    for (let p of parameters) {\n      if (p instanceof Void)\n        throw new StoryException(\n          'Attempting to perform operation on a void value. Did you forget to \"return\" a value from a function you called here?'\n        );\n      if (p instanceof ListValue) hasList = true;\n    }\n\n    if (parameters.length == 2 && hasList) {\n      return this.CallBinaryListOperation(parameters);\n    }\n\n    let coercedParams = this.CoerceValuesToSingleType(parameters);\n    let coercedType = coercedParams[0].valueType;\n\n    if (coercedType == ValueType.Int) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.Float) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.String) {\n      return this.CallType<string>(coercedParams);\n    } else if (coercedType == ValueType.DivertTarget) {\n      return this.CallType<Path>(coercedParams);\n    } else if (coercedType == ValueType.List) {\n      return this.CallType<InkList>(coercedParams);\n    }\n\n    return null;\n  }\n\n  public CallType<T extends { toString: () => string }>(\n    parametersOfSingleType: Array<Value<T>>\n  ) {\n    let param1 = asOrThrows(parametersOfSingleType[0], Value);\n    let valType = param1.valueType;\n\n    let val1 = param1 as Value<T>;\n\n    let paramCount = parametersOfSingleType.length;\n\n    if (paramCount == 2 || paramCount == 1) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let opForTypeObj = this._operationFuncs.get(valType);\n      if (!opForTypeObj) {\n        const key = ValueType[valType];\n        throw new StoryException(\n          \"Cannot perform operation \" + this.name + \" on \" + key\n        );\n      }\n\n      if (paramCount == 2) {\n        let param2 = asOrThrows(parametersOfSingleType[1], Value);\n\n        let val2 = param2 as Value<T>;\n\n        let opForType = opForTypeObj as BinaryOp<T>;\n\n        if (val1.value === null || val2.value === null)\n          return throwNullException(\"NativeFunctionCall.Call BinaryOp values\");\n        let resultVal = opForType(val1.value, val2.value);\n\n        return Value.Create(resultVal);\n      } else {\n        let opForType = opForTypeObj as UnaryOp<T>;\n\n        if (val1.value === null)\n          return throwNullException(\"NativeFunctionCall.Call UnaryOp value\");\n        let resultVal = opForType(val1.value);\n\n        // This code is different from upstream. Since JavaScript treats\n        // integers and floats as the same numbers, it's impossible\n        // to force an number to be either an integer or a float.\n        //\n        // It can be useful to force a specific number type\n        // (especially for divisions), so the result of INT() & FLOAT()\n        // is coerced to the the proper value type.\n        //\n        // Note that we also force all other unary operation to\n        // return the same value type, although this is only\n        // meaningful for numbers. See `Value.Create`.\n        if (this.name === NativeFunctionCall.Int) {\n          return Value.Create(resultVal, ValueType.Int);\n        } else if (this.name === NativeFunctionCall.Float) {\n          return Value.Create(resultVal, ValueType.Float);\n        } else {\n          return Value.Create(resultVal, param1.valueType);\n        }\n      }\n    } else {\n      throw new Error(\n        \"Unexpected number of parameters to NativeFunctionCall: \" +\n          parametersOfSingleType.length\n      );\n    }\n  }\n\n  public CallBinaryListOperation(parameters: InkObject[]) {\n    if (\n      (this.name == \"+\" || this.name == \"-\") &&\n      parameters[0] instanceof ListValue &&\n      parameters[1] instanceof IntValue\n    )\n      return this.CallListIncrementOperation(parameters);\n\n    let v1 = asOrThrows(parameters[0], Value);\n    let v2 = asOrThrows(parameters[1], Value);\n\n    if (\n      (this.name == \"&&\" || this.name == \"||\") &&\n      (v1.valueType != ValueType.List || v2.valueType != ValueType.List)\n    ) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let op = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n      if (op === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallBinaryListOperation op\"\n        );\n      let result = asBooleanOrThrows(\n        op(v1.isTruthy ? 1 : 0, v2.isTruthy ? 1 : 0)\n      );\n      return new BoolValue(result);\n    }\n\n    if (v1.valueType == ValueType.List && v2.valueType == ValueType.List)\n      return this.CallType<InkList>([v1, v2]);\n\n    throw new StoryException(\n      \"Can not call use \" +\n        this.name +\n        \" operation on \" +\n        ValueType[v1.valueType] +\n        \" and \" +\n        ValueType[v2.valueType]\n    );\n  }\n\n  public CallListIncrementOperation(listIntParams: InkObject[]) {\n    let listVal = asOrThrows(listIntParams[0], ListValue);\n    let intVal = asOrThrows(listIntParams[1], IntValue);\n\n    let resultInkList = new InkList();\n\n    if (listVal.value === null)\n      return throwNullException(\n        \"NativeFunctionCall.CallListIncrementOperation listVal.value\"\n      );\n    for (let [listItemKey, listItemValue] of listVal.value) {\n      let listItem = InkListItem.fromSerializedKey(listItemKey);\n\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let intOp = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n\n      if (intVal.value === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation intVal.value\"\n        );\n      let targetInt = intOp(listItemValue, intVal.value);\n\n      let itemOrigin = null;\n      if (listVal.value.origins === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation listVal.value.origins\"\n        );\n      for (let origin of listVal.value.origins) {\n        if (origin.name == listItem.originName) {\n          itemOrigin = origin;\n          break;\n        }\n      }\n      if (itemOrigin != null) {\n        let incrementedItem = itemOrigin.TryGetItemWithValue(\n          targetInt,\n          InkListItem.Null\n        );\n        if (incrementedItem.exists)\n          resultInkList.Add(incrementedItem.result, targetInt);\n      }\n    }\n\n    return new ListValue(resultInkList);\n  }\n\n  public CoerceValuesToSingleType(parametersIn: InkObject[]) {\n    let valType = ValueType.Int;\n\n    let specialCaseList: null | ListValue = null;\n\n    for (let obj of parametersIn) {\n      let val = asOrThrows(obj, Value);\n      if (val.valueType > valType) {\n        valType = val.valueType;\n      }\n\n      if (val.valueType == ValueType.List) {\n        specialCaseList = asOrNull(val, ListValue);\n      }\n    }\n\n    let parametersOut = [];\n\n    if (ValueType[valType] == ValueType[ValueType.List]) {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        if (val.valueType == ValueType.List) {\n          parametersOut.push(val);\n        } else if (val.valueType == ValueType.Int) {\n          let intVal = parseInt(val.valueObject);\n\n          specialCaseList = asOrThrows(specialCaseList, ListValue);\n          if (specialCaseList.value === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType specialCaseList.value\"\n            );\n          let list = specialCaseList.value.originOfMaxItem;\n\n          if (list === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType list\"\n            );\n          let item = list.TryGetItemWithValue(intVal, InkListItem.Null);\n          if (item.exists) {\n            let castedValue = new ListValue(item.result, intVal);\n            parametersOut.push(castedValue);\n          } else\n            throw new StoryException(\n              \"Could not find List item with the value \" +\n                intVal +\n                \" in \" +\n                list.name\n            );\n        } else {\n          const key = ValueType[val.valueType];\n          throw new StoryException(\n            \"Cannot mix Lists and \" + key + \" values in this operation\"\n          );\n        }\n      }\n    } else {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        let castedValue = val.Cast(valType);\n        parametersOut.push(castedValue);\n      }\n    }\n\n    return parametersOut;\n  }\n\n  constructor(name: string);\n  constructor(name: string, numberOfParameters: number);\n  constructor();\n  constructor() {\n    super();\n\n    if (arguments.length === 0) {\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n    } else if (arguments.length === 1) {\n      let name = arguments[0];\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n      this.name = name;\n    } else if (arguments.length === 2) {\n      let name = arguments[0];\n      let numberOfParameters = arguments[1];\n\n      this._isPrototype = true;\n      this.name = name;\n      this.numberOfParameters = numberOfParameters;\n    }\n  }\n\n  public static Identity<T>(t: T): any {\n    return t;\n  }\n\n  public static GenerateNativeFunctionsIfNecessary() {\n    if (this._nativeFunctions == null) {\n      this._nativeFunctions = new Map();\n\n      // Int operations\n      this.AddIntBinaryOp(this.Add, (x, y) => x + y);\n      this.AddIntBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddIntBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddIntBinaryOp(this.Divide, (x, y) => Math.floor(x / y));\n      this.AddIntBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddIntUnaryOp(this.Negate, (x) => -x);\n\n      this.AddIntBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddIntBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddIntBinaryOp(this.Less, (x, y) => x < y);\n      this.AddIntBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddIntBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddIntBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddIntUnaryOp(this.Not, (x) => x == 0);\n\n      this.AddIntBinaryOp(this.And, (x, y) => x != 0 && y != 0);\n      this.AddIntBinaryOp(this.Or, (x, y) => x != 0 || y != 0);\n\n      this.AddIntBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddIntBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddIntBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddIntUnaryOp(this.Floor, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Ceiling, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Int, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Float, (x) => x);\n\n      // Float operations\n      this.AddFloatBinaryOp(this.Add, (x, y) => x + y);\n      this.AddFloatBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddFloatBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddFloatBinaryOp(this.Divide, (x, y) => x / y);\n      this.AddFloatBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddFloatUnaryOp(this.Negate, (x) => -x);\n\n      this.AddFloatBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddFloatBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddFloatBinaryOp(this.Less, (x, y) => x < y);\n      this.AddFloatBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddFloatBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddFloatBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddFloatUnaryOp(this.Not, (x) => x == 0.0);\n\n      this.AddFloatBinaryOp(this.And, (x, y) => x != 0.0 && y != 0.0);\n      this.AddFloatBinaryOp(this.Or, (x, y) => x != 0.0 || y != 0.0);\n\n      this.AddFloatBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddFloatBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddFloatBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddFloatUnaryOp(this.Floor, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Ceiling, (x) => Math.ceil(x));\n      this.AddFloatUnaryOp(this.Int, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Float, NativeFunctionCall.Identity);\n\n      // String operations\n      this.AddStringBinaryOp(this.Add, (x, y) => x + y); // concat\n      this.AddStringBinaryOp(this.Equal, (x, y) => x === y);\n      this.AddStringBinaryOp(this.NotEquals, (x, y) => !(x === y));\n      this.AddStringBinaryOp(this.Has, (x, y) => x.includes(y));\n      this.AddStringBinaryOp(this.Hasnt, (x, y) => !x.includes(y));\n\n      this.AddListBinaryOp(this.Add, (x, y) => x.Union(y));\n      this.AddListBinaryOp(this.Subtract, (x, y) => x.Without(y));\n      this.AddListBinaryOp(this.Has, (x, y) => x.Contains(y));\n      this.AddListBinaryOp(this.Hasnt, (x, y) => !x.Contains(y));\n      this.AddListBinaryOp(this.Intersect, (x, y) => x.Intersect(y));\n\n      this.AddListBinaryOp(this.Equal, (x, y) => x.Equals(y));\n      this.AddListBinaryOp(this.Greater, (x, y) => x.GreaterThan(y));\n      this.AddListBinaryOp(this.Less, (x, y) => x.LessThan(y));\n      this.AddListBinaryOp(this.GreaterThanOrEquals, (x, y) =>\n        x.GreaterThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.LessThanOrEquals, (x, y) =>\n        x.LessThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.NotEquals, (x, y) => !x.Equals(y));\n\n      this.AddListBinaryOp(this.And, (x, y) => x.Count > 0 && y.Count > 0);\n      this.AddListBinaryOp(this.Or, (x, y) => x.Count > 0 || y.Count > 0);\n\n      this.AddListUnaryOp(this.Not, (x) => (x.Count == 0 ? 1 : 0));\n\n      this.AddListUnaryOp(this.Invert, (x) => x.inverse);\n      this.AddListUnaryOp(this.All, (x) => x.all);\n      this.AddListUnaryOp(this.ListMin, (x) => x.MinAsList());\n      this.AddListUnaryOp(this.ListMax, (x) => x.MaxAsList());\n      this.AddListUnaryOp(this.Count, (x) => x.Count);\n      this.AddListUnaryOp(this.ValueOfList, (x) => x.maxItem.Value);\n\n      let divertTargetsEqual = (d1: Path, d2: Path) => d1.Equals(d2);\n      let divertTargetsNotEqual = (d1: Path, d2: Path) => !d1.Equals(d2);\n      this.AddOpToNativeFunc(\n        this.Equal,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsEqual\n      );\n      this.AddOpToNativeFunc(\n        this.NotEquals,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsNotEqual\n      );\n    }\n  }\n\n  public AddOpFuncForType(\n    valType: ValueType,\n    op: UnaryOp<number | InkList> | BinaryOp<number | string | InkList | Path>\n  ): void {\n    if (this._operationFuncs == null) {\n      this._operationFuncs = new Map();\n    }\n\n    this._operationFuncs.set(valType, op);\n  }\n\n  public static AddOpToNativeFunc(\n    name: string,\n    args: number,\n    valType: ValueType,\n    op: UnaryOp<any> | BinaryOp<any>\n  ): void {\n    if (this._nativeFunctions === null)\n      return throwNullException(\"NativeFunctionCall._nativeFunctions\");\n    let nativeFunc = this._nativeFunctions.get(name);\n    if (!nativeFunc) {\n      nativeFunc = new NativeFunctionCall(name, args);\n      this._nativeFunctions.set(name, nativeFunc);\n    }\n\n    nativeFunc.AddOpFuncForType(valType, op);\n  }\n\n  public static AddIntBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Int, op);\n  }\n  public static AddIntUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Int, op);\n  }\n\n  public static AddFloatBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Float, op);\n  }\n  public static AddFloatUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Float, op);\n  }\n\n  public static AddStringBinaryOp(name: string, op: BinaryOp<string>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.String, op);\n  }\n\n  public static AddListBinaryOp(name: string, op: BinaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.List, op);\n  }\n  public static AddListUnaryOp(name: string, op: UnaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.List, op);\n  }\n\n  public toString() {\n    return 'Native \"' + this.name + '\"';\n  }\n\n  public _prototype: NativeFunctionCall | null = null;\n  public _isPrototype: boolean = false;\n  public _operationFuncs: Map<ValueType, BinaryOp<any> | UnaryOp<any>> | null =\n    null;\n  public static _nativeFunctions: Map<string, NativeFunctionCall> | null = null;\n}\n","import { InkObject } from \"./Object\";\n\n// New version of tags is dynamic - it constructs the tags\n// at runtime based on BeginTag and EndTag control commands.\n// Plain text that's in the output stream is turned into tags\n// when you do story.currentTags.\n// The only place this is used is when flattening tags down\n// to string in advance, during dynamic string generation if\n// there's a tag embedded in it. See how ControlCommand.EndString\n// is implemented in Story.cs for more details + comment\nexport class Tag extends InkObject {\n  public readonly text: string;\n\n  constructor(tagText: string) {\n    super();\n    this.text = tagText.toString() || \"\";\n  }\n\n  public toString(): string {\n    return \"# \" + this.text;\n  }\n}\n","import { Path } from \"./Path\";\nimport { CallStack } from \"./CallStack\";\nimport { throwNullException } from \"./NullException\";\nimport { InkObject } from \"./Object\";\n\nexport class Choice extends InkObject {\n  public text: string = \"\";\n  public index: number = 0;\n  public threadAtGeneration: CallStack.Thread | null = null;\n  public sourcePath: string = \"\";\n  public targetPath: Path | null = null;\n  public isInvisibleDefault: boolean = false;\n  public tags: string[] | null = null;\n  public originalThreadIndex: number = 0;\n\n  get pathStringOnChoice(): string {\n    if (this.targetPath === null)\n      return throwNullException(\"Choice.targetPath\");\n    return this.targetPath.toString();\n  }\n  set pathStringOnChoice(value: string) {\n    this.targetPath = new Path(value);\n  }\n}\n","import { InkListItem, SerializedInkListItem } from \"./InkList\";\nimport { TryGetResult } from \"./TryGetResult\";\n\nexport class ListDefinition {\n  public _name: string;\n  public _items: Map<SerializedInkListItem, number> | null;\n  public _itemNameToValues: Map<string, number>;\n\n  constructor(name: string, items: Map<string, number> | null) {\n    this._name = name || \"\";\n    this._items = null;\n    this._itemNameToValues = items || new Map();\n  }\n  get name() {\n    return this._name;\n  }\n  get items() {\n    if (this._items == null) {\n      this._items = new Map();\n      for (let [key, value] of this._itemNameToValues) {\n        let item = new InkListItem(this.name, key);\n        this._items.set(item.serialized(), value);\n      }\n    }\n\n    return this._items;\n  }\n\n  public ValueForItem(item: InkListItem) {\n    if (!item.itemName) return 0;\n\n    let intVal = this._itemNameToValues.get(item.itemName);\n    if (typeof intVal !== \"undefined\") return intVal;\n    else return 0;\n  }\n  public ContainsItem(item: InkListItem) {\n    if (!item.itemName) return false;\n    if (item.originName != this.name) return false;\n\n    return this._itemNameToValues.has(item.itemName);\n  }\n  public ContainsItemWithName(itemName: string) {\n    return this._itemNameToValues.has(itemName);\n  }\n  public TryGetItemWithValue(\n    val: number,\n    /* out */ item: InkListItem\n  ): TryGetResult<InkListItem> {\n    for (let [key, value] of this._itemNameToValues) {\n      if (value == val) {\n        item = new InkListItem(this.name, key);\n        return { result: item, exists: true };\n      }\n    }\n\n    item = InkListItem.Null;\n    return { result: item, exists: false };\n  }\n  public TryGetValueForItem(\n    item: InkListItem,\n    /* out */ intVal: number\n  ): TryGetResult<number> {\n    if (!item.itemName) return { result: 0, exists: false };\n    let value = this._itemNameToValues.get(item.itemName);\n\n    if (!value) return { result: 0, exists: false };\n    return { result: value, exists: true };\n  }\n}\n","import { InkListItem } from \"./InkList\";\nimport { ListValue } from \"./Value\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { TryGetResult } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ListDefinitionsOrigin {\n  protected _lists: Map<string, ListDefinition>;\n  protected _allUnambiguousListValueCache: Map<string, ListValue>;\n\n  constructor(lists: ListDefinition[]) {\n    this._lists = new Map();\n    this._allUnambiguousListValueCache = new Map();\n\n    for (let list of lists) {\n      this._lists.set(list.name, list);\n\n      for (let [key, val] of list.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        let listValue = new ListValue(item, val);\n\n        if (!item.itemName) {\n          throw new Error(\"item.itemName is null or undefined.\");\n        }\n\n        this._allUnambiguousListValueCache.set(item.itemName, listValue);\n        this._allUnambiguousListValueCache.set(item.fullName, listValue);\n      }\n    }\n  }\n  get lists(): ListDefinition[] {\n    let listOfLists: ListDefinition[] = [];\n\n    for (let [, value] of this._lists) {\n      listOfLists.push(value);\n    }\n\n    return listOfLists;\n  }\n  public TryListGetDefinition(\n    name: string | null,\n    /* out */ def: ListDefinition | null\n  ): TryGetResult<ListDefinition | null> {\n    if (name === null) {\n      return { result: def, exists: false };\n    }\n    // initially, this function returns a boolean and the second parameter is an out.\n    let definition = this._lists.get(name);\n    if (!definition) return { result: def, exists: false };\n\n    return { result: definition, exists: true };\n  }\n  public FindSingleItemListWithName(name: string | null) {\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let val = this._allUnambiguousListValueCache.get(name);\n\n    if (typeof val !== \"undefined\") {\n      return val;\n    }\n\n    return null;\n  }\n}\n","import { Container } from \"./Container\";\nimport {\n  Value,\n  IntValue,\n  FloatValue,\n  StringValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n  BoolValue,\n} from \"./Value\";\nimport { Glue } from \"./Glue\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { Divert } from \"./Divert\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { VariableReference } from \"./VariableReference\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { Path } from \"./Path\";\nimport { Choice } from \"./Choice\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { InkListItem, InkList } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class JsonSerialisation {\n  public static JArrayToRuntimeObjList(\n    jArray: any[],\n    skipLast: boolean = false\n  ) {\n    let count = jArray.length;\n    if (skipLast) count--;\n\n    let list: InkObject[] = [];\n\n    for (let i = 0; i < count; i++) {\n      let jTok = jArray[i];\n      let runtimeObj = this.JTokenToRuntimeObject(jTok);\n      if (runtimeObj === null) {\n        return throwNullException(\"runtimeObj\");\n      }\n      list.push(runtimeObj);\n    }\n\n    return list;\n  }\n\n  public static WriteDictionaryRuntimeObjs(\n    writer: SimpleJson.Writer,\n    dictionary: Map<string, InkObject>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dictionary) {\n      writer.WritePropertyStart(key);\n      this.WriteRuntimeObject(writer, value);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteListRuntimeObjs(\n    writer: SimpleJson.Writer,\n    list: InkObject[]\n  ) {\n    writer.WriteArrayStart();\n    for (let value of list) {\n      this.WriteRuntimeObject(writer, value);\n    }\n    writer.WriteArrayEnd();\n  }\n\n  public static WriteIntDictionary(\n    writer: SimpleJson.Writer,\n    dict: Map<string, number>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dict) {\n      writer.WriteIntProperty(key, value);\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteRuntimeObject(\n    writer: SimpleJson.Writer,\n    obj: InkObject\n  ): void {\n    let container = asOrNull(obj, Container);\n    if (container) {\n      this.WriteRuntimeContainer(writer, container);\n      return;\n    }\n\n    let divert = asOrNull(obj, Divert);\n    if (divert) {\n      let divTypeKey = \"->\";\n      if (divert.isExternal) {\n        divTypeKey = \"x()\";\n      } else if (divert.pushesToStack) {\n        if (divert.stackPushType == PushPopType.Function) {\n          divTypeKey = \"f()\";\n        } else if (divert.stackPushType == PushPopType.Tunnel) {\n          divTypeKey = \"->t->\";\n        }\n      }\n\n      let targetStr;\n      if (divert.hasVariableTarget) {\n        targetStr = divert.variableDivertName;\n      } else {\n        targetStr = divert.targetPathString;\n      }\n\n      writer.WriteObjectStart();\n      writer.WriteProperty(divTypeKey, targetStr);\n\n      if (divert.hasVariableTarget) {\n        writer.WriteProperty(\"var\", true);\n      }\n\n      if (divert.isConditional) {\n        writer.WriteProperty(\"c\", true);\n      }\n\n      if (divert.externalArgs > 0) {\n        writer.WriteIntProperty(\"exArgs\", divert.externalArgs);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choicePoint = asOrNull(obj, ChoicePoint);\n    if (choicePoint) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"*\", choicePoint.pathStringOnChoice);\n      writer.WriteIntProperty(\"flg\", choicePoint.flags);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let boolVal = asOrNull(obj, BoolValue);\n    if (boolVal) {\n      writer.WriteBool(boolVal.value);\n      return;\n    }\n\n    let intVal = asOrNull(obj, IntValue);\n    if (intVal) {\n      writer.WriteInt(intVal.value);\n      return;\n    }\n\n    let floatVal = asOrNull(obj, FloatValue);\n    if (floatVal) {\n      writer.WriteFloat(floatVal.value);\n      return;\n    }\n\n    let strVal = asOrNull(obj, StringValue);\n    if (strVal) {\n      if (strVal.isNewline) {\n        writer.Write(\"\\n\", false);\n      } else {\n        writer.WriteStringStart();\n        writer.WriteStringInner(\"^\");\n        writer.WriteStringInner(strVal.value);\n        writer.WriteStringEnd();\n      }\n      return;\n    }\n\n    let listVal = asOrNull(obj, ListValue);\n    if (listVal) {\n      this.WriteInkList(writer, listVal);\n      return;\n    }\n\n    let divTargetVal = asOrNull(obj, DivertTargetValue);\n    if (divTargetVal) {\n      writer.WriteObjectStart();\n      if (divTargetVal.value === null) {\n        return throwNullException(\"divTargetVal.value\");\n      }\n      writer.WriteProperty(\"^->\", divTargetVal.value.componentsString);\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let varPtrVal = asOrNull(obj, VariablePointerValue);\n    if (varPtrVal) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"^var\", varPtrVal.value);\n      writer.WriteIntProperty(\"ci\", varPtrVal.contextIndex);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let glue = asOrNull(obj, Glue);\n    if (glue) {\n      writer.Write(\"<>\");\n      return;\n    }\n\n    let controlCmd = asOrNull(obj, ControlCommand);\n    if (controlCmd) {\n      writer.Write(\n        JsonSerialisation._controlCommandNames[controlCmd.commandType]\n      );\n      return;\n    }\n\n    let nativeFunc = asOrNull(obj, NativeFunctionCall);\n    if (nativeFunc) {\n      let name = nativeFunc.name;\n\n      if (name == \"^\") name = \"L^\";\n\n      writer.Write(name);\n      return;\n    }\n\n    let varRef = asOrNull(obj, VariableReference);\n    if (varRef) {\n      writer.WriteObjectStart();\n      let readCountPath = varRef.pathStringForCount;\n      if (readCountPath != null) {\n        writer.WriteProperty(\"CNT?\", readCountPath);\n      } else {\n        writer.WriteProperty(\"VAR?\", varRef.name);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let varAss = asOrNull(obj, VariableAssignment);\n    if (varAss) {\n      writer.WriteObjectStart();\n\n      let key = varAss.isGlobal ? \"VAR=\" : \"temp=\";\n      writer.WriteProperty(key, varAss.variableName);\n\n      // Reassignment?\n      if (!varAss.isNewDeclaration) writer.WriteProperty(\"re\", true);\n\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let voidObj = asOrNull(obj, Void);\n    if (voidObj) {\n      writer.Write(\"void\");\n      return;\n    }\n\n    let tag = asOrNull(obj, Tag);\n    if (tag) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"#\", tag.text);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choice = asOrNull(obj, Choice);\n    if (choice) {\n      this.WriteChoice(writer, choice);\n      return;\n    }\n\n    throw new Error(\"Failed to convert runtime object to Json token: \" + obj);\n  }\n\n  public static JObjectToDictionaryRuntimeObjs(jObject: Record<string, any>) {\n    let dict: Map<string, InkObject> = new Map();\n\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        let inkObject = this.JTokenToRuntimeObject(jObject[key]);\n        if (inkObject === null) {\n          return throwNullException(\"inkObject\");\n        }\n        dict.set(key, inkObject);\n      }\n    }\n\n    return dict;\n  }\n\n  public static JObjectToIntDictionary(jObject: Record<string, any>) {\n    let dict: Map<string, number> = new Map();\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        dict.set(key, parseInt(jObject[key]));\n      }\n    }\n    return dict;\n  }\n\n  public static JTokenToRuntimeObject(token: any): InkObject | null {\n    if (\n      (typeof token === \"number\" && !isNaN(token)) ||\n      typeof token === \"boolean\"\n    ) {\n      return Value.Create(token);\n    }\n\n    if (typeof token === \"string\") {\n      let str = token.toString();\n\n      // String value\n      let firstChar = str[0];\n      if (firstChar == \"^\") return new StringValue(str.substring(1));\n      else if (firstChar == \"\\n\" && str.length == 1)\n        return new StringValue(\"\\n\");\n\n      // Glue\n      if (str == \"<>\") return new Glue();\n\n      // Control commands (would looking up in a hash set be faster?)\n      for (let i = 0; i < JsonSerialisation._controlCommandNames.length; ++i) {\n        let cmdName = JsonSerialisation._controlCommandNames[i];\n        if (str == cmdName) {\n          return new ControlCommand(i);\n        }\n      }\n\n      // Native functions\n      if (str == \"L^\") str = \"^\";\n      if (NativeFunctionCall.CallExistsWithName(str))\n        return NativeFunctionCall.CallWithName(str);\n\n      // Pop\n      if (str == \"->->\") return ControlCommand.PopTunnel();\n      else if (str == \"~ret\") return ControlCommand.PopFunction();\n\n      // Void\n      if (str == \"void\") return new Void();\n    }\n\n    if (typeof token === \"object\" && !Array.isArray(token)) {\n      let obj = token as Record<string, any>;\n      let propValue;\n\n      // Divert target value to path\n      if (obj[\"^->\"]) {\n        propValue = obj[\"^->\"];\n        return new DivertTargetValue(new Path(propValue.toString()));\n      }\n\n      // VariablePointerValue\n      if (obj[\"^var\"]) {\n        propValue = obj[\"^var\"];\n        let varPtr = new VariablePointerValue(propValue.toString());\n        if (\"ci\" in obj) {\n          propValue = obj[\"ci\"];\n          varPtr.contextIndex = parseInt(propValue);\n        }\n        return varPtr;\n      }\n\n      // Divert\n      let isDivert = false;\n      let pushesToStack = false;\n      let divPushType = PushPopType.Function;\n      let external = false;\n      if ((propValue = obj[\"->\"])) {\n        isDivert = true;\n      } else if ((propValue = obj[\"f()\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Function;\n      } else if ((propValue = obj[\"->t->\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Tunnel;\n      } else if ((propValue = obj[\"x()\"])) {\n        isDivert = true;\n        external = true;\n        pushesToStack = false;\n        divPushType = PushPopType.Function;\n      }\n\n      if (isDivert) {\n        let divert = new Divert();\n        divert.pushesToStack = pushesToStack;\n        divert.stackPushType = divPushType;\n        divert.isExternal = external;\n\n        let target = propValue.toString();\n\n        if ((propValue = obj[\"var\"])) divert.variableDivertName = target;\n        else divert.targetPathString = target;\n\n        divert.isConditional = !!obj[\"c\"];\n\n        if (external) {\n          if ((propValue = obj[\"exArgs\"]))\n            divert.externalArgs = parseInt(propValue);\n        }\n\n        return divert;\n      }\n\n      // Choice\n      if ((propValue = obj[\"*\"])) {\n        let choice = new ChoicePoint();\n        choice.pathStringOnChoice = propValue.toString();\n\n        if ((propValue = obj[\"flg\"])) choice.flags = parseInt(propValue);\n\n        return choice;\n      }\n\n      // Variable reference\n      if ((propValue = obj[\"VAR?\"])) {\n        return new VariableReference(propValue.toString());\n      } else if ((propValue = obj[\"CNT?\"])) {\n        let readCountVarRef = new VariableReference();\n        readCountVarRef.pathStringForCount = propValue.toString();\n        return readCountVarRef;\n      }\n\n      // Variable assignment\n      let isVarAss = false;\n      let isGlobalVar = false;\n      if ((propValue = obj[\"VAR=\"])) {\n        isVarAss = true;\n        isGlobalVar = true;\n      } else if ((propValue = obj[\"temp=\"])) {\n        isVarAss = true;\n        isGlobalVar = false;\n      }\n      if (isVarAss) {\n        let varName = propValue.toString();\n        let isNewDecl = !obj[\"re\"];\n        let varAss = new VariableAssignment(varName, isNewDecl);\n        varAss.isGlobal = isGlobalVar;\n        return varAss;\n      }\n      if (obj[\"#\"] !== undefined) {\n        propValue = obj[\"#\"];\n        return new Tag(propValue.toString());\n      }\n\n      // List value\n      if ((propValue = obj[\"list\"])) {\n        // var listContent = (Dictionary<string, object>)propValue;\n        let listContent = propValue as Record<string, any>;\n        let rawList = new InkList();\n        if ((propValue = obj[\"origins\"])) {\n          // var namesAsObjs = (List<object>)propValue;\n          let namesAsObjs = propValue as string[];\n          // rawList.SetInitialOriginNames(namesAsObjs.Cast<string>().ToList());\n          rawList.SetInitialOriginNames(namesAsObjs);\n        }\n\n        for (let key in listContent) {\n          if (listContent.hasOwnProperty(key)) {\n            let nameToVal = listContent[key];\n            let item = new InkListItem(key);\n            let val = parseInt(nameToVal);\n            rawList.Add(item, val);\n          }\n        }\n\n        return new ListValue(rawList);\n      }\n\n      if (obj[\"originalChoicePath\"] != null) return this.JObjectToChoice(obj);\n    }\n\n    // Array is always a Runtime.Container\n    if (Array.isArray(token)) {\n      return this.JArrayToContainer(token);\n    }\n\n    if (token === null || token === undefined) return null;\n\n    throw new Error(\n      \"Failed to convert token to runtime object: \" +\n        this.toJson(token, [\"parent\"])\n    );\n  }\n\n  public static toJson<T>(\n    me: T,\n    removes?: (keyof T)[],\n    space?: number\n  ): string {\n    return JSON.stringify(\n      me,\n      (k, v) => (removes?.some((r) => r === k) ? undefined : v),\n      space\n    );\n  }\n\n  public static WriteRuntimeContainer(\n    writer: SimpleJson.Writer,\n    container: Container | null,\n    withoutName: boolean = false\n  ) {\n    writer.WriteArrayStart();\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    for (let c of container.content) this.WriteRuntimeObject(writer, c);\n\n    let namedOnlyContent = container.namedOnlyContent;\n    let countFlags = container.countFlags;\n    let hasNameProperty = container.name != null && !withoutName;\n\n    let hasTerminator =\n      namedOnlyContent != null || countFlags > 0 || hasNameProperty;\n    if (hasTerminator) {\n      writer.WriteObjectStart();\n    }\n\n    if (namedOnlyContent != null) {\n      for (let [key, value] of namedOnlyContent) {\n        let name = key;\n        let namedContainer = asOrNull(value, Container);\n        writer.WritePropertyStart(name);\n        this.WriteRuntimeContainer(writer, namedContainer, true);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (countFlags > 0) writer.WriteIntProperty(\"#f\", countFlags);\n\n    if (hasNameProperty) writer.WriteProperty(\"#n\", container.name);\n\n    if (hasTerminator) writer.WriteObjectEnd();\n    else writer.WriteNull();\n\n    writer.WriteArrayEnd();\n  }\n\n  public static JArrayToContainer(jArray: any[]) {\n    let container = new Container();\n    container.content = this.JArrayToRuntimeObjList(jArray, true);\n\n    let terminatingObj = jArray[jArray.length - 1] as Record<string, any>;\n    if (terminatingObj != null) {\n      let namedOnlyContent = new Map();\n\n      for (let key in terminatingObj) {\n        if (key == \"#f\") {\n          container.countFlags = parseInt(terminatingObj[key]);\n        } else if (key == \"#n\") {\n          container.name = terminatingObj[key].toString();\n        } else {\n          let namedContentItem = this.JTokenToRuntimeObject(\n            terminatingObj[key]\n          );\n          // var namedSubContainer = namedContentItem as Container;\n          let namedSubContainer = asOrNull(namedContentItem, Container);\n          if (namedSubContainer) namedSubContainer.name = key;\n          namedOnlyContent.set(key, namedContentItem);\n        }\n      }\n\n      container.namedOnlyContent = namedOnlyContent;\n    }\n\n    return container;\n  }\n\n  public static JObjectToChoice(jObj: Record<string, any>) {\n    let choice = new Choice();\n    choice.text = jObj[\"text\"].toString();\n    choice.index = parseInt(jObj[\"index\"]);\n    choice.sourcePath = jObj[\"originalChoicePath\"].toString();\n    choice.originalThreadIndex = parseInt(jObj[\"originalThreadIndex\"]);\n    choice.pathStringOnChoice = jObj[\"targetPath\"].toString();\n    if (jObj[\"tags\"]) {\n      choice.tags = jObj[\"tags\"];\n    }\n    return choice;\n  }\n\n  public static WriteChoice(writer: SimpleJson.Writer, choice: Choice) {\n    writer.WriteObjectStart();\n    writer.WriteProperty(\"text\", choice.text);\n    writer.WriteIntProperty(\"index\", choice.index);\n    writer.WriteProperty(\"originalChoicePath\", choice.sourcePath);\n    writer.WriteIntProperty(\"originalThreadIndex\", choice.originalThreadIndex);\n    writer.WriteProperty(\"targetPath\", choice.pathStringOnChoice);\n    if (choice.tags) {\n      writer.WriteProperty(\"tags\", (w) => {\n        w.WriteArrayStart();\n        for (const tag of choice.tags!) {\n          w.WriteStringStart();\n          w.WriteStringInner(tag);\n          w.WriteStringEnd();\n        }\n        w.WriteArrayEnd();\n      });\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteInkList(writer: SimpleJson.Writer, listVal: ListValue) {\n    let rawList = listVal.value;\n    if (rawList === null) {\n      return throwNullException(\"rawList\");\n    }\n\n    writer.WriteObjectStart();\n    writer.WritePropertyStart(\"list\");\n    writer.WriteObjectStart();\n\n    for (let [key, val] of rawList) {\n      let item = InkListItem.fromSerializedKey(key);\n      let itemVal = val;\n\n      if (item.itemName === null) {\n        return throwNullException(\"item.itemName\");\n      }\n\n      writer.WritePropertyNameStart();\n      writer.WritePropertyNameInner(item.originName ? item.originName : \"?\");\n      writer.WritePropertyNameInner(\".\");\n      writer.WritePropertyNameInner(item.itemName);\n      writer.WritePropertyNameEnd();\n\n      writer.Write(itemVal);\n\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    writer.WritePropertyEnd();\n\n    if (\n      rawList.Count == 0 &&\n      rawList.originNames != null &&\n      rawList.originNames.length > 0\n    ) {\n      writer.WritePropertyStart(\"origins\");\n      writer.WriteArrayStart();\n      for (let name of rawList.originNames) writer.Write(name);\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n  }\n\n  public static ListDefinitionsToJToken(origin: ListDefinitionsOrigin) {\n    let result: Record<string, any> = {};\n\n    for (let def of origin.lists) {\n      let listDefJson: Record<string, any> = {};\n\n      for (let [key, val] of def.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.itemName === null) {\n          return throwNullException(\"item.itemName\");\n        }\n        listDefJson[item.itemName] = val;\n      }\n\n      result[def.name] = listDefJson;\n    }\n\n    return result;\n  }\n\n  public static JTokenToListDefinitions(obj: Record<string, any>) {\n    // var defsObj = (Dictionary<string, object>)obj;\n    let defsObj = obj;\n\n    let allDefs: ListDefinition[] = [];\n\n    for (let key in defsObj) {\n      if (defsObj.hasOwnProperty(key)) {\n        let name = key.toString();\n        // var listDefJson = (Dictionary<string, object>)kv.Value;\n        let listDefJson = defsObj[key] as Record<string, any>;\n\n        // Cast (string, object) to (string, int) for items\n        let items: Map<string, number> = new Map();\n\n        for (let nameValueKey in listDefJson) {\n          if (defsObj.hasOwnProperty(key)) {\n            let nameValue = listDefJson[nameValueKey];\n            items.set(nameValueKey, parseInt(nameValue));\n          }\n        }\n\n        let def = new ListDefinition(name, items);\n        allDefs.push(def);\n      }\n    }\n\n    return new ListDefinitionsOrigin(allDefs);\n  }\n\n  private static _controlCommandNames = (() => {\n    let _controlCommandNames: string[] = [];\n\n    _controlCommandNames[ControlCommand.CommandType.EvalStart] = \"ev\";\n    _controlCommandNames[ControlCommand.CommandType.EvalOutput] = \"out\";\n    _controlCommandNames[ControlCommand.CommandType.EvalEnd] = \"/ev\";\n    _controlCommandNames[ControlCommand.CommandType.Duplicate] = \"du\";\n    _controlCommandNames[ControlCommand.CommandType.PopEvaluatedValue] = \"pop\";\n    _controlCommandNames[ControlCommand.CommandType.PopFunction] = \"~ret\";\n    _controlCommandNames[ControlCommand.CommandType.PopTunnel] = \"->->\";\n    _controlCommandNames[ControlCommand.CommandType.BeginString] = \"str\";\n    _controlCommandNames[ControlCommand.CommandType.EndString] = \"/str\";\n    _controlCommandNames[ControlCommand.CommandType.NoOp] = \"nop\";\n    _controlCommandNames[ControlCommand.CommandType.ChoiceCount] = \"choiceCnt\";\n    _controlCommandNames[ControlCommand.CommandType.Turns] = \"turn\";\n    _controlCommandNames[ControlCommand.CommandType.TurnsSince] = \"turns\";\n    _controlCommandNames[ControlCommand.CommandType.ReadCount] = \"readc\";\n    _controlCommandNames[ControlCommand.CommandType.Random] = \"rnd\";\n    _controlCommandNames[ControlCommand.CommandType.SeedRandom] = \"srnd\";\n    _controlCommandNames[ControlCommand.CommandType.VisitIndex] = \"visit\";\n    _controlCommandNames[ControlCommand.CommandType.SequenceShuffleIndex] =\n      \"seq\";\n    _controlCommandNames[ControlCommand.CommandType.StartThread] = \"thread\";\n    _controlCommandNames[ControlCommand.CommandType.Done] = \"done\";\n    _controlCommandNames[ControlCommand.CommandType.End] = \"end\";\n    _controlCommandNames[ControlCommand.CommandType.ListFromInt] = \"listInt\";\n    _controlCommandNames[ControlCommand.CommandType.ListRange] = \"range\";\n    _controlCommandNames[ControlCommand.CommandType.ListRandom] = \"lrnd\";\n    _controlCommandNames[ControlCommand.CommandType.BeginTag] = \"#\";\n    _controlCommandNames[ControlCommand.CommandType.EndTag] = \"/#\";\n\n    for (let i = 0; i < ControlCommand.CommandType.TOTAL_VALUES; ++i) {\n      if (_controlCommandNames[i] == null)\n        throw new Error(\"Control command not accounted for in serialisation\");\n    }\n\n    return _controlCommandNames;\n  })();\n}\n","import { PushPopType } from \"./PushPop\";\nimport { Path } from \"./Path\";\nimport { Story } from \"./Story\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { ListValue } from \"./Value\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { Pointer } from \"./Pointer\";\nimport { InkObject } from \"./Object\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class CallStack {\n  get elements() {\n    return this.callStack;\n  }\n\n  get depth() {\n    return this.elements.length;\n  }\n\n  get currentElement() {\n    let thread = this._threads[this._threads.length - 1];\n    let cs = thread.callstack;\n    return cs[cs.length - 1];\n  }\n\n  get currentElementIndex() {\n    return this.callStack.length - 1;\n  }\n\n  get currentThread(): CallStack.Thread {\n    return this._threads[this._threads.length - 1];\n  }\n  set currentThread(value: CallStack.Thread) {\n    Debug.Assert(\n      this._threads.length == 1,\n      \"Shouldn't be directly setting the current thread when we have a stack of them\"\n    );\n\n    this._threads.length = 0;\n    this._threads.push(value);\n  }\n\n  get canPop() {\n    return this.callStack.length > 1;\n  }\n\n  constructor(storyContext: Story);\n  constructor(toCopy: CallStack);\n  constructor() {\n    if (arguments[0] instanceof Story) {\n      let storyContext = arguments[0] as Story;\n\n      this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n      this.Reset();\n    } else {\n      let toCopy = arguments[0] as CallStack;\n\n      this._threads = [];\n      for (let otherThread of toCopy._threads) {\n        this._threads.push(otherThread.Copy());\n      }\n      this._threadCounter = toCopy._threadCounter;\n      this._startOfRoot = toCopy._startOfRoot.copy();\n    }\n  }\n\n  public Reset() {\n    this._threads = [];\n    this._threads.push(new CallStack.Thread());\n\n    this._threads[0].callstack.push(\n      new CallStack.Element(PushPopType.Tunnel, this._startOfRoot)\n    );\n  }\n\n  public SetJsonToken(jObject: Record<string, any>, storyContext: Story) {\n    this._threads.length = 0;\n\n    // TODO: (List<object>) jObject [\"threads\"];\n    let jThreads: any[] = jObject[\"threads\"];\n\n    for (let jThreadTok of jThreads) {\n      // TODO: var jThreadObj = (Dictionary<string, object>)jThreadTok;\n      let jThreadObj = jThreadTok;\n      let thread = new CallStack.Thread(jThreadObj, storyContext);\n      this._threads.push(thread);\n    }\n\n    // TODO: (int)jObject [\"threadCounter\"];\n    this._threadCounter = parseInt(jObject[\"threadCounter\"]);\n    this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n  }\n  public WriteJson(w: SimpleJson.Writer) {\n    w.WriteObject((writer) => {\n      writer.WritePropertyStart(\"threads\");\n      writer.WriteArrayStart();\n\n      for (let thread of this._threads) {\n        thread.WriteJson(writer);\n      }\n\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WritePropertyStart(\"threadCounter\");\n      writer.WriteInt(this._threadCounter);\n      writer.WritePropertyEnd();\n    });\n  }\n\n  public PushThread() {\n    let newThread = this.currentThread.Copy();\n    this._threadCounter++;\n    newThread.threadIndex = this._threadCounter;\n    this._threads.push(newThread);\n  }\n\n  public ForkThread() {\n    let forkedThread = this.currentThread.Copy();\n    this._threadCounter++;\n    forkedThread.threadIndex = this._threadCounter;\n    return forkedThread;\n  }\n\n  public PopThread() {\n    if (this.canPopThread) {\n      this._threads.splice(this._threads.indexOf(this.currentThread), 1); // should be equivalent to a pop()\n    } else {\n      throw new Error(\"Can't pop thread\");\n    }\n  }\n\n  get canPopThread() {\n    return this._threads.length > 1 && !this.elementIsEvaluateFromGame;\n  }\n\n  get elementIsEvaluateFromGame() {\n    return this.currentElement.type == PushPopType.FunctionEvaluationFromGame;\n  }\n\n  public Push(\n    type: PushPopType,\n    externalEvaluationStackHeight: number = 0,\n    outputStreamLengthWithPushed: number = 0\n  ) {\n    let element = new CallStack.Element(\n      type,\n      this.currentElement.currentPointer,\n      false\n    );\n\n    element.evaluationStackHeightWhenPushed = externalEvaluationStackHeight;\n    element.functionStartInOutputStream = outputStreamLengthWithPushed;\n\n    this.callStack.push(element);\n  }\n\n  public CanPop(type: PushPopType | null = null) {\n    if (!this.canPop) return false;\n\n    if (type == null) return true;\n\n    return this.currentElement.type == type;\n  }\n\n  public Pop(type: PushPopType | null = null) {\n    if (this.CanPop(type)) {\n      this.callStack.pop();\n      return;\n    } else {\n      throw new Error(\"Mismatched push/pop in Callstack\");\n    }\n  }\n\n  public GetTemporaryVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    let varValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (varValue.exists) {\n      return varValue.result;\n    } else {\n      return null;\n    }\n  }\n\n  public SetTemporaryVariable(\n    name: string,\n    value: any,\n    declareNew: boolean,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    if (!declareNew && !contextElement.temporaryVariables.get(name)) {\n      throw new Error(\"Could not find temporary variable to set: \" + name);\n    }\n\n    let oldValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (oldValue.exists)\n      ListValue.RetainListOriginsForAssignment(oldValue.result, value);\n\n    contextElement.temporaryVariables.set(name, value);\n  }\n\n  public ContextForVariableNamed(name: string) {\n    if (this.currentElement.temporaryVariables.get(name)) {\n      return this.currentElementIndex + 1;\n    } else {\n      return 0;\n    }\n  }\n\n  public ThreadWithIndex(index: number) {\n    let filtered = this._threads.filter((t) => {\n      if (t.threadIndex == index) return t;\n    });\n\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n\n  get callStack() {\n    return this.currentThread.callstack;\n  }\n\n  get callStackTrace() {\n    let sb = new StringBuilder();\n\n    for (let t = 0; t < this._threads.length; t++) {\n      let thread = this._threads[t];\n      let isCurrent = t == this._threads.length - 1;\n      sb.AppendFormat(\n        \"=== THREAD {0}/{1} {2}===\\n\",\n        t + 1,\n        this._threads.length,\n        isCurrent ? \"(current) \" : \"\"\n      );\n\n      for (let i = 0; i < thread.callstack.length; i++) {\n        if (thread.callstack[i].type == PushPopType.Function)\n          sb.Append(\"  [FUNCTION] \");\n        else sb.Append(\"  [TUNNEL] \");\n\n        let pointer = thread.callstack[i].currentPointer;\n        if (!pointer.isNull) {\n          sb.Append(\"<SOMEWHERE IN \");\n          if (pointer.container === null) {\n            return throwNullException(\"pointer.container\");\n          }\n          sb.Append(pointer.container.path.toString());\n          sb.AppendLine(\">\");\n        }\n      }\n    }\n\n    return sb.toString();\n  }\n\n  public _threads!: CallStack.Thread[]; // Banged because it's initialized in Reset().\n  public _threadCounter: number = 0;\n  public _startOfRoot: Pointer = Pointer.Null;\n}\n\nexport namespace CallStack {\n  export class Element {\n    public currentPointer: Pointer;\n    public inExpressionEvaluation: boolean;\n    public temporaryVariables: Map<string, InkObject>;\n    public type: PushPopType;\n\n    public evaluationStackHeightWhenPushed: number = 0;\n    public functionStartInOutputStream: number = 0;\n\n    constructor(\n      type: PushPopType,\n      pointer: Pointer,\n      inExpressionEvaluation: boolean = false\n    ) {\n      this.currentPointer = pointer.copy();\n      this.inExpressionEvaluation = inExpressionEvaluation;\n      this.temporaryVariables = new Map();\n      this.type = type;\n    }\n\n    public Copy() {\n      let copy = new Element(\n        this.type,\n        this.currentPointer,\n        this.inExpressionEvaluation\n      );\n      copy.temporaryVariables = new Map(this.temporaryVariables);\n      copy.evaluationStackHeightWhenPushed =\n        this.evaluationStackHeightWhenPushed;\n      copy.functionStartInOutputStream = this.functionStartInOutputStream;\n      return copy;\n    }\n  }\n\n  export class Thread {\n    public callstack: Element[];\n    public threadIndex: number = 0;\n    public previousPointer: Pointer = Pointer.Null;\n\n    constructor();\n    constructor(jThreadObj: any, storyContext: Story);\n    constructor() {\n      this.callstack = [];\n\n      if (arguments[0] && arguments[1]) {\n        let jThreadObj = arguments[0];\n        let storyContext = arguments[1];\n\n        // TODO: (int) jThreadObj['threadIndex'] can raise;\n        this.threadIndex = parseInt(jThreadObj[\"threadIndex\"]);\n\n        let jThreadCallstack = jThreadObj[\"callstack\"];\n\n        for (let jElTok of jThreadCallstack) {\n          let jElementObj = jElTok;\n\n          // TODO: (int) jElementObj['type'] can raise;\n          let pushPopType: PushPopType = parseInt(jElementObj[\"type\"]);\n\n          let pointer = Pointer.Null;\n\n          let currentContainerPathStr: string;\n          // TODO: jElementObj.TryGetValue (\"cPath\", out currentContainerPathStrToken);\n          let currentContainerPathStrToken = jElementObj[\"cPath\"];\n          if (typeof currentContainerPathStrToken !== \"undefined\") {\n            currentContainerPathStr = currentContainerPathStrToken.toString();\n\n            let threadPointerResult = storyContext.ContentAtPath(\n              new Path(currentContainerPathStr)\n            );\n            pointer.container = threadPointerResult.container;\n            pointer.index = parseInt(jElementObj[\"idx\"]);\n\n            if (threadPointerResult.obj == null)\n              throw new Error(\n                \"When loading state, internal story location couldn't be found: \" +\n                  currentContainerPathStr +\n                  \". Has the story changed since this save data was created?\"\n              );\n            else if (threadPointerResult.approximate) {\n              if (pointer.container === null) {\n                return throwNullException(\"pointer.container\");\n              }\n              storyContext.Warning(\n                \"When loading state, exact internal story location couldn't be found: '\" +\n                  currentContainerPathStr +\n                  \"', so it was approximated to '\" +\n                  pointer.container.path.toString() +\n                  \"' to recover. Has the story changed since this save data was created?\"\n              );\n            }\n          }\n\n          let inExpressionEvaluation = !!jElementObj[\"exp\"];\n\n          let el = new Element(pushPopType, pointer, inExpressionEvaluation);\n\n          let temps = jElementObj[\"temp\"];\n          if (typeof temps !== \"undefined\") {\n            el.temporaryVariables =\n              JsonSerialisation.JObjectToDictionaryRuntimeObjs(temps);\n          } else {\n            el.temporaryVariables.clear();\n          }\n\n          this.callstack.push(el);\n        }\n\n        let prevContentObjPath = jThreadObj[\"previousContentObject\"];\n        if (typeof prevContentObjPath !== \"undefined\") {\n          let prevPath = new Path(prevContentObjPath.toString());\n          this.previousPointer = storyContext.PointerAtPath(prevPath);\n        }\n      }\n    }\n\n    public Copy() {\n      let copy = new Thread();\n      copy.threadIndex = this.threadIndex;\n      for (let e of this.callstack) {\n        copy.callstack.push(e.Copy());\n      }\n      copy.previousPointer = this.previousPointer.copy();\n      return copy;\n    }\n\n    public WriteJson(writer: SimpleJson.Writer) {\n      writer.WriteObjectStart();\n\n      writer.WritePropertyStart(\"callstack\");\n      writer.WriteArrayStart();\n      for (let el of this.callstack) {\n        writer.WriteObjectStart();\n        if (!el.currentPointer.isNull) {\n          if (el.currentPointer.container === null) {\n            return throwNullException(\"el.currentPointer.container\");\n          }\n          writer.WriteProperty(\n            \"cPath\",\n            el.currentPointer.container.path.componentsString\n          );\n          writer.WriteIntProperty(\"idx\", el.currentPointer.index);\n        }\n\n        writer.WriteProperty(\"exp\", el.inExpressionEvaluation);\n        writer.WriteIntProperty(\"type\", el.type);\n\n        if (el.temporaryVariables.size > 0) {\n          writer.WritePropertyStart(\"temp\");\n          JsonSerialisation.WriteDictionaryRuntimeObjs(\n            writer,\n            el.temporaryVariables\n          );\n          writer.WritePropertyEnd();\n        }\n\n        writer.WriteObjectEnd();\n      }\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WriteIntProperty(\"threadIndex\", this.threadIndex);\n\n      if (!this.previousPointer.isNull) {\n        let resolvedPointer = this.previousPointer.Resolve();\n        if (resolvedPointer === null) {\n          return throwNullException(\"this.previousPointer.Resolve()\");\n        }\n        writer.WriteProperty(\n          \"previousContentObject\",\n          resolvedPointer.path.toString()\n        );\n      }\n\n      writer.WriteObjectEnd();\n    }\n  }\n}\n","import {\n  AbstractValue,\n  Value,\n  VariablePointerValue,\n  ListValue,\n  IntValue,\n  FloatValue,\n  BoolValue,\n} from \"./Value\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { InkObject } from \"./Object\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { StoryException } from \"./StoryException\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { asOrThrows, asOrNull, isEquatable } from \"./TypeAssertion\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { CallStack } from \"./CallStack\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { InkList } from \"./Story\";\nimport { Path } from \"./Path\";\n\n// Fake class wrapper around VariableState to have correct typing\n// when using the Proxy syntax in typescript\nfunction VariablesStateAccessor<T>(): new () => Pick<T, keyof T> {\n  return class {} as any;\n}\n\ntype VariableStateValue = boolean | string | number | InkList | Path | null;\n\nexport class VariablesState extends VariablesStateAccessor<\n  Record<string, any>\n>() {\n  // The way variableChangedEvent is a bit different than the reference implementation.\n  // Originally it uses the C# += operator to add delegates, but in js we need to maintain\n  // an actual collection of delegates (ie. callbacks) to register a new one, there is a\n  // special ObserveVariableChange method below.\n  public variableChangedEventCallbacks: Array<\n    (variableName: string, newValue: InkObject) => void\n  > = [];\n  public variableChangedEvent(variableName: string, newValue: InkObject): void {\n    for (let callback of this.variableChangedEventCallbacks) {\n      callback(variableName, newValue);\n    }\n  }\n\n  public patch: StatePatch | null = null;\n\n  get batchObservingVariableChanges() {\n    return this._batchObservingVariableChanges;\n  }\n  set batchObservingVariableChanges(value: boolean) {\n    this._batchObservingVariableChanges = value;\n    if (value) {\n      this._changedVariablesForBatchObs = new Set();\n    } else {\n      if (this._changedVariablesForBatchObs != null) {\n        for (let variableName of this._changedVariablesForBatchObs) {\n          let currentValue = this._globalVariables.get(variableName);\n          if (!currentValue) {\n            throwNullException(\"currentValue\");\n          } else {\n            this.variableChangedEvent(variableName, currentValue);\n          }\n        }\n\n        this._changedVariablesForBatchObs = null;\n      }\n    }\n  }\n\n  get callStack() {\n    return this._callStack;\n  }\n  set callStack(callStack) {\n    this._callStack = callStack;\n  }\n\n  private _batchObservingVariableChanges: boolean = false;\n\n  // the original code uses a magic getter and setter for global variables,\n  // allowing things like variableState['varname]. This is not quite possible\n  // in js without a Proxy, so it is replaced with this $ function.\n  public $(variableName: string): VariableStateValue;\n  public $(variableName: string, value: VariableStateValue): void;\n  public $(variableName: string, value?: any) {\n    if (typeof value === \"undefined\") {\n      let varContents = null;\n\n      if (this.patch !== null) {\n        varContents = this.patch.TryGetGlobal(variableName, null);\n        if (varContents.exists)\n          return (varContents.result as AbstractValue).valueObject;\n      }\n\n      varContents = this._globalVariables.get(variableName);\n\n      if (typeof varContents === \"undefined\") {\n        varContents = this._defaultGlobalVariables.get(variableName);\n      }\n\n      if (typeof varContents !== \"undefined\")\n        return (varContents as AbstractValue).valueObject;\n      else return null;\n    } else {\n      if (typeof this._defaultGlobalVariables.get(variableName) === \"undefined\")\n        throw new StoryException(\n          \"Cannot assign to a variable (\" +\n            variableName +\n            \") that hasn't been declared in the story\"\n        );\n\n      let val = Value.Create(value);\n      if (val == null) {\n        if (value == null) {\n          throw new Error(\"Cannot pass null to VariableState\");\n        } else {\n          throw new Error(\n            \"Invalid value passed to VariableState: \" + value.toString()\n          );\n        }\n      }\n\n      this.SetGlobal(variableName, val);\n    }\n  }\n\n  constructor(\n    callStack: CallStack,\n    listDefsOrigin: ListDefinitionsOrigin | null\n  ) {\n    super();\n    this._globalVariables = new Map();\n    this._callStack = callStack;\n    this._listDefsOrigin = listDefsOrigin;\n\n    // if es6 proxies are available, use them.\n    try {\n      // the proxy is used to allow direct manipulation of global variables.\n      // It first tries to access the objects own property, and if none is\n      // found it delegates the call to the $ method, defined below\n      let p = new Proxy(this, {\n        get(target: any, name) {\n          return name in target ? target[name] : target.$(name);\n        },\n        set(target: any, name, value) {\n          if (name in target) target[name] = value;\n          else target.$(name, value);\n          return true; // returning a falsy value make the trap fail\n        },\n      });\n\n      return p;\n    } catch (e) {\n      // the proxy object is not available in this context. we should warn the\n      // dev but writing to the console feels a bit intrusive.\n      // console.log(\"ES6 Proxy not available - direct manipulation of global variables can't work, use $() instead.\");\n    }\n  }\n\n  public ApplyPatch() {\n    if (this.patch === null) {\n      return throwNullException(\"this.patch\");\n    }\n\n    for (let [namedVarKey, namedVarValue] of this.patch.globals) {\n      this._globalVariables.set(namedVarKey, namedVarValue);\n    }\n\n    if (this._changedVariablesForBatchObs !== null) {\n      for (let name of this.patch.changedVariables) {\n        this._changedVariablesForBatchObs.add(name);\n      }\n    }\n\n    this.patch = null;\n  }\n\n  public SetJsonToken(jToken: Record<string, any>) {\n    this._globalVariables.clear();\n\n    for (let [varValKey, varValValue] of this._defaultGlobalVariables) {\n      let loadedToken = jToken[varValKey];\n      if (typeof loadedToken !== \"undefined\") {\n        let tokenInkObject =\n          JsonSerialisation.JTokenToRuntimeObject(loadedToken);\n        if (tokenInkObject === null) {\n          return throwNullException(\"tokenInkObject\");\n        }\n        this._globalVariables.set(varValKey, tokenInkObject);\n      } else {\n        this._globalVariables.set(varValKey, varValValue);\n      }\n    }\n  }\n\n  public static dontSaveDefaultValues: boolean = true;\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n    for (let [keyValKey, keyValValue] of this._globalVariables) {\n      let name = keyValKey;\n      let val = keyValValue;\n\n      if (VariablesState.dontSaveDefaultValues) {\n        if (this._defaultGlobalVariables.has(name)) {\n          let defaultVal = this._defaultGlobalVariables.get(name)!;\n          if (this.RuntimeObjectsEqual(val, defaultVal)) continue;\n        }\n      }\n\n      writer.WritePropertyStart(name);\n      JsonSerialisation.WriteRuntimeObject(writer, val);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public RuntimeObjectsEqual(\n    obj1: InkObject | null,\n    obj2: InkObject | null\n  ): boolean {\n    if (obj1 === null) {\n      return throwNullException(\"obj1\");\n    }\n    if (obj2 === null) {\n      return throwNullException(\"obj2\");\n    }\n\n    if (obj1.constructor !== obj2.constructor) return false;\n\n    let boolVal = asOrNull(obj1, BoolValue);\n    if (boolVal !== null) {\n      return boolVal.value === asOrThrows(obj2, BoolValue).value;\n    }\n\n    let intVal = asOrNull(obj1, IntValue);\n    if (intVal !== null) {\n      return intVal.value === asOrThrows(obj2, IntValue).value;\n    }\n\n    let floatVal = asOrNull(obj1, FloatValue);\n    if (floatVal !== null) {\n      return floatVal.value === asOrThrows(obj2, FloatValue).value;\n    }\n\n    let val1 = asOrNull(obj1, Value);\n    let val2 = asOrNull(obj2, Value);\n    if (val1 !== null && val2 !== null) {\n      if (isEquatable(val1.valueObject) && isEquatable(val2.valueObject)) {\n        return val1.valueObject.Equals(val2.valueObject);\n      } else {\n        return val1.valueObject === val2.valueObject;\n      }\n    }\n\n    throw new Error(\n      \"FastRoughDefinitelyEquals: Unsupported runtime object type: \" +\n        obj1.constructor.name\n    );\n  }\n\n  public GetVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ): InkObject | null {\n    let varValue = this.GetRawVariableWithName(name, contextIndex);\n\n    // var varPointer = varValue as VariablePointerValue;\n    let varPointer = asOrNull(varValue, VariablePointerValue);\n    if (varPointer !== null) {\n      varValue = this.ValueAtVariablePointer(varPointer);\n    }\n\n    return varValue;\n  }\n\n  public TryGetDefaultVariableValue(name: string | null): InkObject | null {\n    let val = tryGetValueFromMap(this._defaultGlobalVariables, name, null);\n    return val.exists ? val.result : null;\n  }\n\n  public GlobalVariableExistsWithName(name: string) {\n    return (\n      this._globalVariables.has(name) ||\n      (this._defaultGlobalVariables !== null &&\n        this._defaultGlobalVariables.has(name))\n    );\n  }\n\n  public GetRawVariableWithName(name: string | null, contextIndex: number) {\n    let varValue: InkObject | null = null;\n\n    if (contextIndex == 0 || contextIndex == -1) {\n      let variableValue = null;\n      if (this.patch !== null) {\n        variableValue = this.patch.TryGetGlobal(name, null);\n        if (variableValue.exists) return variableValue.result!;\n      }\n\n      // this is a conditional assignment\n      variableValue = tryGetValueFromMap(this._globalVariables, name, null);\n      if (variableValue.exists) return variableValue.result;\n\n      if (this._defaultGlobalVariables !== null) {\n        variableValue = tryGetValueFromMap(\n          this._defaultGlobalVariables,\n          name,\n          null\n        );\n        if (variableValue.exists) return variableValue.result;\n      }\n\n      if (this._listDefsOrigin === null)\n        return throwNullException(\"VariablesState._listDefsOrigin\");\n      let listItemValue = this._listDefsOrigin.FindSingleItemListWithName(name);\n      if (listItemValue) return listItemValue;\n    }\n\n    varValue = this._callStack.GetTemporaryVariableWithName(name, contextIndex);\n\n    return varValue;\n  }\n\n  public ValueAtVariablePointer(pointer: VariablePointerValue) {\n    return this.GetVariableWithName(pointer.variableName, pointer.contextIndex);\n  }\n\n  public Assign(varAss: VariableAssignment, value: InkObject) {\n    let name = varAss.variableName;\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let contextIndex = -1;\n\n    let setGlobal = false;\n    if (varAss.isNewDeclaration) {\n      setGlobal = varAss.isGlobal;\n    } else {\n      setGlobal = this.GlobalVariableExistsWithName(name);\n    }\n\n    if (varAss.isNewDeclaration) {\n      // var varPointer = value as VariablePointerValue;\n      let varPointer = asOrNull(value, VariablePointerValue);\n      if (varPointer !== null) {\n        let fullyResolvedVariablePointer =\n          this.ResolveVariablePointer(varPointer);\n        value = fullyResolvedVariablePointer;\n      }\n    } else {\n      let existingPointer = null;\n      do {\n        // existingPointer = GetRawVariableWithName (name, contextIndex) as VariablePointerValue;\n        existingPointer = asOrNull(\n          this.GetRawVariableWithName(name, contextIndex),\n          VariablePointerValue\n        );\n        if (existingPointer != null) {\n          name = existingPointer.variableName;\n          contextIndex = existingPointer.contextIndex;\n          setGlobal = contextIndex == 0;\n        }\n      } while (existingPointer != null);\n    }\n\n    if (setGlobal) {\n      this.SetGlobal(name, value);\n    } else {\n      this._callStack.SetTemporaryVariable(\n        name,\n        value,\n        varAss.isNewDeclaration,\n        contextIndex\n      );\n    }\n  }\n\n  public SnapshotDefaultGlobals() {\n    this._defaultGlobalVariables = new Map(this._globalVariables);\n  }\n\n  public RetainListOriginsForAssignment(\n    oldValue: InkObject,\n    newValue: InkObject\n  ) {\n    let oldList = asOrThrows(oldValue, ListValue);\n    let newList = asOrThrows(newValue, ListValue);\n\n    if (oldList.value && newList.value && newList.value.Count == 0) {\n      newList.value.SetInitialOriginNames(oldList.value.originNames);\n    }\n  }\n\n  public SetGlobal(variableName: string | null, value: InkObject) {\n    let oldValue = null;\n\n    if (this.patch === null) {\n      oldValue = tryGetValueFromMap(this._globalVariables, variableName, null);\n    }\n\n    if (this.patch !== null) {\n      oldValue = this.patch.TryGetGlobal(variableName, null);\n      if (!oldValue.exists) {\n        oldValue = tryGetValueFromMap(\n          this._globalVariables,\n          variableName,\n          null\n        );\n      }\n    }\n\n    ListValue.RetainListOriginsForAssignment(oldValue!.result!, value);\n\n    if (variableName === null) {\n      return throwNullException(\"variableName\");\n    }\n\n    if (this.patch !== null) {\n      this.patch.SetGlobal(variableName, value);\n    } else {\n      this._globalVariables.set(variableName, value);\n    }\n\n    // TODO: Not sure !== is equivalent to !value.Equals(oldValue)\n    if (\n      this.variableChangedEvent !== null &&\n      oldValue !== null &&\n      value !== oldValue.result\n    ) {\n      if (this.batchObservingVariableChanges) {\n        if (this._changedVariablesForBatchObs === null) {\n          return throwNullException(\"this._changedVariablesForBatchObs\");\n        }\n\n        if (this.patch !== null) {\n          this.patch.AddChangedVariable(variableName);\n        } else if (this._changedVariablesForBatchObs !== null) {\n          this._changedVariablesForBatchObs.add(variableName);\n        }\n      } else {\n        this.variableChangedEvent(variableName, value);\n      }\n    }\n  }\n\n  public ResolveVariablePointer(varPointer: VariablePointerValue) {\n    let contextIndex = varPointer.contextIndex;\n\n    if (contextIndex == -1)\n      contextIndex = this.GetContextIndexOfVariableNamed(\n        varPointer.variableName\n      );\n\n    let valueOfVariablePointedTo = this.GetRawVariableWithName(\n      varPointer.variableName,\n      contextIndex\n    );\n\n    // var doubleRedirectionPointer = valueOfVariablePointedTo as VariablePointerValue;\n    let doubleRedirectionPointer = asOrNull(\n      valueOfVariablePointedTo,\n      VariablePointerValue\n    );\n    if (doubleRedirectionPointer != null) {\n      return doubleRedirectionPointer;\n    } else {\n      return new VariablePointerValue(varPointer.variableName, contextIndex);\n    }\n  }\n\n  public GetContextIndexOfVariableNamed(varName: string) {\n    if (this.GlobalVariableExistsWithName(varName)) return 0;\n\n    return this._callStack.currentElementIndex;\n  }\n\n  /**\n   * This function is specific to the js version of ink. It allows to register a\n   * callback that will be called when a variable changes. The original code uses\n   * `state.variableChangedEvent += callback` instead.\n   *\n   * @param {function} callback\n   */\n  public ObserveVariableChange(\n    callback: (variableName: string, newValue: InkObject) => void\n  ) {\n    this.variableChangedEventCallbacks.push(callback);\n  }\n\n  private _globalVariables: Map<string, InkObject>;\n  private _defaultGlobalVariables: Map<string, InkObject> = new Map();\n\n  private _callStack: CallStack;\n  private _changedVariablesForBatchObs: Set<string> | null = new Set();\n  private _listDefsOrigin: ListDefinitionsOrigin | null;\n}\n","// Taken from https://gist.github.com/blixt/f17b47c62508be59987b\n// Ink uses a seedable PRNG of which there is none in native javascript.\nexport class PRNG {\n  private seed: number;\n\n  constructor(seed: number) {\n    this.seed = seed % 2147483647;\n    if (this.seed <= 0) this.seed += 2147483646;\n  }\n  public next(): number {\n    return (this.seed = (this.seed * 48271) % 2147483647);\n  }\n  public nextFloat(): number {\n    return (this.next() - 1) / 2147483646;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class StatePatch {\n  get globals() {\n    return this._globals;\n  }\n  get changedVariables() {\n    return this._changedVariables;\n  }\n  get visitCounts() {\n    return this._visitCounts;\n  }\n  get turnIndices() {\n    return this._turnIndices;\n  }\n\n  constructor();\n  constructor(toCopy: StatePatch | null);\n  constructor() {\n    if (arguments.length === 1 && arguments[0] !== null) {\n      let toCopy = arguments[0] as StatePatch;\n      this._globals = new Map(toCopy._globals);\n      this._changedVariables = new Set(toCopy._changedVariables);\n      this._visitCounts = new Map(toCopy._visitCounts);\n      this._turnIndices = new Map(toCopy._turnIndices);\n    } else {\n      this._globals = new Map();\n      this._changedVariables = new Set();\n      this._visitCounts = new Map();\n      this._turnIndices = new Map();\n    }\n  }\n\n  public TryGetGlobal(name: string | null, /* out */ value: InkObject | null) {\n    if (name !== null && this._globals.has(name)) {\n      return { result: this._globals.get(name), exists: true };\n    }\n\n    return { result: value, exists: false };\n  }\n\n  public SetGlobal(name: string, value: InkObject) {\n    this._globals.set(name, value);\n  }\n\n  public AddChangedVariable(name: string) {\n    return this._changedVariables.add(name);\n  }\n\n  public TryGetVisitCount(container: Container, /* out */ count: number) {\n    if (this._visitCounts.has(container)) {\n      return { result: this._visitCounts.get(container), exists: true };\n    }\n\n    return { result: count, exists: false };\n  }\n\n  public SetVisitCount(container: Container, count: number) {\n    this._visitCounts.set(container, count);\n  }\n\n  public SetTurnIndex(container: Container, index: number) {\n    this._turnIndices.set(container, index);\n  }\n\n  public TryGetTurnIndex(container: Container, /* out */ index: number) {\n    if (this._turnIndices.has(container)) {\n      return { result: this._turnIndices.get(container), exists: true };\n    }\n\n    return { result: index, exists: false };\n  }\n\n  private _globals: Map<string, InkObject>;\n  private _changedVariables: Set<string> = new Set();\n  private _visitCounts: Map<Container, number> = new Map();\n  private _turnIndices: Map<Container, number> = new Map();\n}\n","export class SimpleJson {\n  public static TextToDictionary(text: string) {\n    return new SimpleJson.Reader(text).ToDictionary();\n  }\n\n  public static TextToArray(text: string) {\n    return new SimpleJson.Reader(text).ToArray();\n  }\n}\n\nexport namespace SimpleJson {\n  export class Reader {\n    constructor(text: string) {\n      this._rootObject = JSON.parse(text);\n    }\n\n    public ToDictionary() {\n      return this._rootObject as Record<string, any>;\n    }\n\n    public ToArray() {\n      return this._rootObject as any[];\n    }\n\n    private _rootObject: any[] | Record<string, any>;\n  }\n\n  // In C#, this class writes json tokens directly to a StringWriter or\n  // another stream. Here, a temporary hierarchy is created in the form\n  // of a javascript object, which is serialised in the `toString` method.\n  // See individual methods and properties for more information.\n  export class Writer {\n    public WriteObject(inner: (w: Writer) => void) {\n      this.WriteObjectStart();\n      inner(this);\n      this.WriteObjectEnd();\n    }\n\n    // Add a new object.\n    public WriteObjectStart() {\n      this.StartNewObject(true);\n\n      let newObject: Record<string, any> = {};\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This object is created as the value of a property,\n        // inside an other object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This object is created as the child of an array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This object is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Object)\n      );\n    }\n\n    public WriteObjectEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Write a property name / value pair to the current object.\n    public WriteProperty(\n      name: any,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      innerOrContent: ((w: Writer) => void) | string | boolean | null\n    ) {\n      this.WritePropertyStart(name);\n      if (arguments[1] instanceof Function) {\n        let inner = arguments[1];\n        inner(this);\n      } else {\n        let content: string | boolean | null = arguments[1];\n        this.Write(content);\n      }\n      this.WritePropertyEnd();\n    }\n\n    // Int and Float are separate calls, since there both are\n    // numbers in JavaScript, but need to be handled differently.\n\n    public WriteIntProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteInt(content);\n      this.WritePropertyEnd();\n    }\n\n    public WriteFloatProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteFloat(content);\n      this.WritePropertyEnd();\n    }\n\n    // Prepare a new property name, which will be use to add the\n    // new object when calling _addToCurrentObject() from a Write\n    // method.\n    public WritePropertyStart(name: any) {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._propertyNameStack.push(name);\n\n      this.IncrementChildCount();\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n    }\n\n    public WritePropertyEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Property);\n      this.Assert(this.childCount === 1);\n      this._stateStack.pop();\n    }\n\n    // Prepare a new property name, except this time, the property name\n    // will be created by concatenating all the strings passed to\n    // WritePropertyNameInner.\n    public WritePropertyNameStart() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this.IncrementChildCount();\n\n      this._currentPropertyName = \"\";\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.PropertyName)\n      );\n    }\n\n    public WritePropertyNameEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._propertyNameStack.push(this._currentPropertyName!);\n      this._currentPropertyName = null;\n      this._stateStack.pop();\n    }\n\n    public WritePropertyNameInner(str: string) {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._currentPropertyName += str;\n    }\n\n    // Add a new array.\n    public WriteArrayStart() {\n      this.StartNewObject(true);\n\n      let newObject: any[] = [];\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This array is created as the value of a property,\n        // inside an object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This array is created as the child of another array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This array is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Array)\n      );\n    }\n\n    public WriteArrayEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Array);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Add the value to the appropriate collection (array / object), given the current\n    // context.\n    public Write(\n      value: number | string | boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      escape: boolean = true\n    ) {\n      if (value === null) {\n        console.error(\"Warning: trying to write a null value\");\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteBool(value: boolean | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteInt(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n\n      // Math.floor is used as a precaution:\n      //     1. to ensure that the value is written as an integer\n      //        (without a fractional part -> 1 instead of 1.0), even\n      //        though it should be the default behaviour of\n      //        JSON.serialize;\n      //     2. to ensure that if a floating number is passed\n      //        accidentally, it's converted to an integer.\n      //\n      // This guarantees savegame compatibility with the reference\n      // implementation.\n      this._addToCurrentObject(Math.floor(value));\n    }\n\n    // Since JSON doesn't support NaN and Infinity, these values\n    // are converted here.\n    public WriteFloat(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      if (value == Number.POSITIVE_INFINITY) {\n        this._addToCurrentObject(3.4e38);\n      } else if (value == Number.NEGATIVE_INFINITY) {\n        this._addToCurrentObject(-3.4e38);\n      } else if (isNaN(value)) {\n        this._addToCurrentObject(0.0);\n      } else {\n        this._addToCurrentObject(value);\n      }\n    }\n\n    public WriteNull() {\n      this.StartNewObject(false);\n      this._addToCurrentObject(null);\n    }\n\n    // Prepare a string before adding it to the current collection in\n    // WriteStringEnd(). The string will be a concatenation of all the\n    // strings passed to WriteStringInner.\n    public WriteStringStart() {\n      this.StartNewObject(false);\n      this._currentString = \"\";\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.String)\n      );\n    }\n\n    public WriteStringEnd() {\n      this.Assert(this.state == SimpleJson.Writer.State.String);\n      this._stateStack.pop();\n      this._addToCurrentObject(this._currentString);\n      this._currentString = null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public WriteStringInner(str: string | null, escape: boolean = true) {\n      this.Assert(this.state === SimpleJson.Writer.State.String);\n\n      if (str === null) {\n        console.error(\"Warning: trying to write a null string\");\n        return;\n      }\n\n      this._currentString += str;\n    }\n\n    // Serialise the root object into a JSON string.\n    public toString() {\n      if (this._jsonObject === null) {\n        return \"\";\n      }\n\n      return JSON.stringify(this._jsonObject);\n    }\n\n    // Prepare the state stack when adding new objects / values.\n    private StartNewObject(container: boolean) {\n      if (container) {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.None ||\n            this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      } else {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      }\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(this.childCount === 0);\n      }\n\n      if (\n        this.state === SimpleJson.Writer.State.Array ||\n        this.state === SimpleJson.Writer.State.Property\n      ) {\n        this.IncrementChildCount();\n      }\n    }\n\n    // These getters peek all the different stacks.\n\n    private get state() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].type;\n      } else {\n        return SimpleJson.Writer.State.None;\n      }\n    }\n\n    private get childCount() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].childCount;\n      } else {\n        return 0;\n      }\n    }\n\n    private get currentCollection() {\n      if (this._collectionStack.length > 0) {\n        return this._collectionStack[this._collectionStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private get currentPropertyName() {\n      if (this._propertyNameStack.length > 0) {\n        return this._propertyNameStack[this._propertyNameStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private IncrementChildCount() {\n      this.Assert(this._stateStack.length > 0);\n      let currEl = this._stateStack.pop()!;\n      currEl.childCount++;\n      this._stateStack.push(currEl);\n    }\n\n    private Assert(condition: boolean) {\n      if (!condition) throw Error(\"Assert failed while writing JSON\");\n    }\n\n    // This method did not exist in the original C# code. It adds\n    // the given value to the current collection (used by Write methods).\n    private _addToCurrentObject(value: number | string | boolean | null) {\n      this.Assert(this.currentCollection !== null);\n      if (this.state === SimpleJson.Writer.State.Array) {\n        this.Assert(Array.isArray(this.currentCollection));\n        (this.currentCollection as any[]).push(value);\n      } else if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(!Array.isArray(this.currentCollection));\n        this.Assert(this.currentPropertyName !== null);\n        (this.currentCollection as Record<string, any>)[\n          this.currentPropertyName!\n        ] = value;\n        this._propertyNameStack.pop();\n      }\n    }\n\n    // In addition to `_stateStack` present in the original code,\n    // this implementation of SimpleJson use two other stacks and two\n    // temporary variables holding the current context.\n\n    // Used to keep track of the current property name being built\n    // with `WritePropertyNameStart`, `WritePropertyNameInner` and\n    // `WritePropertyNameEnd`.\n    private _currentPropertyName: string | null = null;\n\n    // Used to keep track of the current string value being built\n    // with `WriteStringStart`, `WriteStringInner` and\n    // `WriteStringEnd`.\n    private _currentString: string | null = null;\n\n    private _stateStack: SimpleJson.Writer.StateElement[] = [];\n\n    // Keep track of the current collection being built (either an array\n    // or an object). For instance, at the '?' step during the hiarchy\n    // creation, this hierarchy:\n    // [3, {a: [b, ?]}] will have this corresponding stack:\n    // (bottom) [Array, Object, Array] (top)\n    private _collectionStack: Array<any[] | Record<string, any>> = [];\n\n    // Keep track of the current property being assigned. For instance, at\n    // the '?' step during the hiarchy creation, this hierarchy:\n    // [3, {a: [b, {c: ?}]}] will have this corresponding stack:\n    // (bottom) [a, c] (top)\n    private _propertyNameStack: string[] = [];\n\n    // Object containing the entire hiearchy.\n    private _jsonObject: Record<string, any> | any[] | null = null;\n  }\n\n  export namespace Writer {\n    export enum State {\n      None,\n      Object,\n      Array,\n      Property,\n      PropertyName,\n      String,\n    }\n\n    export class StateElement {\n      public type: SimpleJson.Writer.State = SimpleJson.Writer.State.None;\n      public childCount: number = 0;\n\n      constructor(type: SimpleJson.Writer.State) {\n        this.type = type;\n      }\n    }\n  }\n}\n","import { CallStack } from \"./CallStack\";\nimport { Choice } from \"./Choice\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { InkObject } from \"./Object\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Story } from \"./Story\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Flow {\n  public name: string;\n  public callStack: CallStack;\n  public outputStream: InkObject[];\n  public currentChoices: Choice[];\n\n  constructor(name: String, story: Story);\n  constructor(name: String, story: Story, jObject: Record<string, any>);\n  constructor() {\n    let name = arguments[0] as string;\n    let story = arguments[1] as Story;\n\n    this.name = name;\n    this.callStack = new CallStack(story);\n\n    if (arguments[2]) {\n      let jObject = arguments[2] as Record<string, any>;\n\n      this.callStack.SetJsonToken(jObject[\"callstack\"], story);\n      this.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"]\n      );\n      this.currentChoices = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"currentChoices\"]\n      ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      if (typeof jChoiceThreadsObj !== \"undefined\") {\n        this.LoadFlowChoiceThreads(jChoiceThreadsObj, story);\n      }\n    } else {\n      this.outputStream = [];\n      this.currentChoices = [];\n    }\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WriteProperty(\"callstack\", (w) => this.callStack.WriteJson(w));\n    writer.WriteProperty(\"outputStream\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.outputStream)\n    );\n\n    let hasChoiceThreads = false;\n    for (let c of this.currentChoices) {\n      if (c.threadAtGeneration === null)\n        return throwNullException(\"c.threadAtGeneration\");\n\n      c.originalThreadIndex = c.threadAtGeneration.threadIndex;\n\n      if (this.callStack.ThreadWithIndex(c.originalThreadIndex) === null) {\n        if (!hasChoiceThreads) {\n          hasChoiceThreads = true;\n          writer.WritePropertyStart(\"choiceThreads\");\n          writer.WriteObjectStart();\n        }\n\n        writer.WritePropertyStart(c.originalThreadIndex);\n        c.threadAtGeneration.WriteJson(writer);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (hasChoiceThreads) {\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteProperty(\"currentChoices\", (w) => {\n      w.WriteArrayStart();\n      for (let c of this.currentChoices) {\n        JsonSerialisation.WriteChoice(w, c);\n      }\n      w.WriteArrayEnd();\n    });\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadFlowChoiceThreads(\n    jChoiceThreads: Record<string, any>,\n    story: Story\n  ) {\n    for (let choice of this.currentChoices) {\n      let foundActiveThread = this.callStack.ThreadWithIndex(\n        choice.originalThreadIndex\n      );\n      if (foundActiveThread !== null) {\n        choice.threadAtGeneration = foundActiveThread.Copy();\n      } else {\n        let jSavedChoiceThread =\n          jChoiceThreads[`${choice.originalThreadIndex}`];\n        choice.threadAtGeneration = new CallStack.Thread(\n          jSavedChoiceThread,\n          story\n        );\n      }\n    }\n  }\n}\n","import { CallStack } from \"./CallStack\";\nimport { VariablesState } from \"./VariablesState\";\nimport { ValueType, Value, StringValue, ListValue } from \"./Value\";\nimport { PushPopType } from \"./PushPop\";\nimport { Tag } from \"./Tag\";\nimport { Glue } from \"./Glue\";\nimport { Path } from \"./Path\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { PRNG } from \"./PRNG\";\nimport { Void } from \"./Void\";\nimport { Pointer } from \"./Pointer\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { Choice } from \"./Choice\";\nimport { asOrNull, asOrThrows, nullIfUndefined } from \"./TypeAssertion\";\nimport { Debug } from \"./Debug\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { throwNullException } from \"./NullException\";\nimport { Story } from \"./Story\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Flow } from \"./Flow\";\nimport { InkList } from \"./InkList\";\n\nexport class StoryState {\n  // Backward compatible changes since v8:\n  // v10: dynamic tags\n  // v9:  multi-flows\n  public readonly kInkSaveStateVersion = 10;\n  public readonly kMinCompatibleLoadVersion = 8;\n\n  public onDidLoadState: (() => void) | null = null;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public ToJson(indented: boolean = false) {\n    let writer = new SimpleJson.Writer();\n    this.WriteJson(writer);\n    return writer.toString();\n  }\n  public toJson(indented: boolean = false) {\n    return this.ToJson(indented);\n  }\n\n  public LoadJson(json: string) {\n    let jObject = SimpleJson.TextToDictionary(json);\n    this.LoadJsonObj(jObject);\n    if (this.onDidLoadState !== null) this.onDidLoadState();\n  }\n\n  public VisitCountAtPathString(pathString: string) {\n    let visitCountOut;\n\n    if (this._patch !== null) {\n      let container = this.story.ContentAtPath(new Path(pathString)).container;\n      if (container === null)\n        throw new Error(\"Content at path not found: \" + pathString);\n\n      visitCountOut = this._patch.TryGetVisitCount(container, 0);\n      if (visitCountOut.exists) return visitCountOut.result;\n    }\n\n    visitCountOut = tryGetValueFromMap(this._visitCounts, pathString, null);\n    if (visitCountOut.exists) return visitCountOut.result;\n\n    return 0;\n  }\n\n  public VisitCountForContainer(container: Container | null): number {\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    if (!container.visitsShouldBeCounted) {\n      this.story.Error(\n        \"Read count for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n      return 0;\n    }\n\n    if (this._patch !== null) {\n      let count = this._patch.TryGetVisitCount(container, 0);\n      if (count.exists) {\n        return count.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let count2 = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count2.exists) {\n      return count2.result!;\n    }\n\n    return 0;\n  }\n\n  public IncrementVisitCountForContainer(container: Container) {\n    if (this._patch !== null) {\n      let currCount = this.VisitCountForContainer(container);\n      currCount++;\n      this._patch.SetVisitCount(container, currCount);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    let count = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count.exists) {\n      this._visitCounts.set(containerPathStr, count.result! + 1);\n    } else {\n      this._visitCounts.set(containerPathStr, 1);\n    }\n  }\n\n  public RecordTurnIndexVisitToContainer(container: Container) {\n    if (this._patch !== null) {\n      this._patch.SetTurnIndex(container, this.currentTurnIndex);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    this._turnIndices.set(containerPathStr, this.currentTurnIndex);\n  }\n\n  public TurnsSinceForContainer(container: Container) {\n    if (!container.turnIndexShouldBeCounted) {\n      this.story.Error(\n        \"TURNS_SINCE() for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n    }\n\n    if (this._patch !== null) {\n      let index = this._patch.TryGetTurnIndex(container, 0);\n      if (index.exists) {\n        return this.currentTurnIndex - index.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let index2 = tryGetValueFromMap(this._turnIndices, containerPathStr, 0);\n    if (index2.exists) {\n      return this.currentTurnIndex - index2.result!;\n    } else {\n      return -1;\n    }\n  }\n\n  get callstackDepth() {\n    return this.callStack.depth;\n  }\n\n  get outputStream() {\n    return this._currentFlow.outputStream;\n  }\n\n  get currentChoices() {\n    // If we can continue generating text content rather than choices,\n    // then we reflect the choice list as being empty, since choices\n    // should always come at the end.\n    if (this.canContinue) return [];\n    return this._currentFlow.currentChoices;\n  }\n\n  get generatedChoices() {\n    return this._currentFlow.currentChoices;\n  }\n\n  get currentErrors() {\n    return this._currentErrors;\n  }\n  private _currentErrors: string[] | null = null;\n\n  get currentWarnings() {\n    return this._currentWarnings;\n  }\n  private _currentWarnings: string[] | null = null;\n\n  get variablesState() {\n    return this._variablesState;\n  }\n  set variablesState(value) {\n    this._variablesState = value;\n  }\n  private _variablesState: VariablesState;\n\n  get callStack() {\n    return this._currentFlow.callStack;\n  }\n\n  get evaluationStack() {\n    return this._evaluationStack;\n  }\n  private _evaluationStack: InkObject[];\n\n  public divertedPointer: Pointer = Pointer.Null;\n\n  get currentTurnIndex() {\n    return this._currentTurnIndex;\n  }\n  set currentTurnIndex(value) {\n    this._currentTurnIndex = value;\n  }\n  private _currentTurnIndex: number = 0;\n\n  public storySeed: number = 0;\n  public previousRandom: number = 0;\n  public didSafeExit: boolean = false;\n\n  public story: Story;\n\n  get currentPathString() {\n    let pointer = this.currentPointer;\n    if (pointer.isNull) {\n      return null;\n    } else {\n      if (pointer.path === null) {\n        return throwNullException(\"pointer.path\");\n      }\n      return pointer.path.toString();\n    }\n  }\n\n  get currentPointer() {\n    return this.callStack.currentElement.currentPointer.copy();\n  }\n\n  set currentPointer(value) {\n    this.callStack.currentElement.currentPointer = value.copy();\n  }\n\n  get previousPointer() {\n    return this.callStack.currentThread.previousPointer.copy();\n  }\n\n  set previousPointer(value) {\n    this.callStack.currentThread.previousPointer = value.copy();\n  }\n\n  get canContinue() {\n    return !this.currentPointer.isNull && !this.hasError;\n  }\n\n  get hasError() {\n    return this.currentErrors != null && this.currentErrors.length > 0;\n  }\n\n  get hasWarning() {\n    return this.currentWarnings != null && this.currentWarnings.length > 0;\n  }\n\n  get currentText() {\n    if (this._outputStreamTextDirty) {\n      let sb = new StringBuilder();\n\n      let inTag: boolean = false;\n\n      for (let outputObj of this.outputStream) {\n        // var textContent = outputObj as StringValue;\n        let textContent = asOrNull(outputObj, StringValue);\n        if (!inTag && textContent !== null) {\n          sb.Append(textContent.value);\n        } else {\n          let controlCommand = asOrNull(outputObj, ControlCommand);\n          if (controlCommand !== null) {\n            if (\n              controlCommand.commandType == ControlCommand.CommandType.BeginTag\n            ) {\n              inTag = true;\n            } else if (\n              controlCommand.commandType == ControlCommand.CommandType.EndTag\n            ) {\n              inTag = false;\n            }\n          }\n        }\n      }\n\n      this._currentText = this.CleanOutputWhitespace(sb.toString());\n      this._outputStreamTextDirty = false;\n    }\n\n    return this._currentText;\n  }\n  private _currentText: string | null = null;\n\n  public CleanOutputWhitespace(str: string) {\n    let sb = new StringBuilder();\n\n    let currentWhitespaceStart = -1;\n    let startOfLine = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      let c = str.charAt(i);\n\n      let isInlineWhitespace = c == \" \" || c == \"\\t\";\n\n      if (isInlineWhitespace && currentWhitespaceStart == -1)\n        currentWhitespaceStart = i;\n\n      if (!isInlineWhitespace) {\n        if (\n          c != \"\\n\" &&\n          currentWhitespaceStart > 0 &&\n          currentWhitespaceStart != startOfLine\n        ) {\n          sb.Append(\" \");\n        }\n        currentWhitespaceStart = -1;\n      }\n\n      if (c == \"\\n\") startOfLine = i + 1;\n\n      if (!isInlineWhitespace) sb.Append(c);\n    }\n\n    return sb.toString();\n  }\n\n  get currentTags() {\n    if (this._outputStreamTagsDirty) {\n      this._currentTags = [];\n      let inTag: boolean = false;\n      let sb = new StringBuilder();\n\n      for (let outputObj of this.outputStream) {\n        let controlCommand = asOrNull(outputObj, ControlCommand);\n        if (controlCommand != null) {\n          if (\n            controlCommand.commandType == ControlCommand.CommandType.BeginTag\n          ) {\n            if (inTag && sb.Length > 0) {\n              let txt = this.CleanOutputWhitespace(sb.toString());\n              this._currentTags.push(txt);\n              sb.Clear();\n            }\n            inTag = true;\n          } else if (\n            controlCommand.commandType == ControlCommand.CommandType.EndTag\n          ) {\n            if (sb.Length > 0) {\n              let txt = this.CleanOutputWhitespace(sb.toString());\n              this._currentTags.push(txt);\n              sb.Clear();\n            }\n            inTag = false;\n          }\n        } else if (inTag) {\n          let strVal = asOrNull(outputObj, StringValue);\n          if (strVal !== null) {\n            sb.Append(strVal.value);\n          }\n        } else {\n          let tag = asOrNull(outputObj, Tag);\n          if (tag != null && tag.text != null && tag.text.length > 0) {\n            this._currentTags.push(tag.text); // tag.text has whitespae already cleaned\n          }\n        }\n      }\n\n      if (sb.Length > 0) {\n        let txt = this.CleanOutputWhitespace(sb.toString());\n        this._currentTags.push(txt);\n        sb.Clear();\n      }\n\n      this._outputStreamTagsDirty = false;\n    }\n\n    return this._currentTags;\n  }\n  private _currentTags: string[] | null = null;\n\n  get currentFlowName() {\n    return this._currentFlow.name;\n  }\n\n  get currentFlowIsDefaultFlow() {\n    return this._currentFlow.name == this.kDefaultFlowName;\n  }\n\n  get aliveFlowNames() {\n    if (this._aliveFlowNamesDirty) {\n      this._aliveFlowNames = [];\n\n      if (this._namedFlows != null) {\n        for (let flowName of this._namedFlows.keys()) {\n          if (flowName != this.kDefaultFlowName) {\n            this._aliveFlowNames.push(flowName);\n          }\n        }\n      }\n\n      this._aliveFlowNamesDirty = false;\n    }\n\n    return this._aliveFlowNames;\n  }\n\n  get inExpressionEvaluation() {\n    return this.callStack.currentElement.inExpressionEvaluation;\n  }\n  set inExpressionEvaluation(value) {\n    this.callStack.currentElement.inExpressionEvaluation = value;\n  }\n\n  constructor(story: Story) {\n    this.story = story;\n\n    this._currentFlow = new Flow(this.kDefaultFlowName, story);\n    this.OutputStreamDirty();\n\n    this._aliveFlowNamesDirty = true;\n    this._evaluationStack = [];\n\n    this._variablesState = new VariablesState(\n      this.callStack,\n      story.listDefinitions\n    );\n\n    this._visitCounts = new Map();\n    this._turnIndices = new Map();\n    this.currentTurnIndex = -1;\n\n    let timeSeed = new Date().getTime();\n    this.storySeed = new PRNG(timeSeed).next() % 100;\n    this.previousRandom = 0;\n\n    this.GoToStart();\n  }\n\n  public GoToStart() {\n    this.callStack.currentElement.currentPointer = Pointer.StartOf(\n      this.story.mainContentContainer\n    );\n  }\n\n  public SwitchFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.SwitchFlow\");\n\n    if (this._namedFlows === null) {\n      this._namedFlows = new Map();\n      this._namedFlows.set(this.kDefaultFlowName, this._currentFlow);\n    }\n\n    if (flowName === this._currentFlow.name) {\n      return;\n    }\n\n    let flow: Flow;\n    let content = tryGetValueFromMap(this._namedFlows, flowName, null);\n    if (content.exists) {\n      flow = content.result!;\n    } else {\n      flow = new Flow(flowName, this.story);\n      this._namedFlows.set(flowName, flow);\n      this._aliveFlowNamesDirty = true;\n    }\n\n    this._currentFlow = flow;\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this.OutputStreamDirty();\n  }\n\n  public SwitchToDefaultFlow_Internal() {\n    if (this._namedFlows === null) return;\n    this.SwitchFlow_Internal(this.kDefaultFlowName);\n  }\n\n  public RemoveFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.DestroyFlow\");\n    if (flowName === this.kDefaultFlowName)\n      throw new Error(\"Cannot destroy default flow\");\n\n    if (this._currentFlow.name === flowName) {\n      this.SwitchToDefaultFlow_Internal();\n    }\n\n    if (this._namedFlows === null)\n      return throwNullException(\"this._namedFlows\");\n    this._namedFlows.delete(flowName);\n    this._aliveFlowNamesDirty = true;\n  }\n\n  public CopyAndStartPatching() {\n    let copy = new StoryState(this.story);\n\n    copy._patch = new StatePatch(this._patch);\n\n    copy._currentFlow.name = this._currentFlow.name;\n    copy._currentFlow.callStack = new CallStack(this._currentFlow.callStack);\n    copy._currentFlow.currentChoices.push(...this._currentFlow.currentChoices);\n    copy._currentFlow.outputStream.push(...this._currentFlow.outputStream);\n    copy.OutputStreamDirty();\n\n    if (this._namedFlows !== null) {\n      copy._namedFlows = new Map();\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        copy._namedFlows.set(namedFlowKey, namedFlowValue);\n        copy._aliveFlowNamesDirty = true;\n      }\n      copy._namedFlows.set(this._currentFlow.name, copy._currentFlow);\n    }\n\n    if (this.hasError) {\n      copy._currentErrors = [];\n      copy._currentErrors.push(...(this.currentErrors || []));\n    }\n\n    if (this.hasWarning) {\n      copy._currentWarnings = [];\n      copy._currentWarnings.push(...(this.currentWarnings || []));\n    }\n\n    copy.variablesState = this.variablesState;\n    copy.variablesState.callStack = copy.callStack;\n    copy.variablesState.patch = copy._patch;\n\n    copy.evaluationStack.push(...this.evaluationStack);\n\n    if (!this.divertedPointer.isNull)\n      copy.divertedPointer = this.divertedPointer.copy();\n\n    copy.previousPointer = this.previousPointer.copy();\n\n    copy._visitCounts = this._visitCounts;\n    copy._turnIndices = this._turnIndices;\n\n    copy.currentTurnIndex = this.currentTurnIndex;\n    copy.storySeed = this.storySeed;\n    copy.previousRandom = this.previousRandom;\n\n    copy.didSafeExit = this.didSafeExit;\n\n    return copy;\n  }\n\n  public RestoreAfterPatch() {\n    this.variablesState.callStack = this.callStack;\n    this.variablesState.patch = this._patch;\n  }\n\n  public ApplyAnyPatch() {\n    if (this._patch === null) return;\n\n    this.variablesState.ApplyPatch();\n\n    for (let [key, value] of this._patch.visitCounts)\n      this.ApplyCountChanges(key, value, true);\n\n    for (let [key, value] of this._patch.turnIndices)\n      this.ApplyCountChanges(key, value, false);\n\n    this._patch = null;\n  }\n\n  public ApplyCountChanges(\n    container: Container,\n    newCount: number,\n    isVisit: boolean\n  ) {\n    let counts = isVisit ? this._visitCounts : this._turnIndices;\n    counts.set(container.path.toString(), newCount);\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WritePropertyStart(\"flows\");\n    writer.WriteObjectStart();\n\n    // NOTE: Never pass `WriteJson` directly as an argument to `WriteProperty`.\n    // Call it inside a function to make sure `this` is correctly bound\n    // and passed down the call hierarchy.\n\n    if (this._namedFlows !== null) {\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        writer.WriteProperty(namedFlowKey, (w) => namedFlowValue.WriteJson(w));\n      }\n    } else {\n      writer.WriteProperty(this._currentFlow.name, (w) =>\n        this._currentFlow.WriteJson(w)\n      );\n    }\n\n    writer.WriteObjectEnd();\n    writer.WritePropertyEnd();\n\n    writer.WriteProperty(\"currentFlowName\", this._currentFlow.name);\n\n    writer.WriteProperty(\"variablesState\", (w) =>\n      this.variablesState.WriteJson(w)\n    );\n\n    writer.WriteProperty(\"evalStack\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.evaluationStack)\n    );\n\n    if (!this.divertedPointer.isNull) {\n      if (this.divertedPointer.path === null) {\n        return throwNullException(\"divertedPointer\");\n      }\n      writer.WriteProperty(\n        \"currentDivertTarget\",\n        this.divertedPointer.path.componentsString\n      );\n    }\n\n    writer.WriteProperty(\"visitCounts\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._visitCounts)\n    );\n    writer.WriteProperty(\"turnIndices\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._turnIndices)\n    );\n\n    writer.WriteIntProperty(\"turnIdx\", this.currentTurnIndex);\n    writer.WriteIntProperty(\"storySeed\", this.storySeed);\n    writer.WriteIntProperty(\"previousRandom\", this.previousRandom);\n\n    writer.WriteIntProperty(\"inkSaveVersion\", this.kInkSaveStateVersion);\n\n    writer.WriteIntProperty(\"inkFormatVersion\", Story.inkVersionCurrent);\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadJsonObj(value: Record<string, any>) {\n    let jObject = value;\n\n    let jSaveVersion = jObject[\"inkSaveVersion\"];\n    if (jSaveVersion == null) {\n      throw new Error(\"ink save format incorrect, can't load.\");\n    } else if (parseInt(jSaveVersion) < this.kMinCompatibleLoadVersion) {\n      throw new Error(\n        \"Ink save format isn't compatible with the current version (saw '\" +\n          jSaveVersion +\n          \"', but minimum is \" +\n          this.kMinCompatibleLoadVersion +\n          \"), so can't load.\"\n      );\n    }\n\n    let flowsObj = jObject[\"flows\"];\n    if (flowsObj != null) {\n      let flowsObjDict = flowsObj as Record<string, any>;\n\n      // Single default flow\n      if (Object.keys(flowsObjDict).length === 1) {\n        this._namedFlows = null;\n      } else if (this._namedFlows === null) {\n        this._namedFlows = new Map();\n      } else {\n        this._namedFlows.clear();\n      }\n\n      let flowsObjDictEntries = Object.entries(flowsObjDict);\n      for (let [namedFlowObjKey, namedFlowObjValue] of flowsObjDictEntries) {\n        let name = namedFlowObjKey;\n        let flowObj = namedFlowObjValue as Record<string, any>;\n\n        let flow = new Flow(name, this.story, flowObj);\n\n        if (Object.keys(flowsObjDict).length === 1) {\n          this._currentFlow = new Flow(name, this.story, flowObj);\n        } else {\n          if (this._namedFlows === null)\n            return throwNullException(\"this._namedFlows\");\n          this._namedFlows.set(name, flow);\n        }\n      }\n\n      if (this._namedFlows != null && this._namedFlows.size > 1) {\n        let currFlowName = jObject[\"currentFlowName\"] as string;\n        // Adding a bang at the end, because we're trusting the save, as\n        // done in upstream.  If the save is corrupted, the execution\n        // is undefined.\n        this._currentFlow = this._namedFlows.get(currFlowName)!;\n      }\n    } else {\n      this._namedFlows = null;\n      this._currentFlow.name = this.kDefaultFlowName;\n      this._currentFlow.callStack.SetJsonToken(\n        jObject[\"callstackThreads\"] as Record<string, any>,\n        this.story\n      );\n      this._currentFlow.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"] as any[]\n      );\n      this._currentFlow.currentChoices =\n        JsonSerialisation.JArrayToRuntimeObjList(\n          jObject[\"currentChoices\"] as any[]\n        ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      this._currentFlow.LoadFlowChoiceThreads(jChoiceThreadsObj, this.story);\n    }\n\n    this.OutputStreamDirty();\n    this._aliveFlowNamesDirty = true;\n\n    this.variablesState.SetJsonToken(jObject[\"variablesState\"]);\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this._evaluationStack = JsonSerialisation.JArrayToRuntimeObjList(\n      jObject[\"evalStack\"]\n    );\n\n    let currentDivertTargetPath = jObject[\"currentDivertTarget\"];\n    if (currentDivertTargetPath != null) {\n      let divertPath = new Path(currentDivertTargetPath.toString());\n      this.divertedPointer = this.story.PointerAtPath(divertPath);\n    }\n\n    this._visitCounts = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"visitCounts\"]\n    );\n    this._turnIndices = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"turnIndices\"]\n    );\n    this.currentTurnIndex = parseInt(jObject[\"turnIdx\"]);\n    this.storySeed = parseInt(jObject[\"storySeed\"]);\n    this.previousRandom = parseInt(jObject[\"previousRandom\"]);\n  }\n\n  public ResetErrors() {\n    this._currentErrors = null;\n    this._currentWarnings = null;\n  }\n  public ResetOutput(objs: InkObject[] | null = null) {\n    this.outputStream.length = 0;\n    if (objs !== null) this.outputStream.push(...objs);\n    this.OutputStreamDirty();\n  }\n\n  public PushToOutputStream(obj: InkObject | null) {\n    // var text = obj as StringValue;\n    let text = asOrNull(obj, StringValue);\n    if (text !== null) {\n      let listText = this.TrySplittingHeadTailWhitespace(text);\n      if (listText !== null) {\n        for (let textObj of listText) {\n          this.PushToOutputStreamIndividual(textObj);\n        }\n        this.OutputStreamDirty();\n        return;\n      }\n    }\n\n    this.PushToOutputStreamIndividual(obj);\n    this.OutputStreamDirty();\n  }\n\n  public PopFromOutputStream(count: number) {\n    this.outputStream.splice(this.outputStream.length - count, count);\n    this.OutputStreamDirty();\n  }\n\n  public TrySplittingHeadTailWhitespace(single: StringValue) {\n    let str = single.value;\n    if (str === null) {\n      return throwNullException(\"single.value\");\n    }\n\n    let headFirstNewlineIdx = -1;\n    let headLastNewlineIdx = -1;\n    for (let i = 0; i < str.length; i++) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (headFirstNewlineIdx == -1) headFirstNewlineIdx = i;\n        headLastNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    let tailLastNewlineIdx = -1;\n    let tailFirstNewlineIdx = -1;\n    for (let i = str.length - 1; i >= 0; i--) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (tailLastNewlineIdx == -1) tailLastNewlineIdx = i;\n        tailFirstNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    // No splitting to be done?\n    if (headFirstNewlineIdx == -1 && tailLastNewlineIdx == -1) return null;\n\n    let listTexts: StringValue[] = [];\n    let innerStrStart = 0;\n    let innerStrEnd = str.length;\n\n    if (headFirstNewlineIdx != -1) {\n      if (headFirstNewlineIdx > 0) {\n        let leadingSpaces = new StringValue(\n          str.substring(0, headFirstNewlineIdx)\n        );\n        listTexts.push(leadingSpaces);\n      }\n      listTexts.push(new StringValue(\"\\n\"));\n      innerStrStart = headLastNewlineIdx + 1;\n    }\n\n    if (tailLastNewlineIdx != -1) {\n      innerStrEnd = tailFirstNewlineIdx;\n    }\n\n    if (innerStrEnd > innerStrStart) {\n      let innerStrText = str.substring(innerStrStart, innerStrEnd);\n      listTexts.push(new StringValue(innerStrText));\n    }\n\n    if (tailLastNewlineIdx != -1 && tailFirstNewlineIdx > headLastNewlineIdx) {\n      listTexts.push(new StringValue(\"\\n\"));\n      if (tailLastNewlineIdx < str.length - 1) {\n        let numSpaces = str.length - tailLastNewlineIdx - 1;\n        let trailingSpaces = new StringValue(\n          str.substring(\n            tailLastNewlineIdx + 1,\n            tailLastNewlineIdx + 1 + numSpaces\n          )\n        );\n        listTexts.push(trailingSpaces);\n      }\n    }\n\n    return listTexts;\n  }\n\n  public PushToOutputStreamIndividual(obj: InkObject | null) {\n    let glue = asOrNull(obj, Glue);\n    let text = asOrNull(obj, StringValue);\n\n    let includeInOutput = true;\n\n    if (glue) {\n      this.TrimNewlinesFromOutputStream();\n      includeInOutput = true;\n    } else if (text) {\n      let functionTrimIndex = -1;\n      let currEl = this.callStack.currentElement;\n      if (currEl.type == PushPopType.Function) {\n        functionTrimIndex = currEl.functionStartInOutputStream;\n      }\n\n      let glueTrimIndex = -1;\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let o = this.outputStream[i];\n        let c = o instanceof ControlCommand ? o : null;\n        let g = o instanceof Glue ? o : null;\n\n        if (g != null) {\n          glueTrimIndex = i;\n          break;\n        } else if (\n          c != null &&\n          c.commandType == ControlCommand.CommandType.BeginString\n        ) {\n          if (i >= functionTrimIndex) {\n            functionTrimIndex = -1;\n          }\n          break;\n        }\n      }\n\n      let trimIndex = -1;\n      if (glueTrimIndex != -1 && functionTrimIndex != -1)\n        trimIndex = Math.min(functionTrimIndex, glueTrimIndex);\n      else if (glueTrimIndex != -1) trimIndex = glueTrimIndex;\n      else trimIndex = functionTrimIndex;\n\n      if (trimIndex != -1) {\n        if (text.isNewline) {\n          includeInOutput = false;\n        } else if (text.isNonWhitespace) {\n          if (glueTrimIndex > -1) this.RemoveExistingGlue();\n\n          if (functionTrimIndex > -1) {\n            let callStackElements = this.callStack.elements;\n            for (let i = callStackElements.length - 1; i >= 0; i--) {\n              let el = callStackElements[i];\n              if (el.type == PushPopType.Function) {\n                el.functionStartInOutputStream = -1;\n              } else {\n                break;\n              }\n            }\n          }\n        }\n      } else if (text.isNewline) {\n        if (this.outputStreamEndsInNewline || !this.outputStreamContainsContent)\n          includeInOutput = false;\n      }\n    }\n\n    if (includeInOutput) {\n      if (obj === null) {\n        return throwNullException(\"obj\");\n      }\n      this.outputStream.push(obj);\n      this.OutputStreamDirty();\n    }\n  }\n\n  public TrimNewlinesFromOutputStream() {\n    let removeWhitespaceFrom = -1;\n\n    let i = this.outputStream.length - 1;\n    while (i >= 0) {\n      let obj = this.outputStream[i];\n      let cmd = asOrNull(obj, ControlCommand);\n      let txt = asOrNull(obj, StringValue);\n\n      if (cmd != null || (txt != null && txt.isNonWhitespace)) {\n        break;\n      } else if (txt != null && txt.isNewline) {\n        removeWhitespaceFrom = i;\n      }\n      i--;\n    }\n\n    // Remove the whitespace\n    if (removeWhitespaceFrom >= 0) {\n      i = removeWhitespaceFrom;\n      while (i < this.outputStream.length) {\n        let text = asOrNull(this.outputStream[i], StringValue);\n        if (text) {\n          this.outputStream.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  public RemoveExistingGlue() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let c = this.outputStream[i];\n      if (c instanceof Glue) {\n        this.outputStream.splice(i, 1);\n      } else if (c instanceof ControlCommand) {\n        break;\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  get outputStreamEndsInNewline() {\n    if (this.outputStream.length > 0) {\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let obj = this.outputStream[i];\n        if (obj instanceof ControlCommand) break;\n        let text = this.outputStream[i];\n        if (text instanceof StringValue) {\n          if (text.isNewline) return true;\n          else if (text.isNonWhitespace) break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  get outputStreamContainsContent() {\n    for (let content of this.outputStream) {\n      if (content instanceof StringValue) return true;\n    }\n    return false;\n  }\n\n  get inStringEvaluation() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let cmd = asOrNull(this.outputStream[i], ControlCommand);\n      if (\n        cmd instanceof ControlCommand &&\n        cmd.commandType == ControlCommand.CommandType.BeginString\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public PushEvaluationStack(obj: InkObject | null) {\n    // var listValue = obj as ListValue;\n    let listValue = asOrNull(obj, ListValue);\n    if (listValue) {\n      // Update origin when list is has something to indicate the list origin\n      let rawList = listValue.value;\n      if (rawList === null) {\n        return throwNullException(\"rawList\");\n      }\n\n      if (rawList.originNames != null) {\n        if (!rawList.origins) rawList.origins = [];\n        rawList.origins.length = 0;\n\n        for (let n of rawList.originNames) {\n          if (this.story.listDefinitions === null)\n            return throwNullException(\"StoryState.story.listDefinitions\");\n          let def = this.story.listDefinitions.TryListGetDefinition(n, null);\n          if (def.result === null)\n            return throwNullException(\"StoryState def.result\");\n          if (rawList.origins.indexOf(def.result) < 0)\n            rawList.origins.push(def.result);\n        }\n      }\n    }\n\n    if (obj === null) {\n      return throwNullException(\"obj\");\n    }\n    this.evaluationStack.push(obj);\n  }\n\n  public PopEvaluationStack(): InkObject;\n  public PopEvaluationStack(numberOfObjects: number): InkObject[];\n  public PopEvaluationStack(numberOfObjects?: number) {\n    if (typeof numberOfObjects === \"undefined\") {\n      let obj = this.evaluationStack.pop();\n      return nullIfUndefined(obj);\n    } else {\n      if (numberOfObjects > this.evaluationStack.length) {\n        throw new Error(\"trying to pop too many objects\");\n      }\n\n      let popped = this.evaluationStack.splice(\n        this.evaluationStack.length - numberOfObjects,\n        numberOfObjects\n      );\n      return nullIfUndefined(popped);\n    }\n  }\n\n  public PeekEvaluationStack() {\n    return this.evaluationStack[this.evaluationStack.length - 1];\n  }\n\n  public ForceEnd() {\n    this.callStack.Reset();\n\n    this._currentFlow.currentChoices.length = 0;\n\n    this.currentPointer = Pointer.Null;\n    this.previousPointer = Pointer.Null;\n\n    this.didSafeExit = true;\n  }\n\n  public TrimWhitespaceFromFunctionEnd() {\n    Debug.Assert(this.callStack.currentElement.type == PushPopType.Function);\n    let functionStartPoint =\n      this.callStack.currentElement.functionStartInOutputStream;\n\n    if (functionStartPoint == -1) {\n      functionStartPoint = 0;\n    }\n\n    for (let i = this.outputStream.length - 1; i >= functionStartPoint; i--) {\n      let obj = this.outputStream[i];\n      let txt = asOrNull(obj, StringValue);\n      let cmd = asOrNull(obj, ControlCommand);\n\n      if (txt == null) continue;\n      if (cmd) break;\n\n      if (txt.isNewline || txt.isInlineWhitespace) {\n        this.outputStream.splice(i, 1);\n        this.OutputStreamDirty();\n      } else {\n        break;\n      }\n    }\n  }\n\n  public PopCallStack(popType: PushPopType | null = null) {\n    if (this.callStack.currentElement.type == PushPopType.Function)\n      this.TrimWhitespaceFromFunctionEnd();\n\n    this.callStack.Pop(popType);\n  }\n\n  public SetChosenPath(path: Path, incrementingTurnIndex: boolean) {\n    // Changing direction, assume we need to clear current set of choices\n    this._currentFlow.currentChoices.length = 0;\n\n    let newPointer = this.story.PointerAtPath(path);\n    if (!newPointer.isNull && newPointer.index == -1) newPointer.index = 0;\n\n    this.currentPointer = newPointer;\n\n    if (incrementingTurnIndex) {\n      this.currentTurnIndex++;\n    }\n  }\n\n  public StartFunctionEvaluationFromGame(\n    funcContainer: Container,\n    args: any[]\n  ) {\n    this.callStack.Push(\n      PushPopType.FunctionEvaluationFromGame,\n      this.evaluationStack.length\n    );\n    this.callStack.currentElement.currentPointer =\n      Pointer.StartOf(funcContainer);\n\n    this.PassArgumentsToEvaluationStack(args);\n  }\n\n  public PassArgumentsToEvaluationStack(args: any[] | null) {\n    if (args !== null) {\n      for (let i = 0; i < args.length; i++) {\n        if (\n          !(\n            typeof args[i] === \"number\" ||\n            typeof args[i] === \"string\" ||\n            typeof args[i] === \"boolean\" ||\n            args[i] instanceof InkList\n          )\n        ) {\n          throw new Error(\n            \"ink arguments when calling EvaluateFunction / ChoosePathStringWithParameters must be\" +\n            \"number, string, bool or InkList. Argument was \" +\n            (nullIfUndefined(arguments[i]) === null)\n              ? \"null\"\n              : arguments[i].constructor.name\n          );\n        }\n\n        this.PushEvaluationStack(Value.Create(args[i]));\n      }\n    }\n  }\n\n  public TryExitFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type ==\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      this.currentPointer = Pointer.Null;\n      this.didSafeExit = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  public CompleteFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type !=\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      throw new Error(\n        \"Expected external function evaluation to be complete. Stack trace: \" +\n          this.callStack.callStackTrace\n      );\n    }\n\n    let originalEvaluationStackHeight =\n      this.callStack.currentElement.evaluationStackHeightWhenPushed;\n\n    let returnedObj: InkObject | null = null;\n    while (this.evaluationStack.length > originalEvaluationStackHeight) {\n      let poppedObj = this.PopEvaluationStack();\n      if (returnedObj === null) returnedObj = poppedObj;\n    }\n\n    this.PopCallStack(PushPopType.FunctionEvaluationFromGame);\n\n    if (returnedObj) {\n      if (returnedObj instanceof Void) return null;\n\n      // Some kind of value, if not void\n      // var returnVal = returnedObj as Runtime.Value;\n      let returnVal = asOrThrows(returnedObj, Value);\n\n      // DivertTargets get returned as the string of components\n      // (rather than a Path, which isn't public)\n      if (returnVal.valueType == ValueType.DivertTarget) {\n        return returnVal.valueObject.toString();\n      }\n\n      // Other types can just have their exact object type:\n      // int, float, string. VariablePointers get returned as strings.\n      return returnVal.valueObject;\n    }\n\n    return null;\n  }\n\n  public AddError(message: string, isWarning: boolean) {\n    if (!isWarning) {\n      if (this._currentErrors == null) this._currentErrors = [];\n      this._currentErrors.push(message);\n    } else {\n      if (this._currentWarnings == null) this._currentWarnings = [];\n      this._currentWarnings.push(message);\n    }\n  }\n\n  public OutputStreamDirty() {\n    this._outputStreamTextDirty = true;\n    this._outputStreamTagsDirty = true;\n  }\n\n  private _visitCounts: Map<string, number>;\n  private _turnIndices: Map<string, number>;\n\n  private _outputStreamTextDirty = true;\n  private _outputStreamTagsDirty = true;\n\n  private _patch: StatePatch | null = null;\n\n  private _currentFlow: Flow;\n  private _aliveFlowNames: string[] | null = null;\n  private _namedFlows: Map<string, Flow> | null = null;\n  private readonly kDefaultFlowName = \"DEFAULT_FLOW\";\n  private _aliveFlowNamesDirty: boolean = true;\n}\n","// This is simple replacement of the Stopwatch class from the .NET Framework.\n// The original class can count time with much more accuracy than the Javascript version.\n// It might be worth considering using `window.performance` in the browser\n// or `process.hrtime()` in node.\nexport class Stopwatch {\n  private startTime: number | undefined;\n\n  constructor() {\n    this.startTime = undefined;\n  }\n\n  get ElapsedMilliseconds(): number {\n    if (typeof this.startTime === \"undefined\") {\n      return 0;\n    }\n    return new Date().getTime() - this.startTime;\n  }\n\n  public Start() {\n    this.startTime = new Date().getTime();\n  }\n  public Stop() {\n    this.startTime = undefined;\n  }\n}\n","import { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { StoryState } from \"./StoryState\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { Choice } from \"./Choice\";\nimport { Divert } from \"./Divert\";\nimport {\n  Value,\n  StringValue,\n  IntValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n} from \"./Value\";\nimport { Path } from \"./Path\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { VariableReference } from \"./VariableReference\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { StoryException } from \"./StoryException\";\nimport { PRNG } from \"./PRNG\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Stopwatch } from \"./StopWatch\";\nimport { Pointer } from \"./Pointer\";\nimport { InkList, InkListItem, KeyValuePair } from \"./InkList\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { DebugMetadata } from \"./DebugMetadata\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { ErrorHandler, ErrorType } from \"./Error\";\n\nexport { InkList } from \"./InkList\";\n\nif (!Number.isInteger) {\n  Number.isInteger = function isInteger(nVal: any) {\n    return (\n      typeof nVal === \"number\" &&\n      isFinite(nVal) &&\n      nVal > -9007199254740992 &&\n      nVal < 9007199254740992 &&\n      Math.floor(nVal) === nVal\n    );\n  };\n}\n\nexport class Story extends InkObject {\n  public static inkVersionCurrent = 21;\n\n  public inkVersionMinimumCompatible = 18;\n\n  get currentChoices() {\n    let choices: Choice[] = [];\n\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    for (let c of this._state.currentChoices) {\n      if (!c.isInvisibleDefault) {\n        c.index = choices.length;\n        choices.push(c);\n      }\n    }\n\n    return choices;\n  }\n\n  get currentText() {\n    this.IfAsyncWeCant(\"call currentText since it's a work in progress\");\n    return this.state.currentText;\n  }\n\n  get currentTags() {\n    this.IfAsyncWeCant(\"call currentTags since it's a work in progress\");\n    return this.state.currentTags;\n  }\n\n  get currentErrors() {\n    return this.state.currentErrors;\n  }\n\n  get currentWarnings() {\n    return this.state.currentWarnings;\n  }\n\n  get currentFlowName() {\n    return this.state.currentFlowName;\n  }\n\n  get currentFlowIsDefaultFlow() {\n    return this.state.currentFlowIsDefaultFlow;\n  }\n\n  get aliveFlowNames() {\n    return this.state.aliveFlowNames;\n  }\n\n  get hasError() {\n    return this.state.hasError;\n  }\n\n  get hasWarning() {\n    return this.state.hasWarning;\n  }\n\n  get variablesState() {\n    return this.state.variablesState;\n  }\n\n  get listDefinitions() {\n    return this._listDefinitions;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  public onError: ErrorHandler | null = null;\n\n  public onDidContinue: (() => void) | null = null;\n\n  public onMakeChoice: ((arg1: Choice) => void) | null = null;\n\n  public onEvaluateFunction: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  public onCompleteEvaluateFunction:\n    | ((arg1: string, arg2: any[], arg3: string, arg4: any) => void)\n    | null = null;\n\n  public onChoosePathString: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  // TODO: Implement Profiler\n  public StartProfiling() {\n    /* */\n  }\n  public EndProfiling() {\n    /* */\n  }\n\n  constructor(contentContainer: Container, lists: ListDefinition[] | null);\n  constructor(jsonString: string);\n  constructor(json: Record<string, any>);\n  constructor() {\n    super();\n\n    // Discrimination between constructors\n    let contentContainer: Container;\n    let lists: ListDefinition[] | null = null;\n    let json: Record<string, any> | null = null;\n\n    if (arguments[0] instanceof Container) {\n      contentContainer = arguments[0] as Container;\n\n      if (typeof arguments[1] !== \"undefined\") {\n        lists = arguments[1] as ListDefinition[];\n      }\n\n      // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n      this._mainContentContainer = contentContainer;\n      // ------\n    } else {\n      if (typeof arguments[0] === \"string\") {\n        let jsonString = arguments[0] as string;\n        json = SimpleJson.TextToDictionary(jsonString);\n      } else {\n        json = arguments[0] as Record<string, any>;\n      }\n    }\n\n    // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n    if (lists != null) this._listDefinitions = new ListDefinitionsOrigin(lists);\n\n    this._externals = new Map();\n    // ------\n\n    // ------ Story(string jsonString) : this((Container)null)\n    if (json !== null) {\n      let rootObject: Record<string, any> = json;\n\n      let versionObj = rootObject[\"inkVersion\"];\n      if (versionObj == null)\n        throw new Error(\n          \"ink version number not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let formatFromFile = parseInt(versionObj);\n      if (formatFromFile > Story.inkVersionCurrent) {\n        throw new Error(\n          \"Version of ink used to build story was newer than the current version of the engine\"\n        );\n      } else if (formatFromFile < this.inkVersionMinimumCompatible) {\n        throw new Error(\n          \"Version of ink used to build story is too old to be loaded by this version of the engine\"\n        );\n      } else if (formatFromFile != Story.inkVersionCurrent) {\n        console.warn(\n          \"WARNING: Version of ink used to build story doesn't match current version of engine. Non-critical, but recommend synchronising.\"\n        );\n      }\n\n      let rootToken = rootObject[\"root\"];\n      if (rootToken == null)\n        throw new Error(\n          \"Root node for ink not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let listDefsObj;\n      if ((listDefsObj = rootObject[\"listDefs\"])) {\n        this._listDefinitions =\n          JsonSerialisation.JTokenToListDefinitions(listDefsObj);\n      }\n\n      this._mainContentContainer = asOrThrows(\n        JsonSerialisation.JTokenToRuntimeObject(rootToken),\n        Container\n      );\n\n      this.ResetState();\n    }\n    // ------\n  }\n\n  // Merge together `public string ToJson()` and `void ToJson(SimpleJson.Writer writer)`.\n  // Will only return a value if writer was not provided.\n  public ToJson(writer?: SimpleJson.Writer): string | void {\n    let shouldReturn = false;\n\n    if (!writer) {\n      shouldReturn = true;\n      writer = new SimpleJson.Writer();\n    }\n\n    writer.WriteObjectStart();\n\n    writer.WriteIntProperty(\"inkVersion\", Story.inkVersionCurrent);\n\n    writer.WriteProperty(\"root\", (w) =>\n      JsonSerialisation.WriteRuntimeContainer(w, this._mainContentContainer)\n    );\n\n    if (this._listDefinitions != null) {\n      writer.WritePropertyStart(\"listDefs\");\n      writer.WriteObjectStart();\n\n      for (let def of this._listDefinitions.lists) {\n        writer.WritePropertyStart(def.name);\n        writer.WriteObjectStart();\n\n        for (let [key, value] of def.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          let val = value;\n          writer.WriteIntProperty(item.itemName, val);\n        }\n\n        writer.WriteObjectEnd();\n        writer.WritePropertyEnd();\n      }\n\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    if (shouldReturn) return writer.toString();\n  }\n\n  public ResetState() {\n    this.IfAsyncWeCant(\"ResetState\");\n\n    this._state = new StoryState(this);\n    this._state.variablesState.ObserveVariableChange(\n      this.VariableStateDidChangeEvent.bind(this)\n    );\n\n    this.ResetGlobals();\n  }\n\n  public ResetErrors() {\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ResetErrors();\n  }\n\n  public ResetCallstack() {\n    this.IfAsyncWeCant(\"ResetCallstack\");\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ForceEnd();\n  }\n\n  public ResetGlobals() {\n    if (this._mainContentContainer.namedContent.get(\"global decl\")) {\n      let originalPointer = this.state.currentPointer.copy();\n\n      this.ChoosePath(new Path(\"global decl\"), false);\n\n      this.ContinueInternal();\n\n      this.state.currentPointer = originalPointer;\n    }\n\n    this.state.variablesState.SnapshotDefaultGlobals();\n  }\n\n  public SwitchFlow(flowName: string) {\n    this.IfAsyncWeCant(\"switch flow\");\n    if (this._asyncSaving) {\n      throw new Error(\n        \"Story is already in background saving mode, can't switch flow to \" +\n          flowName\n      );\n    }\n\n    this.state.SwitchFlow_Internal(flowName);\n  }\n\n  public RemoveFlow(flowName: string) {\n    this.state.RemoveFlow_Internal(flowName);\n  }\n\n  public SwitchToDefaultFlow() {\n    this.state.SwitchToDefaultFlow_Internal();\n  }\n\n  public Continue() {\n    this.ContinueAsync(0);\n    return this.currentText;\n  }\n\n  get canContinue() {\n    return this.state.canContinue;\n  }\n\n  get asyncContinueComplete() {\n    return !this._asyncContinueActive;\n  }\n\n  public ContinueAsync(millisecsLimitAsync: number) {\n    if (!this._hasValidatedExternals) this.ValidateExternalBindings();\n\n    this.ContinueInternal(millisecsLimitAsync);\n  }\n\n  public ContinueInternal(millisecsLimitAsync = 0) {\n    if (this._profiler != null) this._profiler.PreContinue();\n\n    let isAsyncTimeLimited = millisecsLimitAsync > 0;\n    this._recursiveContinueCount++;\n\n    if (!this._asyncContinueActive) {\n      this._asyncContinueActive = isAsyncTimeLimited;\n\n      if (!this.canContinue) {\n        throw new Error(\n          \"Can't continue - should check canContinue before calling Continue\"\n        );\n      }\n\n      this._state.didSafeExit = false;\n      this._state.ResetOutput();\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = true;\n    }\n\n    let durationStopwatch = new Stopwatch();\n    durationStopwatch.Start();\n\n    let outputStreamEndsInNewline = false;\n    this._sawLookaheadUnsafeFunctionAfterNewline = false;\n    do {\n      try {\n        outputStreamEndsInNewline = this.ContinueSingleStep();\n      } catch (e) {\n        if (!(e instanceof StoryException)) throw e;\n\n        this.AddError(e.message, undefined, e.useEndLineNumber);\n        break;\n      }\n\n      if (outputStreamEndsInNewline) break;\n\n      if (\n        this._asyncContinueActive &&\n        durationStopwatch.ElapsedMilliseconds > millisecsLimitAsync\n      ) {\n        break;\n      }\n    } while (this.canContinue);\n\n    durationStopwatch.Stop();\n\n    if (outputStreamEndsInNewline || !this.canContinue) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        this.RestoreStateSnapshot();\n      }\n\n      if (!this.canContinue) {\n        if (this.state.callStack.canPopThread)\n          this.AddError(\n            \"Thread available to pop, threads should always be flat by the end of evaluation?\"\n          );\n\n        if (\n          this.state.generatedChoices.length == 0 &&\n          !this.state.didSafeExit &&\n          this._temporaryEvaluationContainer == null\n        ) {\n          if (this.state.callStack.CanPop(PushPopType.Tunnel))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '->->' to return from a tunnel?\"\n            );\n          else if (this.state.callStack.CanPop(PushPopType.Function))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '~ return'?\"\n            );\n          else if (!this.state.callStack.canPop)\n            this.AddError(\n              \"ran out of content. Do you need a '-> DONE' or '-> END'?\"\n            );\n          else\n            this.AddError(\n              \"unexpectedly reached end of content for unknown reason. Please debug compiler!\"\n            );\n        }\n      }\n\n      this.state.didSafeExit = false;\n      this._sawLookaheadUnsafeFunctionAfterNewline = false;\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = false;\n\n      this._asyncContinueActive = false;\n      if (this.onDidContinue !== null) this.onDidContinue();\n    }\n\n    this._recursiveContinueCount--;\n\n    if (this._profiler != null) this._profiler.PostContinue();\n\n    // In the following code, we're masking a lot of non-null assertion,\n    // because testing for against `hasError` or `hasWarning` makes sure\n    // the arrays are present and contain at least one element.\n    if (this.state.hasError || this.state.hasWarning) {\n      if (this.onError !== null) {\n        if (this.state.hasError) {\n          for (let err of this.state.currentErrors!) {\n            this.onError(err, ErrorType.Error);\n          }\n        }\n        if (this.state.hasWarning) {\n          for (let err of this.state.currentWarnings!) {\n            this.onError(err, ErrorType.Warning);\n          }\n        }\n        this.ResetErrors();\n      } else {\n        let sb = new StringBuilder();\n        sb.Append(\"Ink had \");\n        if (this.state.hasError) {\n          sb.Append(`${this.state.currentErrors!.length}`);\n          sb.Append(\n            this.state.currentErrors!.length == 1 ? \" error\" : \"errors\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        if (this.state.hasWarning) {\n          sb.Append(`${this.state.currentWarnings!.length}`);\n          sb.Append(\n            this.state.currentWarnings!.length == 1 ? \" warning\" : \"warnings\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        sb.Append(\n          \". It is strongly suggested that you assign an error handler to story.onError. The first issue was: \"\n        );\n        sb.Append(\n          this.state.hasError\n            ? this.state.currentErrors![0]\n            : this.state.currentWarnings![0]\n        );\n\n        throw new StoryException(sb.toString());\n      }\n    }\n  }\n\n  public ContinueSingleStep() {\n    if (this._profiler != null) this._profiler.PreStep();\n\n    this.Step();\n\n    if (this._profiler != null) this._profiler.PostStep();\n\n    if (!this.canContinue && !this.state.callStack.elementIsEvaluateFromGame) {\n      this.TryFollowDefaultInvisibleChoice();\n    }\n\n    if (this._profiler != null) this._profiler.PreSnapshot();\n\n    if (!this.state.inStringEvaluation) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        if (this._stateSnapshotAtLastNewline.currentTags === null) {\n          return throwNullException(\"this._stateAtLastNewline.currentTags\");\n        }\n        if (this.state.currentTags === null) {\n          return throwNullException(\"this.state.currentTags\");\n        }\n\n        let change = this.CalculateNewlineOutputStateChange(\n          this._stateSnapshotAtLastNewline.currentText,\n          this.state.currentText,\n          this._stateSnapshotAtLastNewline.currentTags.length,\n          this.state.currentTags.length\n        );\n\n        if (\n          change == Story.OutputStateChange.ExtendedBeyondNewline ||\n          this._sawLookaheadUnsafeFunctionAfterNewline\n        ) {\n          this.RestoreStateSnapshot();\n\n          return true;\n        } else if (change == Story.OutputStateChange.NewlineRemoved) {\n          this.DiscardSnapshot();\n        }\n      }\n\n      if (this.state.outputStreamEndsInNewline) {\n        if (this.canContinue) {\n          if (this._stateSnapshotAtLastNewline == null) this.StateSnapshot();\n        } else {\n          this.DiscardSnapshot();\n        }\n      }\n    }\n\n    if (this._profiler != null) this._profiler.PostSnapshot();\n\n    return false;\n  }\n\n  public CalculateNewlineOutputStateChange(\n    prevText: string | null,\n    currText: string | null,\n    prevTagCount: number,\n    currTagCount: number\n  ) {\n    if (prevText === null) {\n      return throwNullException(\"prevText\");\n    }\n    if (currText === null) {\n      return throwNullException(\"currText\");\n    }\n\n    let newlineStillExists =\n      currText.length >= prevText.length &&\n      prevText.length > 0 &&\n      currText.charAt(prevText.length - 1) == \"\\n\";\n    if (\n      prevTagCount == currTagCount &&\n      prevText.length == currText.length &&\n      newlineStillExists\n    )\n      return Story.OutputStateChange.NoChange;\n\n    if (!newlineStillExists) {\n      return Story.OutputStateChange.NewlineRemoved;\n    }\n\n    if (currTagCount > prevTagCount)\n      return Story.OutputStateChange.ExtendedBeyondNewline;\n\n    for (let i = prevText.length; i < currText.length; i++) {\n      let c = currText.charAt(i);\n      if (c != \" \" && c != \"\\t\") {\n        return Story.OutputStateChange.ExtendedBeyondNewline;\n      }\n    }\n\n    return Story.OutputStateChange.NoChange;\n  }\n\n  public ContinueMaximally() {\n    this.IfAsyncWeCant(\"ContinueMaximally\");\n\n    let sb = new StringBuilder();\n\n    while (this.canContinue) {\n      sb.Append(this.Continue());\n    }\n\n    return sb.toString();\n  }\n\n  public ContentAtPath(path: Path) {\n    return this.mainContentContainer.ContentAtPath(path);\n  }\n\n  public KnotContainerWithName(name: string) {\n    let namedContainer = this.mainContentContainer.namedContent.get(name);\n    if (namedContainer instanceof Container) return namedContainer;\n    else return null;\n  }\n\n  public PointerAtPath(path: Path) {\n    if (path.length == 0) return Pointer.Null;\n\n    let p = new Pointer();\n\n    let pathLengthToUse = path.length;\n\n    let result = null;\n    if (path.lastComponent === null) {\n      return throwNullException(\"path.lastComponent\");\n    }\n\n    if (path.lastComponent.isIndex) {\n      pathLengthToUse = path.length - 1;\n      result = this.mainContentContainer.ContentAtPath(\n        path,\n        undefined,\n        pathLengthToUse\n      );\n      p.container = result.container;\n      p.index = path.lastComponent.index;\n    } else {\n      result = this.mainContentContainer.ContentAtPath(path);\n      p.container = result.container;\n      p.index = -1;\n    }\n\n    if (\n      result.obj == null ||\n      (result.obj == this.mainContentContainer && pathLengthToUse > 0)\n    ) {\n      this.Error(\n        \"Failed to find content at path '\" +\n          path +\n          \"', and no approximation of it was possible.\"\n      );\n    } else if (result.approximate)\n      this.Warning(\n        \"Failed to find content at path '\" +\n          path +\n          \"', so it was approximated to: '\" +\n          result.obj.path +\n          \"'.\"\n      );\n\n    return p;\n  }\n\n  public StateSnapshot() {\n    this._stateSnapshotAtLastNewline = this._state;\n    this._state = this._state.CopyAndStartPatching();\n  }\n\n  public RestoreStateSnapshot() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      throwNullException(\"_stateSnapshotAtLastNewline\");\n    }\n    this._stateSnapshotAtLastNewline.RestoreAfterPatch();\n\n    this._state = this._stateSnapshotAtLastNewline;\n    this._stateSnapshotAtLastNewline = null;\n\n    if (!this._asyncSaving) {\n      this._state.ApplyAnyPatch();\n    }\n  }\n\n  public DiscardSnapshot() {\n    if (!this._asyncSaving) this._state.ApplyAnyPatch();\n\n    this._stateSnapshotAtLastNewline = null;\n  }\n\n  public CopyStateForBackgroundThreadSave() {\n    this.IfAsyncWeCant(\"start saving on a background thread\");\n\n    if (this._asyncSaving)\n      throw new Error(\n        \"Story is already in background saving mode, can't call CopyStateForBackgroundThreadSave again!\"\n      );\n\n    let stateToSave = this._state;\n    this._state = this._state.CopyAndStartPatching();\n    this._asyncSaving = true;\n    return stateToSave;\n  }\n\n  public BackgroundSaveComplete() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      this._state.ApplyAnyPatch();\n    }\n\n    this._asyncSaving = false;\n  }\n\n  public Step() {\n    let shouldAddToStream = true;\n\n    let pointer = this.state.currentPointer.copy();\n    if (pointer.isNull) {\n      return;\n    }\n\n    // Container containerToEnter = pointer.Resolve () as Container;\n    let containerToEnter = asOrNull(pointer.Resolve(), Container);\n\n    while (containerToEnter) {\n      this.VisitContainer(containerToEnter, true);\n\n      // No content? the most we can do is step past it\n      if (containerToEnter.content.length == 0) {\n        break;\n      }\n\n      pointer = Pointer.StartOf(containerToEnter);\n      // containerToEnter = pointer.Resolve() as Container;\n      containerToEnter = asOrNull(pointer.Resolve(), Container);\n    }\n\n    this.state.currentPointer = pointer.copy();\n\n    if (this._profiler != null) this._profiler.Step(this.state.callStack);\n\n    // Is the current content object:\n    //  - Normal content\n    //  - Or a logic/flow statement - if so, do it\n    // Stop flow if we hit a stack pop when we're unable to pop (e.g. return/done statement in knot\n    // that was diverted to rather than called as a function)\n    let currentContentObj = pointer.Resolve();\n    let isLogicOrFlowControl =\n      this.PerformLogicAndFlowControl(currentContentObj);\n\n    // Has flow been forced to end by flow control above?\n    if (this.state.currentPointer.isNull) {\n      return;\n    }\n\n    if (isLogicOrFlowControl) {\n      shouldAddToStream = false;\n    }\n\n    // Choice with condition?\n    // var choicePoint = currentContentObj as ChoicePoint;\n    let choicePoint = asOrNull(currentContentObj, ChoicePoint);\n    if (choicePoint) {\n      let choice = this.ProcessChoice(choicePoint);\n      if (choice) {\n        this.state.generatedChoices.push(choice);\n      }\n\n      currentContentObj = null;\n      shouldAddToStream = false;\n    }\n\n    // If the container has no content, then it will be\n    // the \"content\" itself, but we skip over it.\n    if (currentContentObj instanceof Container) {\n      shouldAddToStream = false;\n    }\n\n    // Content to add to evaluation stack or the output stream\n    if (shouldAddToStream) {\n      // If we're pushing a variable pointer onto the evaluation stack, ensure that it's specific\n      // to our current (possibly temporary) context index. And make a copy of the pointer\n      // so that we're not editing the original runtime object.\n      // var varPointer = currentContentObj as VariablePointerValue;\n      let varPointer = asOrNull(currentContentObj, VariablePointerValue);\n      if (varPointer && varPointer.contextIndex == -1) {\n        // Create new object so we're not overwriting the story's own data\n        let contextIdx = this.state.callStack.ContextForVariableNamed(\n          varPointer.variableName\n        );\n        currentContentObj = new VariablePointerValue(\n          varPointer.variableName,\n          contextIdx\n        );\n      }\n\n      // Expression evaluation content\n      if (this.state.inExpressionEvaluation) {\n        this.state.PushEvaluationStack(currentContentObj);\n      }\n      // Output stream content (i.e. not expression evaluation)\n      else {\n        this.state.PushToOutputStream(currentContentObj);\n      }\n    }\n\n    // Increment the content pointer, following diverts if necessary\n    this.NextContent();\n\n    // Starting a thread should be done after the increment to the content pointer,\n    // so that when returning from the thread, it returns to the content after this instruction.\n    // var controlCmd = currentContentObj as ;\n    let controlCmd = asOrNull(currentContentObj, ControlCommand);\n    if (\n      controlCmd &&\n      controlCmd.commandType == ControlCommand.CommandType.StartThread\n    ) {\n      this.state.callStack.PushThread();\n    }\n  }\n\n  public VisitContainer(container: Container, atStart: boolean) {\n    if (!container.countingAtStartOnly || atStart) {\n      if (container.visitsShouldBeCounted)\n        this.state.IncrementVisitCountForContainer(container);\n\n      if (container.turnIndexShouldBeCounted)\n        this.state.RecordTurnIndexVisitToContainer(container);\n    }\n  }\n\n  private _prevContainers: Container[] = [];\n  public VisitChangedContainersDueToDivert() {\n    let previousPointer = this.state.previousPointer.copy();\n    let pointer = this.state.currentPointer.copy();\n\n    if (pointer.isNull || pointer.index == -1) return;\n\n    this._prevContainers.length = 0;\n    if (!previousPointer.isNull) {\n      // Container prevAncestor = previousPointer.Resolve() as Container ?? previousPointer.container as Container;\n      let resolvedPreviousAncestor = previousPointer.Resolve();\n      let prevAncestor =\n        asOrNull(resolvedPreviousAncestor, Container) ||\n        asOrNull(previousPointer.container, Container);\n      while (prevAncestor) {\n        this._prevContainers.push(prevAncestor);\n        // prevAncestor = prevAncestor.parent as Container;\n        prevAncestor = asOrNull(prevAncestor.parent, Container);\n      }\n    }\n\n    let currentChildOfContainer = pointer.Resolve();\n\n    if (currentChildOfContainer == null) return;\n\n    // Container currentContainerAncestor = currentChildOfContainer.parent as Container;\n    let currentContainerAncestor = asOrNull(\n      currentChildOfContainer.parent,\n      Container\n    );\n    let allChildrenEnteredAtStart = true;\n    while (\n      currentContainerAncestor &&\n      (this._prevContainers.indexOf(currentContainerAncestor) < 0 ||\n        currentContainerAncestor.countingAtStartOnly)\n    ) {\n      // Check whether this ancestor container is being entered at the start,\n      // by checking whether the child object is the first.\n      let enteringAtStart =\n        currentContainerAncestor.content.length > 0 &&\n        currentChildOfContainer == currentContainerAncestor.content[0] &&\n        allChildrenEnteredAtStart;\n\n      if (!enteringAtStart) allChildrenEnteredAtStart = false;\n\n      // Mark a visit to this container\n      this.VisitContainer(currentContainerAncestor, enteringAtStart);\n\n      currentChildOfContainer = currentContainerAncestor;\n      // currentContainerAncestor = currentContainerAncestor.parent as Container;\n      currentContainerAncestor = asOrNull(\n        currentContainerAncestor.parent,\n        Container\n      );\n    }\n  }\n\n  public PopChoiceStringAndTags(tags: string[]) {\n    let choiceOnlyStrVal = asOrThrows(\n      this.state.PopEvaluationStack(),\n      StringValue\n    );\n\n    while (\n      this.state.evaluationStack.length > 0 &&\n      asOrNull(this.state.PeekEvaluationStack(), Tag) != null\n    ) {\n      let tag = asOrNull(this.state.PopEvaluationStack(), Tag);\n      if (tag) tags.push(tag.text);\n    }\n    return choiceOnlyStrVal.value;\n  }\n\n  public ProcessChoice(choicePoint: ChoicePoint) {\n    let showChoice = true;\n\n    // Don't create choice if choice point doesn't pass conditional\n    if (choicePoint.hasCondition) {\n      let conditionValue = this.state.PopEvaluationStack();\n      if (!this.IsTruthy(conditionValue)) {\n        showChoice = false;\n      }\n    }\n\n    let startText = \"\";\n    let choiceOnlyText = \"\";\n    let tags: string[] = [];\n\n    if (choicePoint.hasChoiceOnlyContent) {\n      choiceOnlyText = this.PopChoiceStringAndTags(tags) || \"\";\n    }\n\n    if (choicePoint.hasStartContent) {\n      startText = this.PopChoiceStringAndTags(tags) || \"\";\n    }\n\n    // Don't create choice if player has already read this content\n    if (choicePoint.onceOnly) {\n      let visitCount = this.state.VisitCountForContainer(\n        choicePoint.choiceTarget\n      );\n      if (visitCount > 0) {\n        showChoice = false;\n      }\n    }\n\n    // We go through the full process of creating the choice above so\n    // that we consume the content for it, since otherwise it'll\n    // be shown on the output stream.\n    if (!showChoice) {\n      return null;\n    }\n\n    let choice = new Choice();\n    choice.targetPath = choicePoint.pathOnChoice;\n    choice.sourcePath = choicePoint.path.toString();\n    choice.isInvisibleDefault = choicePoint.isInvisibleDefault;\n    choice.threadAtGeneration = this.state.callStack.ForkThread();\n    choice.tags = tags.reverse(); //C# is a stack\n    choice.text = (startText + choiceOnlyText).replace(/^[ \\t]+|[ \\t]+$/g, \"\");\n\n    return choice;\n  }\n\n  public IsTruthy(obj: InkObject) {\n    let truthy = false;\n    if (obj instanceof Value) {\n      let val = obj;\n\n      if (val instanceof DivertTargetValue) {\n        let divTarget = val;\n        this.Error(\n          \"Shouldn't use a divert target (to \" +\n            divTarget.targetPath +\n            \") as a conditional value. Did you intend a function call 'likeThis()' or a read count check 'likeThis'? (no arrows)\"\n        );\n        return false;\n      }\n\n      return val.isTruthy;\n    }\n    return truthy;\n  }\n\n  public PerformLogicAndFlowControl(contentObj: InkObject | null) {\n    if (contentObj == null) {\n      return false;\n    }\n\n    // Divert\n    if (contentObj instanceof Divert) {\n      let currentDivert = contentObj;\n\n      if (currentDivert.isConditional) {\n        let conditionValue = this.state.PopEvaluationStack();\n\n        // False conditional? Cancel divert\n        if (!this.IsTruthy(conditionValue)) return true;\n      }\n\n      if (currentDivert.hasVariableTarget) {\n        let varName = currentDivert.variableDivertName;\n\n        let varContents =\n          this.state.variablesState.GetVariableWithName(varName);\n\n        if (varContents == null) {\n          this.Error(\n            \"Tried to divert using a target from a variable that could not be found (\" +\n              varName +\n              \")\"\n          );\n        } else if (!(varContents instanceof DivertTargetValue)) {\n          // var intContent = varContents as IntValue;\n          let intContent = asOrNull(varContents, IntValue);\n\n          let errorMessage =\n            \"Tried to divert to a target from a variable, but the variable (\" +\n            varName +\n            \") didn't contain a divert target, it \";\n          if (intContent instanceof IntValue && intContent.value == 0) {\n            errorMessage += \"was empty/null (the value 0).\";\n          } else {\n            errorMessage += \"contained '\" + varContents + \"'.\";\n          }\n\n          this.Error(errorMessage);\n        }\n\n        let target = asOrThrows(varContents, DivertTargetValue);\n        this.state.divertedPointer = this.PointerAtPath(target.targetPath);\n      } else if (currentDivert.isExternal) {\n        this.CallExternalFunction(\n          currentDivert.targetPathString,\n          currentDivert.externalArgs\n        );\n        return true;\n      } else {\n        this.state.divertedPointer = currentDivert.targetPointer.copy();\n      }\n\n      if (currentDivert.pushesToStack) {\n        this.state.callStack.Push(\n          currentDivert.stackPushType,\n          undefined,\n          this.state.outputStream.length\n        );\n      }\n\n      if (this.state.divertedPointer.isNull && !currentDivert.isExternal) {\n        if (\n          currentDivert &&\n          currentDivert.debugMetadata &&\n          currentDivert.debugMetadata.sourceName != null\n        ) {\n          this.Error(\n            \"Divert target doesn't exist: \" +\n              currentDivert.debugMetadata.sourceName\n          );\n        } else {\n          this.Error(\"Divert resolution failed: \" + currentDivert);\n        }\n      }\n\n      return true;\n    }\n\n    // Start/end an expression evaluation? Or print out the result?\n    else if (contentObj instanceof ControlCommand) {\n      let evalCommand = contentObj;\n\n      switch (evalCommand.commandType) {\n        case ControlCommand.CommandType.EvalStart:\n          this.Assert(\n            this.state.inExpressionEvaluation === false,\n            \"Already in expression evaluation?\"\n          );\n          this.state.inExpressionEvaluation = true;\n          break;\n\n        case ControlCommand.CommandType.EvalEnd:\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Not in expression evaluation mode\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        case ControlCommand.CommandType.EvalOutput:\n          // If the expression turned out to be empty, there may not be anything on the stack\n          if (this.state.evaluationStack.length > 0) {\n            let output = this.state.PopEvaluationStack();\n\n            // Functions may evaluate to Void, in which case we skip output\n            if (!(output instanceof Void)) {\n              // TODO: Should we really always blanket convert to string?\n              // It would be okay to have numbers in the output stream the\n              // only problem is when exporting text for viewing, it skips over numbers etc.\n              let text = new StringValue(output.toString());\n\n              this.state.PushToOutputStream(text);\n            }\n          }\n          break;\n\n        case ControlCommand.CommandType.NoOp:\n          break;\n\n        case ControlCommand.CommandType.Duplicate:\n          this.state.PushEvaluationStack(this.state.PeekEvaluationStack());\n          break;\n\n        case ControlCommand.CommandType.PopEvaluatedValue:\n          this.state.PopEvaluationStack();\n          break;\n\n        case ControlCommand.CommandType.PopFunction:\n        case ControlCommand.CommandType.PopTunnel:\n          let popType =\n            evalCommand.commandType == ControlCommand.CommandType.PopFunction\n              ? PushPopType.Function\n              : PushPopType.Tunnel;\n\n          let overrideTunnelReturnTarget: DivertTargetValue | null = null;\n          if (popType == PushPopType.Tunnel) {\n            let popped = this.state.PopEvaluationStack();\n            // overrideTunnelReturnTarget = popped as DivertTargetValue;\n            overrideTunnelReturnTarget = asOrNull(popped, DivertTargetValue);\n            if (overrideTunnelReturnTarget === null) {\n              this.Assert(\n                popped instanceof Void,\n                \"Expected void if ->-> doesn't override target\"\n              );\n            }\n          }\n\n          if (this.state.TryExitFunctionEvaluationFromGame()) {\n            break;\n          } else if (\n            this.state.callStack.currentElement.type != popType ||\n            !this.state.callStack.canPop\n          ) {\n            let names: Map<PushPopType, string> = new Map();\n            names.set(\n              PushPopType.Function,\n              \"function return statement (~ return)\"\n            );\n            names.set(PushPopType.Tunnel, \"tunnel onwards statement (->->)\");\n\n            let expected = names.get(this.state.callStack.currentElement.type);\n            if (!this.state.callStack.canPop) {\n              expected = \"end of flow (-> END or choice)\";\n            }\n\n            let errorMsg =\n              \"Found \" + names.get(popType) + \", when expected \" + expected;\n\n            this.Error(errorMsg);\n          } else {\n            this.state.PopCallStack();\n\n            if (overrideTunnelReturnTarget)\n              this.state.divertedPointer = this.PointerAtPath(\n                overrideTunnelReturnTarget.targetPath\n              );\n          }\n          break;\n\n        case ControlCommand.CommandType.BeginString:\n          this.state.PushToOutputStream(evalCommand);\n\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Expected to be in an expression when evaluating a string\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        // Leave it to story.currentText and story.currentTags to sort out the text from the tags\n        // This is mostly because we can't always rely on the existence of EndTag, and we don't want\n        // to try and flatten dynamic tags to strings every time \\n is pushed to output\n        case ControlCommand.CommandType.BeginTag:\n          this.state.PushToOutputStream(evalCommand);\n          break;\n\n        // EndTag has 2 modes:\n        //  - When in string evaluation (for choices)\n        //  - Normal\n        //\n        // The only way you could have an EndTag in the middle of\n        // string evaluation is if we're currently generating text for a\n        // choice, such as:\n        //\n        //   + choice # tag\n        //\n        // In the above case, the ink will be run twice:\n        //  - First, to generate the choice text. String evaluation\n        //    will be on, and the final string will be pushed to the\n        //    evaluation stack, ready to be popped to make a Choice\n        //    object.\n        //  - Second, when ink generates text after choosing the choice.\n        //    On this ocassion, it's not in string evaluation mode.\n        //\n        // On the writing side, we disallow manually putting tags within\n        // strings like this:\n        //\n        //   {\"hello # world\"}\n        //\n        // So we know that the tag must be being generated as part of\n        // choice content. Therefore, when the tag has been generated,\n        // we push it onto the evaluation stack in the exact same way\n        // as the string for the choice content.\n        case ControlCommand.CommandType.EndTag: {\n          if (this.state.inStringEvaluation) {\n            let contentStackForTag: InkObject[] = [];\n            let outputCountConsumed = 0;\n            for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n              let obj = this.state.outputStream[i];\n              outputCountConsumed++;\n\n              // var command = obj as ControlCommand;\n              let command = asOrNull(obj, ControlCommand);\n              if (command != null) {\n                if (\n                  command.commandType == ControlCommand.CommandType.BeginTag\n                ) {\n                  break;\n                } else {\n                  this.Error(\n                    \"Unexpected ControlCommand while extracting tag from choice\"\n                  );\n                  break;\n                }\n              }\n              if (obj instanceof StringValue) {\n                contentStackForTag.push(obj);\n              }\n            }\n\n            // Consume the content that was produced for this string\n            this.state.PopFromOutputStream(outputCountConsumed);\n            // Build string out of the content we collected\n            let sb = new StringBuilder();\n            for (let strVal of contentStackForTag) {\n              sb.Append(strVal.toString());\n            }\n            let choiceTag = new Tag(\n              this.state.CleanOutputWhitespace(sb.toString())\n            );\n            // Pushing to the evaluation stack means it gets picked up\n            // when a Choice is generated from the next Choice Point.\n            this.state.PushEvaluationStack(choiceTag);\n          } else {\n            // Otherwise! Simply push EndTag, so that in the output stream we\n            // have a structure of: [BeginTag, \"the tag content\", EndTag]\n            this.state.PushToOutputStream(evalCommand);\n          }\n          break;\n        }\n\n        case ControlCommand.CommandType.EndString: {\n          let contentStackForString: InkObject[] = [];\n          let contentToRetain: InkObject[] = [];\n\n          let outputCountConsumed = 0;\n          for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n            let obj = this.state.outputStream[i];\n\n            outputCountConsumed++;\n\n            // var command = obj as ControlCommand;\n            let command = asOrNull(obj, ControlCommand);\n            if (\n              command &&\n              command.commandType == ControlCommand.CommandType.BeginString\n            ) {\n              break;\n            }\n            if (obj instanceof Tag) {\n              contentToRetain.push(obj);\n            }\n            if (obj instanceof StringValue) {\n              contentStackForString.push(obj);\n            }\n          }\n\n          // Consume the content that was produced for this string\n          this.state.PopFromOutputStream(outputCountConsumed);\n\n          // Rescue the tags that we want actually to keep on the output stack\n          // rather than consume as part of the string we're building.\n          // At the time of writing, this only applies to Tag objects generated\n          // by choices, which are pushed to the stack during string generation.\n          for (let rescuedTag of contentToRetain)\n            this.state.PushToOutputStream(rescuedTag);\n\n          // The C# version uses a Stack for contentStackForString, but we're\n          // using a simple array, so we need to reverse it before using it\n          contentStackForString = contentStackForString.reverse();\n\n          // Build string out of the content we collected\n          let sb = new StringBuilder();\n          for (let c of contentStackForString) {\n            sb.Append(c.toString());\n          }\n\n          // Return to expression evaluation (from content mode)\n          this.state.inExpressionEvaluation = true;\n          this.state.PushEvaluationStack(new StringValue(sb.toString()));\n          break;\n        }\n\n        case ControlCommand.CommandType.ChoiceCount:\n          let choiceCount = this.state.generatedChoices.length;\n          this.state.PushEvaluationStack(new IntValue(choiceCount));\n          break;\n\n        case ControlCommand.CommandType.Turns:\n          this.state.PushEvaluationStack(\n            new IntValue(this.state.currentTurnIndex + 1)\n          );\n          break;\n\n        case ControlCommand.CommandType.TurnsSince:\n        case ControlCommand.CommandType.ReadCount:\n          let target = this.state.PopEvaluationStack();\n          if (!(target instanceof DivertTargetValue)) {\n            let extraNote = \"\";\n            if (target instanceof IntValue)\n              extraNote =\n                \". Did you accidentally pass a read count ('knot_name') instead of a target ('-> knot_name')?\";\n            this.Error(\n              \"TURNS_SINCE / READ_COUNT expected a divert target (knot, stitch, label name), but saw \" +\n                target +\n                extraNote\n            );\n            break;\n          }\n\n          // var divertTarget = target as DivertTargetValue;\n          let divertTarget = asOrThrows(target, DivertTargetValue);\n          // var container = ContentAtPath (divertTarget.targetPath).correctObj as Container;\n          let container = asOrNull(\n            this.ContentAtPath(divertTarget.targetPath).correctObj,\n            Container\n          );\n\n          let eitherCount;\n          if (container != null) {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = this.state.TurnsSinceForContainer(container);\n            else eitherCount = this.state.VisitCountForContainer(container);\n          } else {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = -1;\n            else eitherCount = 0;\n\n            this.Warning(\n              \"Failed to find container for \" +\n                evalCommand.toString() +\n                \" lookup at \" +\n                divertTarget.targetPath.toString()\n            );\n          }\n\n          this.state.PushEvaluationStack(new IntValue(eitherCount));\n          break;\n\n        case ControlCommand.CommandType.Random: {\n          let maxInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          let minInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\n          if (minInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for minimum parameter of RANDOM(min, max)\"\n            );\n\n          if (maxInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for maximum parameter of RANDOM(min, max)\"\n            );\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (maxInt.value === null) {\n            return throwNullException(\"maxInt.value\");\n          }\n          if (minInt.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          // This code is differs a bit from the reference implementation, since\n          // JavaScript has no true integers. Hence integer arithmetics and\n          // interger overflows don't apply here. A loss of precision can\n          // happen with big numbers however.\n          //\n          // The case where 'randomRange' is lower than zero is handled below,\n          // so there's no need to test against Number.MIN_SAFE_INTEGER.\n          let randomRange = maxInt.value - minInt.value + 1;\n          if (!isFinite(randomRange) || randomRange > Number.MAX_SAFE_INTEGER) {\n            randomRange = Number.MAX_SAFE_INTEGER;\n            this.Error(\n              \"RANDOM was called with a range that exceeds the size that ink numbers can use.\"\n            );\n          }\n          if (randomRange <= 0)\n            this.Error(\n              \"RANDOM was called with minimum as \" +\n                minInt.value +\n                \" and maximum as \" +\n                maxInt.value +\n                \". The maximum must be larger\"\n            );\n\n          let resultSeed = this.state.storySeed + this.state.previousRandom;\n          let random = new PRNG(resultSeed);\n\n          let nextRandom = random.next();\n          let chosenValue = (nextRandom % randomRange) + minInt.value;\n          this.state.PushEvaluationStack(new IntValue(chosenValue));\n\n          // Next random number (rather than keeping the Random object around)\n          this.state.previousRandom = nextRandom;\n          break;\n        }\n\n        case ControlCommand.CommandType.SeedRandom:\n          let seed = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          if (seed == null || seed instanceof IntValue === false)\n            return this.Error(\"Invalid value passed to SEED_RANDOM\");\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (seed.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          this.state.storySeed = seed.value;\n          this.state.previousRandom = 0;\n\n          this.state.PushEvaluationStack(new Void());\n          break;\n\n        case ControlCommand.CommandType.VisitIndex:\n          let count =\n            this.state.VisitCountForContainer(\n              this.state.currentPointer.container\n            ) - 1; // index not count\n          this.state.PushEvaluationStack(new IntValue(count));\n          break;\n\n        case ControlCommand.CommandType.SequenceShuffleIndex:\n          let shuffleIndex = this.NextSequenceShuffleIndex();\n          this.state.PushEvaluationStack(new IntValue(shuffleIndex));\n          break;\n\n        case ControlCommand.CommandType.StartThread:\n          // Handled in main step function\n          break;\n\n        case ControlCommand.CommandType.Done:\n          // We may exist in the context of the initial\n          // act of creating the thread, or in the context of\n          // evaluating the content.\n          if (this.state.callStack.canPopThread) {\n            this.state.callStack.PopThread();\n          }\n\n          // In normal flow - allow safe exit without warning\n          else {\n            this.state.didSafeExit = true;\n\n            // Stop flow in current thread\n            this.state.currentPointer = Pointer.Null;\n          }\n\n          break;\n\n        // Force flow to end completely\n        case ControlCommand.CommandType.End:\n          this.state.ForceEnd();\n          break;\n\n        case ControlCommand.CommandType.ListFromInt:\n          // var intVal = state.PopEvaluationStack () as IntValue;\n          let intVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          // var listNameVal = state.PopEvaluationStack () as StringValue;\n          let listNameVal = asOrThrows(\n            this.state.PopEvaluationStack(),\n            StringValue\n          );\n\n          if (intVal === null) {\n            throw new StoryException(\n              \"Passed non-integer when creating a list element from a numerical value.\"\n            );\n          }\n\n          let generatedListValue = null;\n\n          if (this.listDefinitions === null) {\n            return throwNullException(\"this.listDefinitions\");\n          }\n          let foundListDef = this.listDefinitions.TryListGetDefinition(\n            listNameVal.value,\n            null\n          );\n          if (foundListDef.exists) {\n            // Originally a primitive type, but here, can be null.\n            // TODO: Replace by default value?\n            if (intVal.value === null) {\n              return throwNullException(\"minInt.value\");\n            }\n\n            let foundItem = foundListDef.result!.TryGetItemWithValue(\n              intVal.value,\n              InkListItem.Null\n            );\n            if (foundItem.exists) {\n              generatedListValue = new ListValue(\n                foundItem.result!,\n                intVal.value\n              );\n            }\n          } else {\n            throw new StoryException(\n              \"Failed to find LIST called \" + listNameVal.value\n            );\n          }\n\n          if (generatedListValue == null) generatedListValue = new ListValue();\n\n          this.state.PushEvaluationStack(generatedListValue);\n          break;\n\n        case ControlCommand.CommandType.ListRange:\n          let max = asOrNull(this.state.PopEvaluationStack(), Value);\n          let min = asOrNull(this.state.PopEvaluationStack(), Value);\n\n          // var targetList = state.PopEvaluationStack () as ListValue;\n          let targetList = asOrNull(this.state.PopEvaluationStack(), ListValue);\n\n          if (targetList === null || min === null || max === null)\n            throw new StoryException(\n              \"Expected list, minimum and maximum for LIST_RANGE\"\n            );\n\n          if (targetList.value === null) {\n            return throwNullException(\"targetList.value\");\n          }\n          let result = targetList.value.ListWithSubRange(\n            min.valueObject,\n            max.valueObject\n          );\n\n          this.state.PushEvaluationStack(new ListValue(result));\n          break;\n\n        case ControlCommand.CommandType.ListRandom: {\n          let listVal = this.state.PopEvaluationStack() as ListValue;\n          if (listVal === null)\n            throw new StoryException(\"Expected list for LIST_RANDOM\");\n\n          let list = listVal.value;\n\n          let newList: InkList | null = null;\n\n          if (list === null) {\n            throw throwNullException(\"list\");\n          }\n          if (list.Count == 0) {\n            newList = new InkList();\n          } else {\n            // Generate a random index for the element to take\n            let resultSeed = this.state.storySeed + this.state.previousRandom;\n            let random = new PRNG(resultSeed);\n\n            let nextRandom = random.next();\n            let listItemIndex = nextRandom % list.Count;\n\n            // This bit is a little different from the original\n            // C# code, since iterators do not work in the same way.\n            // First, we iterate listItemIndex - 1 times, calling next().\n            // The listItemIndex-th time is made outside of the loop,\n            // in order to retrieve the value.\n            let listEnumerator = list.entries();\n            for (let i = 0; i <= listItemIndex - 1; i++) {\n              listEnumerator.next();\n            }\n            let value = listEnumerator.next().value;\n            let randomItem: KeyValuePair<InkListItem, number> = {\n              Key: InkListItem.fromSerializedKey(value[0]),\n              Value: value[1],\n            };\n\n            // Origin list is simply the origin of the one element\n            if (randomItem.Key.originName === null) {\n              return throwNullException(\"randomItem.Key.originName\");\n            }\n            newList = new InkList(randomItem.Key.originName, this);\n            newList.Add(randomItem.Key, randomItem.Value);\n\n            this.state.previousRandom = nextRandom;\n          }\n\n          this.state.PushEvaluationStack(new ListValue(newList));\n          break;\n        }\n\n        default:\n          this.Error(\"unhandled ControlCommand: \" + evalCommand);\n          break;\n      }\n\n      return true;\n    }\n\n    // Variable assignment\n    else if (contentObj instanceof VariableAssignment) {\n      let varAss = contentObj;\n      let assignedVal = this.state.PopEvaluationStack();\n\n      this.state.variablesState.Assign(varAss, assignedVal);\n\n      return true;\n    }\n\n    // Variable reference\n    else if (contentObj instanceof VariableReference) {\n      let varRef = contentObj;\n      let foundValue = null;\n\n      // Explicit read count value\n      if (varRef.pathForCount != null) {\n        let container = varRef.containerForCount;\n        let count = this.state.VisitCountForContainer(container);\n        foundValue = new IntValue(count);\n      }\n\n      // Normal variable reference\n      else {\n        foundValue = this.state.variablesState.GetVariableWithName(varRef.name);\n\n        if (foundValue == null) {\n          this.Warning(\n            \"Variable not found: '\" +\n              varRef.name +\n              \"'. Using default value of 0 (false). This can happen with temporary variables if the declaration hasn't yet been hit. Globals are always given a default value on load if a value doesn't exist in the save state.\"\n          );\n          foundValue = new IntValue(0);\n        }\n      }\n\n      this.state.PushEvaluationStack(foundValue);\n\n      return true;\n    }\n\n    // Native function call\n    else if (contentObj instanceof NativeFunctionCall) {\n      let func = contentObj;\n      let funcParams = this.state.PopEvaluationStack(func.numberOfParameters);\n      let result = func.Call(funcParams);\n      this.state.PushEvaluationStack(result);\n      return true;\n    }\n\n    // No control content, must be ordinary content\n    return false;\n  }\n\n  public ChoosePathString(\n    path: string,\n    resetCallstack = true,\n    args: any[] = []\n  ) {\n    this.IfAsyncWeCant(\"call ChoosePathString right now\");\n    if (this.onChoosePathString !== null) this.onChoosePathString(path, args);\n\n    if (resetCallstack) {\n      this.ResetCallstack();\n    } else {\n      if (this.state.callStack.currentElement.type == PushPopType.Function) {\n        let funcDetail = \"\";\n        let container =\n          this.state.callStack.currentElement.currentPointer.container;\n        if (container != null) {\n          funcDetail = \"(\" + container.path.toString() + \") \";\n        }\n        throw new Error(\n          \"Story was running a function \" +\n            funcDetail +\n            \"when you called ChoosePathString(\" +\n            path +\n            \") - this is almost certainly not not what you want! Full stack trace: \\n\" +\n            this.state.callStack.callStackTrace\n        );\n      }\n    }\n\n    this.state.PassArgumentsToEvaluationStack(args);\n    this.ChoosePath(new Path(path));\n  }\n\n  public IfAsyncWeCant(activityStr: string) {\n    if (this._asyncContinueActive)\n      throw new Error(\n        \"Can't \" +\n          activityStr +\n          \". Story is in the middle of a ContinueAsync(). Make more ContinueAsync() calls or a single Continue() call beforehand.\"\n      );\n  }\n\n  public ChoosePath(p: Path, incrementingTurnIndex: boolean = true) {\n    this.state.SetChosenPath(p, incrementingTurnIndex);\n\n    // Take a note of newly visited containers for read counts etc\n    this.VisitChangedContainersDueToDivert();\n  }\n\n  public ChooseChoiceIndex(choiceIdx: number) {\n    choiceIdx = choiceIdx;\n    let choices = this.currentChoices;\n    this.Assert(\n      choiceIdx >= 0 && choiceIdx < choices.length,\n      \"choice out of range\"\n    );\n\n    let choiceToChoose = choices[choiceIdx];\n    if (this.onMakeChoice !== null) this.onMakeChoice(choiceToChoose);\n\n    if (choiceToChoose.threadAtGeneration === null) {\n      return throwNullException(\"choiceToChoose.threadAtGeneration\");\n    }\n    if (choiceToChoose.targetPath === null) {\n      return throwNullException(\"choiceToChoose.targetPath\");\n    }\n\n    this.state.callStack.currentThread = choiceToChoose.threadAtGeneration;\n\n    this.ChoosePath(choiceToChoose.targetPath);\n  }\n\n  public HasFunction(functionName: string) {\n    try {\n      return this.KnotContainerWithName(functionName) != null;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  public EvaluateFunction(\n    functionName: string,\n    args: any[] = [],\n    returnTextOutput: boolean = false\n  ): Story.EvaluateFunctionTextOutput | any {\n    // EvaluateFunction behaves slightly differently than the C# version.\n    // In C#, you can pass a (second) parameter `out textOutput` to get the\n    // text outputted by the function. This is not possible in js. Instead,\n    // we maintain the regular signature (functionName, args), plus an\n    // optional third parameter returnTextOutput. If set to true, we will\n    // return both the textOutput and the returned value, as an object.\n\n    if (this.onEvaluateFunction !== null)\n      this.onEvaluateFunction(functionName, args);\n\n    this.IfAsyncWeCant(\"evaluate a function\");\n\n    if (functionName == null) {\n      throw new Error(\"Function is null\");\n    } else if (functionName == \"\" || functionName.trim() == \"\") {\n      throw new Error(\"Function is empty or white space.\");\n    }\n\n    let funcContainer = this.KnotContainerWithName(functionName);\n    if (funcContainer == null) {\n      throw new Error(\"Function doesn't exist: '\" + functionName + \"'\");\n    }\n\n    let outputStreamBefore: InkObject[] = [];\n    outputStreamBefore.push(...this.state.outputStream);\n    this._state.ResetOutput();\n\n    this.state.StartFunctionEvaluationFromGame(funcContainer, args);\n\n    // Evaluate the function, and collect the string output\n    let stringOutput = new StringBuilder();\n    while (this.canContinue) {\n      stringOutput.Append(this.Continue());\n    }\n    let textOutput = stringOutput.toString();\n\n    this._state.ResetOutput(outputStreamBefore);\n\n    let result = this.state.CompleteFunctionEvaluationFromGame();\n    if (this.onCompleteEvaluateFunction != null)\n      this.onCompleteEvaluateFunction(functionName, args, textOutput, result);\n\n    return returnTextOutput ? { returned: result, output: textOutput } : result;\n  }\n\n  public EvaluateExpression(exprContainer: Container) {\n    let startCallStackHeight = this.state.callStack.elements.length;\n\n    this.state.callStack.Push(PushPopType.Tunnel);\n\n    this._temporaryEvaluationContainer = exprContainer;\n\n    this.state.GoToStart();\n\n    let evalStackHeight = this.state.evaluationStack.length;\n\n    this.Continue();\n\n    this._temporaryEvaluationContainer = null;\n\n    // Should have fallen off the end of the Container, which should\n    // have auto-popped, but just in case we didn't for some reason,\n    // manually pop to restore the state (including currentPath).\n    if (this.state.callStack.elements.length > startCallStackHeight) {\n      this.state.PopCallStack();\n    }\n\n    let endStackHeight = this.state.evaluationStack.length;\n    if (endStackHeight > evalStackHeight) {\n      return this.state.PopEvaluationStack();\n    } else {\n      return null;\n    }\n  }\n\n  public allowExternalFunctionFallbacks: boolean = false;\n\n  public CallExternalFunction(\n    funcName: string | null,\n    numberOfArguments: number\n  ) {\n    if (funcName === null) {\n      return throwNullException(\"funcName\");\n    }\n    let funcDef = this._externals.get(funcName);\n    let fallbackFunctionContainer = null;\n\n    let foundExternal = typeof funcDef !== \"undefined\";\n\n    if (\n      foundExternal &&\n      !funcDef!.lookAheadSafe &&\n      this._stateSnapshotAtLastNewline !== null\n    ) {\n      this._sawLookaheadUnsafeFunctionAfterNewline = true;\n      return;\n    }\n\n    if (!foundExternal) {\n      if (this.allowExternalFunctionFallbacks) {\n        fallbackFunctionContainer = this.KnotContainerWithName(funcName);\n        this.Assert(\n          fallbackFunctionContainer !== null,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound, and fallback ink function could not be found.\"\n        );\n\n        // Divert direct into fallback function and we're done\n        this.state.callStack.Push(\n          PushPopType.Function,\n          undefined,\n          this.state.outputStream.length\n        );\n        this.state.divertedPointer = Pointer.StartOf(fallbackFunctionContainer);\n        return;\n      } else {\n        this.Assert(\n          false,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound (and ink fallbacks disabled).\"\n        );\n      }\n    }\n\n    // Pop arguments\n    let args: any[] = [];\n    for (let i = 0; i < numberOfArguments; ++i) {\n      // var poppedObj = state.PopEvaluationStack () as Value;\n      let poppedObj = asOrThrows(this.state.PopEvaluationStack(), Value);\n      let valueObj = poppedObj.valueObject;\n      args.push(valueObj);\n    }\n\n    // Reverse arguments from the order they were popped,\n    // so they're the right way round again.\n    args.reverse();\n\n    // Run the function!\n    let funcResult = funcDef!.function(args);\n\n    // Convert return value (if any) to the a type that the ink engine can use\n    let returnObj = null;\n    if (funcResult != null) {\n      returnObj = Value.Create(funcResult);\n      this.Assert(\n        returnObj !== null,\n        \"Could not create ink value from returned object of type \" +\n          typeof funcResult\n      );\n    } else {\n      returnObj = new Void();\n    }\n\n    this.state.PushEvaluationStack(returnObj);\n  }\n\n  public BindExternalFunctionGeneral(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean = true\n  ) {\n    this.IfAsyncWeCant(\"bind an external function\");\n    this.Assert(\n      !this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has already been bound.\"\n    );\n    this._externals.set(funcName, {\n      function: func,\n      lookAheadSafe: lookaheadSafe,\n    });\n  }\n\n  public TryCoerce(value: any) {\n    // We're skipping type coercition in this implementation. First of, js\n    // is loosely typed, so it's not that important. Secondly, there is no\n    // clean way (AFAIK) for the user to describe what type of parameters\n    // they expect.\n    return value;\n  }\n\n  public BindExternalFunction(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean = false\n  ) {\n    this.Assert(func != null, \"Can't bind a null function\");\n\n    this.BindExternalFunctionGeneral(\n      funcName,\n      (args: any) => {\n        this.Assert(\n          args.length >= func.length,\n          \"External function expected \" + func.length + \" arguments\"\n        );\n\n        let coercedArgs = [];\n        for (let i = 0, l = args.length; i < l; i++) {\n          coercedArgs[i] = this.TryCoerce(args[i]);\n        }\n        return func.apply(null, coercedArgs);\n      },\n      lookaheadSafe\n    );\n  }\n\n  public UnbindExternalFunction(funcName: string) {\n    this.IfAsyncWeCant(\"unbind an external a function\");\n    this.Assert(\n      this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has not been bound.\"\n    );\n    this._externals.delete(funcName);\n  }\n\n  public ValidateExternalBindings(): void;\n  public ValidateExternalBindings(\n    c: Container | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings(\n    o: InkObject | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings() {\n    let c: Container | null = null;\n    let o: InkObject | null = null;\n    let missingExternals: Set<string> = arguments[1] || new Set();\n\n    if (arguments[0] instanceof Container) {\n      c = arguments[0];\n    }\n\n    if (arguments[0] instanceof InkObject) {\n      o = arguments[0];\n    }\n\n    if (c === null && o === null) {\n      this.ValidateExternalBindings(\n        this._mainContentContainer,\n        missingExternals\n      );\n      this._hasValidatedExternals = true;\n\n      // No problem! Validation complete\n      if (missingExternals.size == 0) {\n        this._hasValidatedExternals = true;\n      } else {\n        let message = \"Error: Missing function binding for external\";\n        message += missingExternals.size > 1 ? \"s\" : \"\";\n        message += \": '\";\n        message += Array.from(missingExternals).join(\"', '\");\n        message += \"' \";\n        message += this.allowExternalFunctionFallbacks\n          ? \", and no fallback ink function found.\"\n          : \" (ink fallbacks disabled)\";\n\n        this.Error(message);\n      }\n    } else if (c != null) {\n      for (let innerContent of c.content) {\n        let container = innerContent as Container;\n        if (container == null || !container.hasValidName)\n          this.ValidateExternalBindings(innerContent, missingExternals);\n      }\n      for (let [, value] of c.namedContent) {\n        this.ValidateExternalBindings(\n          asOrNull(value, InkObject),\n          missingExternals\n        );\n      }\n    } else if (o != null) {\n      let divert = asOrNull(o, Divert);\n      if (divert && divert.isExternal) {\n        let name = divert.targetPathString;\n        if (name === null) {\n          return throwNullException(\"name\");\n        }\n        if (!this._externals.has(name)) {\n          if (this.allowExternalFunctionFallbacks) {\n            let fallbackFound =\n              this.mainContentContainer.namedContent.has(name);\n            if (!fallbackFound) {\n              missingExternals.add(name);\n            }\n          } else {\n            missingExternals.add(name);\n          }\n        }\n      }\n    }\n  }\n\n  public ObserveVariable(\n    variableName: string,\n    observer: Story.VariableObserver\n  ) {\n    this.IfAsyncWeCant(\"observe a new variable\");\n\n    if (this._variableObservers === null) this._variableObservers = new Map();\n\n    if (!this.state.variablesState.GlobalVariableExistsWithName(variableName))\n      throw new Error(\n        \"Cannot observe variable '\" +\n          variableName +\n          \"' because it wasn't declared in the ink story.\"\n      );\n\n    if (this._variableObservers.has(variableName)) {\n      this._variableObservers.get(variableName)!.push(observer);\n    } else {\n      this._variableObservers.set(variableName, [observer]);\n    }\n  }\n\n  public ObserveVariables(\n    variableNames: string[],\n    observers: Story.VariableObserver[]\n  ) {\n    for (let i = 0, l = variableNames.length; i < l; i++) {\n      this.ObserveVariable(variableNames[i], observers[i]);\n    }\n  }\n\n  public RemoveVariableObserver(\n    observer?: Story.VariableObserver,\n    specificVariableName?: string\n  ) {\n    // A couple of things to know about this method:\n    //\n    // 1. Since `RemoveVariableObserver` is exposed to the JavaScript world,\n    //    optionality is marked as `undefined` rather than `null`.\n    //    To keep things simple, null-checks are performed using regular\n    //    equality operators, where undefined == null.\n    //\n    // 2. Since C# delegates are translated to arrays of functions,\n    //    -= becomes a call to splice and null-checks are replaced by\n    //    emptiness-checks.\n    //\n    this.IfAsyncWeCant(\"remove a variable observer\");\n\n    if (this._variableObservers === null) return;\n\n    if (specificVariableName != null) {\n      if (this._variableObservers.has(specificVariableName)) {\n        if (observer != null) {\n          let variableObservers =\n            this._variableObservers.get(specificVariableName);\n          if (variableObservers != null) {\n            variableObservers.splice(variableObservers.indexOf(observer), 1);\n            if (variableObservers.length === 0) {\n              this._variableObservers.delete(specificVariableName);\n            }\n          }\n        } else {\n          this._variableObservers.delete(specificVariableName);\n        }\n      }\n    } else if (observer != null) {\n      let keys = this._variableObservers.keys();\n      for (let varName of keys) {\n        let variableObservers = this._variableObservers.get(varName);\n        if (variableObservers != null) {\n          variableObservers.splice(variableObservers.indexOf(observer), 1);\n          if (variableObservers.length === 0) {\n            this._variableObservers.delete(varName);\n          }\n        }\n      }\n    }\n  }\n\n  public VariableStateDidChangeEvent(\n    variableName: string,\n    newValueObj: InkObject\n  ) {\n    if (this._variableObservers === null) return;\n\n    let observers = this._variableObservers.get(variableName);\n    if (typeof observers !== \"undefined\") {\n      if (!(newValueObj instanceof Value)) {\n        throw new Error(\n          \"Tried to get the value of a variable that isn't a standard type\"\n        );\n      }\n      // var val = newValueObj as Value;\n      let val = asOrThrows(newValueObj, Value);\n\n      for (let observer of observers) {\n        observer(variableName, val.valueObject);\n      }\n    }\n  }\n\n  get globalTags() {\n    return this.TagsAtStartOfFlowContainerWithPathString(\"\");\n  }\n\n  public TagsForContentAtPath(path: string) {\n    return this.TagsAtStartOfFlowContainerWithPathString(path);\n  }\n\n  public TagsAtStartOfFlowContainerWithPathString(pathString: string) {\n    let path = new Path(pathString);\n\n    let flowContainer = this.ContentAtPath(path).container;\n    if (flowContainer === null) {\n      return throwNullException(\"flowContainer\");\n    }\n    while (true) {\n      let firstContent: InkObject = flowContainer.content[0];\n      if (firstContent instanceof Container) flowContainer = firstContent;\n      else break;\n    }\n\n    let inTag = false;\n    let tags: string[] | null = null;\n\n    for (let c of flowContainer.content) {\n      // var tag = c as Runtime.Tag;\n      let command = asOrNull(c, ControlCommand);\n\n      if (command != null) {\n        if (command.commandType == ControlCommand.CommandType.BeginTag) {\n          inTag = true;\n        } else if (command.commandType == ControlCommand.CommandType.EndTag) {\n          inTag = false;\n        }\n      } else if (inTag) {\n        let str = asOrNull(c, StringValue);\n        if (str !== null) {\n          if (tags === null) tags = [];\n          if (str.value !== null) tags.push(str.value);\n        } else {\n          this.Error(\n            \"Tag contained non-text content. Only plain text is allowed when using globalTags or TagsAtContentPath. If you want to evaluate dynamic content, you need to use story.Continue().\"\n          );\n        }\n      } else {\n        break;\n      }\n    }\n\n    return tags;\n  }\n\n  public BuildStringOfHierarchy() {\n    let sb = new StringBuilder();\n\n    this.mainContentContainer.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n\n    return sb.toString();\n  }\n\n  public BuildStringOfContainer(container: Container) {\n    let sb = new StringBuilder();\n    container.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n    return sb.toString();\n  }\n\n  public NextContent() {\n    this.state.previousPointer = this.state.currentPointer.copy();\n\n    if (!this.state.divertedPointer.isNull) {\n      this.state.currentPointer = this.state.divertedPointer.copy();\n      this.state.divertedPointer = Pointer.Null;\n\n      this.VisitChangedContainersDueToDivert();\n\n      if (!this.state.currentPointer.isNull) {\n        return;\n      }\n    }\n\n    let successfulPointerIncrement = this.IncrementContentPointer();\n\n    if (!successfulPointerIncrement) {\n      let didPop = false;\n\n      if (this.state.callStack.CanPop(PushPopType.Function)) {\n        this.state.PopCallStack(PushPopType.Function);\n\n        if (this.state.inExpressionEvaluation) {\n          this.state.PushEvaluationStack(new Void());\n        }\n\n        didPop = true;\n      } else if (this.state.callStack.canPopThread) {\n        this.state.callStack.PopThread();\n\n        didPop = true;\n      } else {\n        this.state.TryExitFunctionEvaluationFromGame();\n      }\n\n      if (didPop && !this.state.currentPointer.isNull) {\n        this.NextContent();\n      }\n    }\n  }\n\n  public IncrementContentPointer() {\n    let successfulIncrement = true;\n\n    let pointer = this.state.callStack.currentElement.currentPointer.copy();\n    pointer.index++;\n\n    if (pointer.container === null) {\n      return throwNullException(\"pointer.container\");\n    }\n    while (pointer.index >= pointer.container.content.length) {\n      successfulIncrement = false;\n\n      // Container nextAncestor = pointer.container.parent as Container;\n      let nextAncestor = asOrNull(pointer.container.parent, Container);\n      if (nextAncestor instanceof Container === false) {\n        break;\n      }\n\n      let indexInAncestor = nextAncestor!.content.indexOf(pointer.container);\n      if (indexInAncestor == -1) {\n        break;\n      }\n\n      pointer = new Pointer(nextAncestor, indexInAncestor);\n\n      pointer.index++;\n\n      successfulIncrement = true;\n      if (pointer.container === null) {\n        return throwNullException(\"pointer.container\");\n      }\n    }\n\n    if (!successfulIncrement) pointer = Pointer.Null;\n\n    this.state.callStack.currentElement.currentPointer = pointer.copy();\n\n    return successfulIncrement;\n  }\n\n  public TryFollowDefaultInvisibleChoice() {\n    let allChoices = this._state.currentChoices;\n\n    let invisibleChoices = allChoices.filter((c) => c.isInvisibleDefault);\n\n    if (\n      invisibleChoices.length == 0 ||\n      allChoices.length > invisibleChoices.length\n    )\n      return false;\n\n    let choice = invisibleChoices[0];\n\n    if (choice.targetPath === null) {\n      return throwNullException(\"choice.targetPath\");\n    }\n\n    if (choice.threadAtGeneration === null) {\n      return throwNullException(\"choice.threadAtGeneration\");\n    }\n\n    this.state.callStack.currentThread = choice.threadAtGeneration;\n\n    if (this._stateSnapshotAtLastNewline !== null) {\n      this.state.callStack.currentThread = this.state.callStack.ForkThread();\n    }\n\n    this.ChoosePath(choice.targetPath, false);\n\n    return true;\n  }\n\n  public NextSequenceShuffleIndex() {\n    // var numElementsIntVal = state.PopEvaluationStack () as IntValue;\n    let numElementsIntVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n    if (!(numElementsIntVal instanceof IntValue)) {\n      this.Error(\"expected number of elements in sequence for shuffle index\");\n      return 0;\n    }\n\n    let seqContainer = this.state.currentPointer.container;\n    if (seqContainer === null) {\n      return throwNullException(\"seqContainer\");\n    }\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (numElementsIntVal.value === null) {\n      return throwNullException(\"numElementsIntVal.value\");\n    }\n    let numElements = numElementsIntVal.value;\n\n    // var seqCountVal = state.PopEvaluationStack () as IntValue;\n    let seqCountVal = asOrThrows(this.state.PopEvaluationStack(), IntValue);\n    let seqCount = seqCountVal.value;\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (seqCount === null) {\n      return throwNullException(\"seqCount\");\n    }\n\n    let loopIndex = seqCount / numElements;\n    let iterationIndex = seqCount % numElements;\n\n    let seqPathStr = seqContainer.path.toString();\n    let sequenceHash = 0;\n    for (let i = 0, l = seqPathStr.length; i < l; i++) {\n      sequenceHash += seqPathStr.charCodeAt(i) || 0;\n    }\n    let randomSeed = sequenceHash + loopIndex + this.state.storySeed;\n    let random = new PRNG(Math.floor(randomSeed));\n\n    let unpickedIndices = [];\n    for (let i = 0; i < numElements; ++i) {\n      unpickedIndices.push(i);\n    }\n\n    for (let i = 0; i <= iterationIndex; ++i) {\n      let chosen = random.next() % unpickedIndices.length;\n      let chosenIndex = unpickedIndices[chosen];\n      unpickedIndices.splice(chosen, 1);\n\n      if (i == iterationIndex) {\n        return chosenIndex;\n      }\n    }\n\n    throw new Error(\"Should never reach here\");\n  }\n\n  public Error(message: string, useEndLineNumber = false): never {\n    let e = new StoryException(message);\n    e.useEndLineNumber = useEndLineNumber;\n    throw e;\n  }\n\n  public Warning(message: string) {\n    this.AddError(message, true);\n  }\n\n  public AddError(\n    message: string,\n    isWarning = false,\n    useEndLineNumber = false\n  ) {\n    let dm = this.currentDebugMetadata;\n\n    let errorTypeStr = isWarning ? \"WARNING\" : \"ERROR\";\n\n    if (dm != null) {\n      let lineNum = useEndLineNumber ? dm.endLineNumber : dm.startLineNumber;\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": '\" +\n        dm.fileName +\n        \"' line \" +\n        lineNum +\n        \": \" +\n        message;\n    } else if (!this.state.currentPointer.isNull) {\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": (\" +\n        this.state.currentPointer +\n        \"): \" +\n        message;\n    } else {\n      message = \"RUNTIME \" + errorTypeStr + \": \" + message;\n    }\n\n    this.state.AddError(message, isWarning);\n\n    // In a broken state don't need to know about any other errors.\n    if (!isWarning) this.state.ForceEnd();\n  }\n\n  public Assert(condition: boolean, message: string | null = null) {\n    if (condition == false) {\n      if (message == null) {\n        message = \"Story assert\";\n      }\n\n      throw new Error(message + \" \" + this.currentDebugMetadata);\n    }\n  }\n\n  get currentDebugMetadata(): DebugMetadata | null {\n    let dm: DebugMetadata | null;\n\n    let pointer = this.state.currentPointer;\n    if (!pointer.isNull && pointer.Resolve() !== null) {\n      dm = pointer.Resolve()!.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    for (let i = this.state.callStack.elements.length - 1; i >= 0; --i) {\n      pointer = this.state.callStack.elements[i].currentPointer;\n      if (!pointer.isNull && pointer.Resolve() !== null) {\n        dm = pointer.Resolve()!.debugMetadata;\n        if (dm !== null) {\n          return dm;\n        }\n      }\n    }\n\n    for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n      let outputObj = this.state.outputStream[i];\n      dm = outputObj.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    return null;\n  }\n\n  get mainContentContainer() {\n    if (this._temporaryEvaluationContainer) {\n      return this._temporaryEvaluationContainer;\n    } else {\n      return this._mainContentContainer;\n    }\n  }\n\n  /**\n   * `_mainContentContainer` is almost guaranteed to be set in the\n   * constructor, unless the json is malformed.\n   */\n  private _mainContentContainer!: Container;\n  private _listDefinitions: ListDefinitionsOrigin | null = null;\n\n  private _externals: Map<string, Story.ExternalFunctionDef>;\n  private _variableObservers: Map<string, Story.VariableObserver[]> | null =\n    null;\n  private _hasValidatedExternals: boolean = false;\n\n  private _temporaryEvaluationContainer: Container | null = null;\n\n  /**\n   * `state` is almost guaranteed to be set in the constructor, unless\n   * using the compiler-specific constructor which will likely not be used in\n   * the real world.\n   */\n  private _state!: StoryState;\n\n  private _asyncContinueActive: boolean = false;\n  private _stateSnapshotAtLastNewline: StoryState | null = null;\n  private _sawLookaheadUnsafeFunctionAfterNewline: boolean = false;\n\n  private _recursiveContinueCount: number = 0;\n\n  private _asyncSaving: boolean = false;\n\n  private _profiler: any | null = null; // TODO: Profiler\n}\n\nexport namespace Story {\n  export enum OutputStateChange {\n    NoChange = 0,\n    ExtendedBeyondNewline = 1,\n    NewlineRemoved = 2,\n  }\n\n  export interface EvaluateFunctionTextOutput {\n    returned: any;\n    output: string;\n  }\n\n  export interface ExternalFunctionDef {\n    function: ExternalFunction;\n    lookAheadSafe: boolean;\n  }\n\n  export type VariableObserver = (variableName: string, newValue: any) => void;\n  export type ExternalFunction = (...args: any) => any;\n}\n"],"names":["Path","constructor","this","_components","_componentsString","_isRelative","arguments","componentsString","Component","head","tail","push","concat","Array","relative","isRelative","componentCount","length","tailComps","slice","self","lastComponent","lastComponentIdx","containsNamedComponent","i","l","isIndex","path","GetComponent","index","PathByAppendingPath","pathToAppend","p","upwardMoves","isParent","join","value","substring","componentStrings","split","str","test","parseInt","toString","Equals","otherPath","PathByAppendingComponent","c","Debug","ValueType","PushPopType","ErrorType","asOrNull","obj","type","unsafeTypeAssertion","asOrThrows","Error","asINamedContentOrNull","hasValidName","name","nullIfUndefined","isEquatable","parentId","indexOrName","static","otherComp","Assert","condition","message","console","warn","trace","AssertType","variable","NullException","throwNullException","InkObject","parent","_debugMetadata","_path","debugMetadata","ownDebugMetadata","DebugLineNumberOfPath","root","rootContentContainer","targetContent","ContentAtPath","dm","startLineNumber","comps","child","container","Container","namedChild","unshift","content","indexOf","ResolvePath","nearestContainer","contentContainer","ConvertPathToRelative","globalPath","ownPath","minPathLength","Math","min","lastSharedPathCompIndex","ownComp","numUpwardsMoves","newPathComps","up","ToParent","down","CompactPathString","globalPathStr","relativePathStr","ancestor","Copy","SetChild","prop","StringBuilder","string","Length","Append","AppendLine","AppendFormat","format","args","replace","match","num","Clear","InkListItem","originName","itemName","nameParts","Null","isNull","fullName","otherItem","copy","serialized","JSON","stringify","key","parse","isLikeInkListItem","inkListItem","item","hasOwnProperty","InkList","Map","super","origins","_originNames","otherList","otherOriginNames","originNames","singleOriginListName","originStory","SetInitialOriginName","listDefinitions","def","TryListGetDefinition","exists","result","singleElement","Add","Key","Value","myListItem","listValue","_a","FindSingleItemListWithName","AddItem","itemOrItemName","origin","intVal","TryGetValueForItem","foundListDef","ContainsItemWithName","itemVal","ValueForItem","ContainsItemNamed","fromSerializedKey","ContainsKey","has","serializedKey","set","Remove","delete","Count","size","originOfMaxItem","maxOriginName","maxItem","every","initialOriginName","SetInitialOriginNames","initialOriginNames","max","minItem","inverse","list","items","all","Union","union","Intersect","intersection","HasIntersection","Without","listToRemove","Contains","what","GreaterThan","GreaterThanOrEquals","LessThan","LessThanOrEquals","MaxAsList","MinAsList","ListWithSubRange","minBound","maxBound","ordered","orderedItems","minValue","maxValue","Number","MAX_SAFE_INTEGER","isInteger","subList","otherInkList","sort","x","y","localeCompare","sb","valueOf","NaN","StoryException","useEndLineNumber","tryGetValueFromMap","map","val","get","AbstractValue","preferredNumberType","Int","IntValue","Float","isNaN","FloatValue","BoolValue","Boolean","StringValue","String","DivertTargetValue","ListValue","Create","valueObject","BadCastException","targetType","valueType","isTruthy","Bool","Cast","newType","_isNewline","_isInlineWhitespace","isNewline","isInlineWhitespace","isNonWhitespace","parsedInt","defaultValue","tryParseInt","parsedFloat","parseFloat","tryParseFloat","targetPath","DivertTarget","VariablePointerValue","variableName","contextIndex","_contextIndex","VariablePointer","List","listOrSingleItem","singleValue","oldValue","newValue","oldList","newList","SearchResult","approximate","correctObj","searchResult","_content","namedContent","visitsShouldBeCounted","turnIndexShouldBeCounted","countingAtStartOnly","_pathToFirstLeafContent","AddContent","namedOnlyContent","namedOnlyContentDict","inkObject","named","existingNamedOnly","AddToNamedContentOnly","countFlags","flags","CountFlags","Visits","Turns","CountStartOnly","flag","pathToFirstLeafContent","internalPathToFirstLeafContent","components","contentObjOrList","contentList","contentObj","TryAddNamedContent","namedContentObj","partialPathStart","partialPathLength","currentContainer","currentObj","comp","foundObj","ContentWithPathComponent","InsertContent","splice","AddContentsOfContainer","otherContainer","component","foundContent","BuildStringOfHierarchy","indentation","pointedObj","appendIndentation","onlyNamed","Glue","ControlCommand","commandType","_commandType","CommandType","NotSet","EvalStart","EvalOutput","EvalEnd","Duplicate","PopEvaluatedValue","PopFunction","PopTunnel","BeginString","EndString","NoOp","ChoiceCount","TurnsSince","ReadCount","Random","SeedRandom","VisitIndex","SequenceShuffleIndex","StartThread","Done","End","ListFromInt","ListRange","ListRandom","BeginTag","EndTag","Pointer","Resolve","Divert","_targetPath","targetObj","targetPointer","_targetPointer","StartOf","targetPathString","hasVariableTarget","variableDivertName","stackPushType","pushesToStack","isExternal","externalArgs","isConditional","otherDivert","targetStr","Function","ChoicePoint","onceOnly","_pathOnChoice","hasCondition","hasStartContent","hasChoiceOnlyContent","isInvisibleDefault","pathOnChoice","choiceTargetObj","choiceTarget","pathStringOnChoice","VariableReference","containerForCount","pathForCount","pathStringForCount","VariableAssignment","isNewDeclaration","isGlobal","Void","NativeFunctionCall","functionName","GenerateNativeFunctionsIfNecessary","_nativeFunctions","_name","_isPrototype","_prototype","numberOfParameters","_numberOfParameters","Call","parameters","hasList","CallBinaryListOperation","coercedParams","CoerceValuesToSingleType","coercedType","CallType","parametersOfSingleType","param1","valType","val1","paramCount","_operationFuncs","opForTypeObj","val2","opForType","resultVal","CallListIncrementOperation","v1","v2","op","asBooleanOrThrows","listIntParams","listVal","resultInkList","listItemKey","listItemValue","listItem","intOp","targetInt","itemOrigin","incrementedItem","TryGetItemWithValue","parametersIn","specialCaseList","parametersOut","inkObjectVal","castedValue","t","AddIntBinaryOp","Subtract","Multiply","Divide","floor","Mod","AddIntUnaryOp","Negate","Equal","Greater","Less","NotEquals","Not","And","Or","Max","Min","Pow","pow","Floor","Identity","Ceiling","AddFloatBinaryOp","AddFloatUnaryOp","ceil","AddStringBinaryOp","Has","includes","Hasnt","AddListBinaryOp","AddListUnaryOp","Invert","All","ListMin","ListMax","ValueOfList","divertTargetsEqual","d1","d2","divertTargetsNotEqual","AddOpToNativeFunc","AddOpFuncForType","nativeFunc","Tag","tagText","text","Choice","threadAtGeneration","sourcePath","tags","originalThreadIndex","ListDefinition","_items","_itemNameToValues","ContainsItem","ListDefinitionsOrigin","lists","_lists","_allUnambiguousListValueCache","listOfLists","definition","JsonSerialisation","jArray","skipLast","count","jTok","runtimeObj","JTokenToRuntimeObject","writer","dictionary","WriteObjectStart","WritePropertyStart","WriteRuntimeObject","WritePropertyEnd","WriteObjectEnd","WriteArrayStart","WriteArrayEnd","dict","WriteIntProperty","WriteRuntimeContainer","divert","divTypeKey","Tunnel","WriteProperty","choicePoint","boolVal","WriteBool","WriteInt","floatVal","WriteFloat","strVal","Write","WriteStringStart","WriteStringInner","WriteStringEnd","WriteInkList","divTargetVal","varPtrVal","controlCmd","_controlCommandNames","varRef","readCountPath","varAss","tag","choice","WriteChoice","jObject","token","firstChar","CallExistsWithName","CallWithName","isArray","propValue","varPtr","isDivert","divPushType","external","target","readCountVarRef","isVarAss","isGlobalVar","varName","isNewDecl","undefined","listContent","rawList","namesAsObjs","nameToVal","JObjectToChoice","JArrayToContainer","toJson","me","removes","space","k","v","some","r","withoutName","hasNameProperty","hasTerminator","namedContainer","WriteNull","JArrayToRuntimeObjList","terminatingObj","namedContentItem","namedSubContainer","jObj","w","WritePropertyNameStart","WritePropertyNameInner","WritePropertyNameEnd","listDefJson","defsObj","allDefs","nameValueKey","nameValue","TOTAL_VALUES","CallStack","elements","callStack","depth","currentElement","cs","_threads","callstack","currentElementIndex","currentThread","canPop","_threadCounter","_startOfRoot","Story","storyContext","Reset","toCopy","otherThread","Thread","Element","SetJsonToken","jThreads","jThreadTok","jThreadObj","thread","WriteJson","WriteObject","PushThread","newThread","threadIndex","ForkThread","forkedThread","PopThread","canPopThread","elementIsEvaluateFromGame","FunctionEvaluationFromGame","Push","externalEvaluationStackHeight","outputStreamLengthWithPushed","element","currentPointer","evaluationStackHeightWhenPushed","functionStartInOutputStream","CanPop","Pop","pop","GetTemporaryVariableWithName","varValue","temporaryVariables","SetTemporaryVariable","declareNew","contextElement","RetainListOriginsForAssignment","ContextForVariableNamed","ThreadWithIndex","filtered","filter","callStackTrace","isCurrent","pointer","inExpressionEvaluation","previousPointer","jThreadCallstack","jElTok","currentContainerPathStr","jElementObj","pushPopType","currentContainerPathStrToken","threadPointerResult","Warning","el","temps","JObjectToDictionaryRuntimeObjs","clear","prevContentObjPath","prevPath","PointerAtPath","e","WriteDictionaryRuntimeObjs","resolvedPointer","VariablesState","variableChangedEvent","callback","variableChangedEventCallbacks","batchObservingVariableChanges","_batchObservingVariableChanges","_changedVariablesForBatchObs","Set","currentValue","_globalVariables","_callStack","$","varContents","patch","TryGetGlobal","_defaultGlobalVariables","SetGlobal","listDefsOrigin","_listDefsOrigin","Proxy","ApplyPatch","namedVarKey","namedVarValue","globals","changedVariables","add","jToken","varValKey","varValValue","loadedToken","tokenInkObject","keyValKey","keyValValue","dontSaveDefaultValues","defaultVal","RuntimeObjectsEqual","obj1","obj2","GetVariableWithName","GetRawVariableWithName","varPointer","ValueAtVariablePointer","TryGetDefaultVariableValue","GlobalVariableExistsWithName","variableValue","Assign","setGlobal","ResolveVariablePointer","existingPointer","SnapshotDefaultGlobals","AddChangedVariable","GetContextIndexOfVariableNamed","doubleRedirectionPointer","ObserveVariableChange","PRNG","seed","next","nextFloat","StatePatch","_globals","_changedVariables","visitCounts","_visitCounts","turnIndices","_turnIndices","TryGetVisitCount","SetVisitCount","SetTurnIndex","TryGetTurnIndex","SimpleJson","Reader","ToDictionary","ToArray","_rootObject","Writer","_currentPropertyName","_currentString","_stateStack","_collectionStack","_propertyNameStack","_jsonObject","inner","StartNewObject","newObject","state","State","Property","currentCollection","currentPropertyName","propertyName","None","StateElement","Object","innerOrContent","WriteFloatProperty","IncrementChildCount","childCount","PropertyName","escape","_addToCurrentObject","error","POSITIVE_INFINITY","NEGATIVE_INFINITY","currEl","Flow","story","outputStream","currentChoices","jChoiceThreadsObj","LoadFlowChoiceThreads","WriteListRuntimeObjs","hasChoiceThreads","jChoiceThreads","foundActiveThread","jSavedChoiceThread","StoryState","ToJson","indented","LoadJson","json","TextToDictionary","LoadJsonObj","onDidLoadState","VisitCountAtPathString","pathString","visitCountOut","_patch","VisitCountForContainer","containerPathStr","count2","IncrementVisitCountForContainer","currCount","RecordTurnIndexVisitToContainer","currentTurnIndex","TurnsSinceForContainer","index2","callstackDepth","_currentFlow","canContinue","generatedChoices","currentErrors","_currentErrors","currentWarnings","_currentWarnings","variablesState","_variablesState","evaluationStack","_evaluationStack","_currentTurnIndex","currentPathString","hasError","hasWarning","currentText","_outputStreamTextDirty","inTag","outputObj","textContent","controlCommand","_currentText","CleanOutputWhitespace","currentWhitespaceStart","startOfLine","charAt","currentTags","_outputStreamTagsDirty","_currentTags","txt","currentFlowName","currentFlowIsDefaultFlow","kDefaultFlowName","aliveFlowNames","_aliveFlowNamesDirty","_aliveFlowNames","_namedFlows","flowName","keys","kInkSaveStateVersion","kMinCompatibleLoadVersion","divertedPointer","storySeed","previousRandom","didSafeExit","OutputStreamDirty","timeSeed","Date","getTime","GoToStart","mainContentContainer","SwitchFlow_Internal","flow","SwitchToDefaultFlow_Internal","RemoveFlow_Internal","CopyAndStartPatching","namedFlowKey","namedFlowValue","RestoreAfterPatch","ApplyAnyPatch","ApplyCountChanges","newCount","isVisit","WriteIntDictionary","inkVersionCurrent","jSaveVersion","flowsObj","flowsObjDict","flowsObjDictEntries","entries","namedFlowObjKey","namedFlowObjValue","flowObj","currFlowName","currentDivertTargetPath","divertPath","JObjectToIntDictionary","ResetErrors","ResetOutput","objs","PushToOutputStream","listText","TrySplittingHeadTailWhitespace","textObj","PushToOutputStreamIndividual","PopFromOutputStream","single","headFirstNewlineIdx","headLastNewlineIdx","tailLastNewlineIdx","tailFirstNewlineIdx","listTexts","innerStrStart","innerStrEnd","leadingSpaces","innerStrText","numSpaces","trailingSpaces","glue","includeInOutput","TrimNewlinesFromOutputStream","functionTrimIndex","glueTrimIndex","o","trimIndex","RemoveExistingGlue","callStackElements","outputStreamEndsInNewline","outputStreamContainsContent","removeWhitespaceFrom","cmd","inStringEvaluation","PushEvaluationStack","n","PopEvaluationStack","numberOfObjects","PeekEvaluationStack","ForceEnd","TrimWhitespaceFromFunctionEnd","functionStartPoint","PopCallStack","popType","SetChosenPath","incrementingTurnIndex","newPointer","StartFunctionEvaluationFromGame","funcContainer","PassArgumentsToEvaluationStack","TryExitFunctionEvaluationFromGame","CompleteFunctionEvaluationFromGame","originalEvaluationStackHeight","returnedObj","poppedObj","returnVal","AddError","isWarning","Stopwatch","startTime","ElapsedMilliseconds","Start","Stop","nVal","isFinite","choices","_state","IfAsyncWeCant","_listDefinitions","StartProfiling","EndProfiling","inkVersionMinimumCompatible","onError","onDidContinue","onMakeChoice","onEvaluateFunction","onCompleteEvaluateFunction","onChoosePathString","_prevContainers","allowExternalFunctionFallbacks","_variableObservers","_hasValidatedExternals","_temporaryEvaluationContainer","_asyncContinueActive","_stateSnapshotAtLastNewline","_sawLookaheadUnsafeFunctionAfterNewline","_recursiveContinueCount","_asyncSaving","_profiler","_mainContentContainer","jsonString","_externals","rootObject","versionObj","formatFromFile","listDefsObj","rootToken","JTokenToListDefinitions","ResetState","shouldReturn","VariableStateDidChangeEvent","bind","ResetGlobals","ResetCallstack","originalPointer","ChoosePath","ContinueInternal","SwitchFlow","RemoveFlow","SwitchToDefaultFlow","Continue","ContinueAsync","asyncContinueComplete","millisecsLimitAsync","ValidateExternalBindings","PreContinue","isAsyncTimeLimited","durationStopwatch","ContinueSingleStep","RestoreStateSnapshot","PostContinue","err","PreStep","Step","PostStep","TryFollowDefaultInvisibleChoice","PreSnapshot","change","CalculateNewlineOutputStateChange","OutputStateChange","ExtendedBeyondNewline","NewlineRemoved","DiscardSnapshot","StateSnapshot","PostSnapshot","prevText","currText","prevTagCount","currTagCount","newlineStillExists","NoChange","ContinueMaximally","KnotContainerWithName","pathLengthToUse","CopyStateForBackgroundThreadSave","stateToSave","BackgroundSaveComplete","shouldAddToStream","containerToEnter","VisitContainer","currentContentObj","isLogicOrFlowControl","PerformLogicAndFlowControl","ProcessChoice","contextIdx","NextContent","atStart","VisitChangedContainersDueToDivert","prevAncestor","currentChildOfContainer","currentContainerAncestor","allChildrenEnteredAtStart","enteringAtStart","PopChoiceStringAndTags","choiceOnlyStrVal","showChoice","conditionValue","IsTruthy","startText","choiceOnlyText","reverse","divTarget","currentDivert","intContent","errorMessage","CallExternalFunction","sourceName","evalCommand","output","overrideTunnelReturnTarget","popped","names","expected","errorMsg","contentStackForTag","outputCountConsumed","command","choiceTag","contentStackForString","contentToRetain","rescuedTag","choiceCount","extraNote","eitherCount","divertTarget","maxInt","minInt","randomRange","resultSeed","nextRandom","chosenValue","shuffleIndex","NextSequenceShuffleIndex","listNameVal","generatedListValue","foundItem","targetList","listItemIndex","listEnumerator","randomItem","assignedVal","foundValue","func","funcParams","ChoosePathString","resetCallstack","funcDetail","activityStr","ChooseChoiceIndex","choiceIdx","choiceToChoose","HasFunction","EvaluateFunction","returnTextOutput","trim","outputStreamBefore","stringOutput","textOutput","returned","EvaluateExpression","exprContainer","startCallStackHeight","evalStackHeight","funcName","numberOfArguments","funcDef","fallbackFunctionContainer","foundExternal","lookAheadSafe","valueObj","funcResult","function","returnObj","BindExternalFunctionGeneral","lookaheadSafe","TryCoerce","BindExternalFunction","coercedArgs","apply","UnbindExternalFunction","missingExternals","from","innerContent","ObserveVariable","observer","ObserveVariables","variableNames","observers","RemoveVariableObserver","specificVariableName","variableObservers","newValueObj","globalTags","TagsAtStartOfFlowContainerWithPathString","TagsForContentAtPath","flowContainer","firstContent","BuildStringOfContainer","IncrementContentPointer","didPop","successfulIncrement","nextAncestor","indexInAncestor","allChoices","invisibleChoices","numElementsIntVal","seqContainer","numElements","seqCount","loopIndex","iterationIndex","seqPathStr","sequenceHash","charCodeAt","randomSeed","random","unpickedIndices","chosen","chosenIndex","currentDebugMetadata","errorTypeStr","lineNum","endLineNumber","fileName"],"mappings":"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"}